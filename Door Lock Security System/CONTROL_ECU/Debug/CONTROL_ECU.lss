
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  000024c4  00002558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800182  00800182  0000267a  2**0
                  ALLOC
  3 .stab         00002850  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001372  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000623e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000639e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00008461  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00009533  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a564  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000a6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000a9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_8>
      24:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <main>
      8a:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 12 	jmp	0x248a	; 0x248a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 12 	jmp	0x246a	; 0x246a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 12 	jmp	0x246a	; 0x246a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 12 	jmp	0x248a	; 0x248a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 35 12 	jmp	0x246a	; 0x246a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__fixsfsi+0x80>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__fixsfsi+0x80>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__fixsfsi+0x8a>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__fixsfsi+0x94>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__fixsfsi+0x80>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__fixsfsi+0x8a>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__fixsfsi+0x94>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__fixsfsi+0x9c>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__fixsfsi+0x9c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__fixsfsi+0x9c>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <BUZZER_init>:
#include "buzzer.h"

#include"gpio.h"


void BUZZER_init(){
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	/*Making the buzzer pin an output pin*/
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	66 e0       	ldi	r22, 0x06	; 6
     d7a:	41 e0       	ldi	r20, 0x01	; 1
     d7c:	0e 94 40 0b 	call	0x1680	; 0x1680 <GPIO_setupPinDirection>
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <BUZZER_on>:

void BUZZER_on(){
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	/*turn on the buzzer*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	66 e0       	ldi	r22, 0x06	; 6
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <BUZZER_off>:

void BUZZER_off(){
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	/*turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	66 e0       	ldi	r22, 0x06	; 6
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <receivePassword>:
 */
void LockTheSystem(TIMER_configType *configtype1);



void receivePassword(){
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	/* Looping for the password size to receive all character from the HMI ECU*/
	for(g_count=0;g_count<PASSWORD_SIZE;g_count++){
     dc2:	10 92 82 01 	sts	0x0182, r1
     dc6:	16 c0       	rjmp	.+44     	; 0xdf4 <receivePassword+0x3e>
		/* while loop until HMI ECU send ARE_MC2_READY to the CONTROL ECU */
		while(UART_receiveByte() != ARE_MC2_READY);
     dc8:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
     dcc:	85 35       	cpi	r24, 0x55	; 85
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <receivePassword+0x12>
		/*CONTROL ECU will respond with i am ready which is MC2_READY*/
		UART_sendByte(MC2_READY);
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_sendByte>
		/*Then HMI ECU will send the character to the CONTROL ECU and the CONTOL ECU will save it in the g_password*/
    	g_password[g_count] = UART_receiveByte();
     dd6:	80 91 82 01 	lds	r24, 0x0182
     dda:	08 2f       	mov	r16, r24
     ddc:	10 e0       	ldi	r17, 0x00	; 0
     dde:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
     de2:	f8 01       	movw	r30, r16
     de4:	e1 57       	subi	r30, 0x71	; 113
     de6:	fe 4f       	sbci	r31, 0xFE	; 254
     de8:	80 83       	st	Z, r24



void receivePassword(){
	/* Looping for the password size to receive all character from the HMI ECU*/
	for(g_count=0;g_count<PASSWORD_SIZE;g_count++){
     dea:	80 91 82 01 	lds	r24, 0x0182
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 82 01 	sts	0x0182, r24
     df4:	80 91 82 01 	lds	r24, 0x0182
     df8:	85 30       	cpi	r24, 0x05	; 5
     dfa:	30 f3       	brcs	.-52     	; 0xdc8 <receivePassword+0x12>
		/*CONTROL ECU will respond with i am ready which is MC2_READY*/
		UART_sendByte(MC2_READY);
		/*Then HMI ECU will send the character to the CONTROL ECU and the CONTOL ECU will save it in the g_password*/
    	g_password[g_count] = UART_receiveByte();
	}
}
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <receiveMatchPassword>:
void receiveMatchPassword(){
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	/* Looping for the password size to receive all character from the HMI ECU*/
	for(g_count=0;g_count<PASSWORD_SIZE;g_count++){
     e12:	10 92 82 01 	sts	0x0182, r1
     e16:	16 c0       	rjmp	.+44     	; 0xe44 <receiveMatchPassword+0x3e>
		/* while loop until HMI ECU send ARE_MC2_READY to the CONTROL ECU */
		while(UART_receiveByte() != ARE_MC2_READY);
     e18:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
     e1c:	85 35       	cpi	r24, 0x55	; 85
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <receiveMatchPassword+0x12>
		/*CONTROL ECU will respond with i am ready which is MC2_READY*/
		UART_sendByte(MC2_READY);
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_sendByte>
		/*Then HMI ECU will send the character to the CONTROL ECU and the CONTOL ECU will save it in the g_pass*/
    	g_pass[g_count] = UART_receiveByte();
     e26:	80 91 82 01 	lds	r24, 0x0182
     e2a:	08 2f       	mov	r16, r24
     e2c:	10 e0       	ldi	r17, 0x00	; 0
     e2e:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
     e32:	f8 01       	movw	r30, r16
     e34:	e6 57       	subi	r30, 0x76	; 118
     e36:	fe 4f       	sbci	r31, 0xFE	; 254
     e38:	80 83       	st	Z, r24
    	g_password[g_count] = UART_receiveByte();
	}
}
void receiveMatchPassword(){
	/* Looping for the password size to receive all character from the HMI ECU*/
	for(g_count=0;g_count<PASSWORD_SIZE;g_count++){
     e3a:	80 91 82 01 	lds	r24, 0x0182
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	80 93 82 01 	sts	0x0182, r24
     e44:	80 91 82 01 	lds	r24, 0x0182
     e48:	85 30       	cpi	r24, 0x05	; 5
     e4a:	30 f3       	brcs	.-52     	; 0xe18 <receiveMatchPassword+0x12>
		/*CONTROL ECU will respond with i am ready which is MC2_READY*/
		UART_sendByte(MC2_READY);
		/*Then HMI ECU will send the character to the CONTROL ECU and the CONTOL ECU will save it in the g_pass*/
    	g_pass[g_count] = UART_receiveByte();
	}
}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <comparePassword>:

uint8 comparePassword(){
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	/* Looping for the password size */
	for(g_count=0;g_count<PASSWORD_SIZE;g_count++){
     e60:	10 92 82 01 	sts	0x0182, r1
     e64:	19 c0       	rjmp	.+50     	; 0xe98 <comparePassword+0x42>
		/*if only one character is not the same the for loop will be terminated by returning PASSWORD_IS_WRONG */
		if(g_password[g_count] != g_pass[g_count]){
     e66:	80 91 82 01 	lds	r24, 0x0182
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	e1 57       	subi	r30, 0x71	; 113
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	20 81       	ld	r18, Z
     e76:	80 91 82 01 	lds	r24, 0x0182
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	e6 57       	subi	r30, 0x76	; 118
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	80 81       	ld	r24, Z
     e86:	28 17       	cp	r18, r24
     e88:	11 f0       	breq	.+4      	; 0xe8e <comparePassword+0x38>
			return PASSWORD_IS_WRONG;
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	0b c0       	rjmp	.+22     	; 0xea4 <comparePassword+0x4e>
	}
}

uint8 comparePassword(){
	/* Looping for the password size */
	for(g_count=0;g_count<PASSWORD_SIZE;g_count++){
     e8e:	80 91 82 01 	lds	r24, 0x0182
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	80 93 82 01 	sts	0x0182, r24
     e98:	80 91 82 01 	lds	r24, 0x0182
     e9c:	85 30       	cpi	r24, 0x05	; 5
     e9e:	18 f3       	brcs	.-58     	; 0xe66 <comparePassword+0x10>
		if(g_password[g_count] != g_pass[g_count]){
			return PASSWORD_IS_WRONG;
		}
	}
	/*if the for loop is not terminated, the password will be correct and will return PASSWORD_IS_RIGHT */
	return PASSWORD_IS_RIGHT;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea6:	0f 90       	pop	r0
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <savePasswordToEEPROM>:

void savePasswordToEEPROM(){
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
	/* The password is an array so we will call the function of saving an array
	 * note : look at this function inside the source file of EEPROM (eeprom.c)
	 * */
	EEPROM_writeArray(PASSWORD_LOCATION,g_password,PASSWORD_SIZE);
     eb6:	2f e8       	ldi	r18, 0x8F	; 143
     eb8:	31 e0       	ldi	r19, 0x01	; 1
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	b9 01       	movw	r22, r18
     ec0:	45 e0       	ldi	r20, 0x05	; 5
     ec2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <EEPROM_writeArray>
}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <getPasswordFromEEPROM>:

void getPasswordFromEEPROM(){
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	/* The password is an array so we will call the function of saving an array
	 * note : look at this function inside the source file of EEPROM (eeprom.c)
	 * */
	EEPROM_readArray(PASSWORD_LOCATION,g_password,PASSWORD_SIZE);
     ed4:	2f e8       	ldi	r18, 0x8F	; 143
     ed6:	31 e0       	ldi	r19, 0x01	; 1
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	b9 01       	movw	r22, r18
     ede:	45 e0       	ldi	r20, 0x05	; 5
     ee0:	0e 94 ae 0a 	call	0x155c	; 0x155c <EEPROM_readArray>
}
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <adjustPassword>:

void adjustPassword(){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
	/* The password will be adjusted only if the 2-passwords are right so we made the variable below and initialize it
	 * by false and looping for the false condition*/
	uint8 flag=FALSE;
     ef4:	19 82       	std	Y+1, r1	; 0x01
     ef6:	11 c0       	rjmp	.+34     	; 0xf1a <adjustPassword+0x30>
	while(flag == FALSE){
		/* receive the password */
		receivePassword();
     ef8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <receivePassword>
		/* recceive the matched password*/
		receiveMatchPassword();
     efc:	0e 94 03 07 	call	0xe06	; 0xe06 <receiveMatchPassword>
		/* compare the 2-password and put the return value inside the flag*/
		flag = comparePassword();
     f00:	0e 94 2b 07 	call	0xe56	; 0xe56 <comparePassword>
     f04:	89 83       	std	Y+1, r24	; 0x01
		/* CONTROL ECU will send the HMI ECU are u ready which is ARE_MC1_READY*/
   	    UART_sendByte(ARE_MC1_READY);
     f06:	80 e1       	ldi	r24, 0x10	; 16
     f08:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_sendByte>
   	    /* CONTROL ECU will not send the flag unless the HMI ECU respond with MC1_READY*/
	    while(UART_receiveByte() != MC1_READY);
     f0c:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
     f10:	80 32       	cpi	r24, 0x20	; 32
     f12:	e1 f7       	brne	.-8      	; 0xf0c <adjustPassword+0x22>
	    /* Sending the flag to the HMI ECU*/
	    UART_sendByte(flag);
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_sendByte>

void adjustPassword(){
	/* The password will be adjusted only if the 2-passwords are right so we made the variable below and initialize it
	 * by false and looping for the false condition*/
	uint8 flag=FALSE;
	while(flag == FALSE){
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	88 23       	and	r24, r24
     f1e:	61 f3       	breq	.-40     	; 0xef8 <adjustPassword+0xe>
   	    /* CONTROL ECU will not send the flag unless the HMI ECU respond with MC1_READY*/
	    while(UART_receiveByte() != MC1_READY);
	    /* Sending the flag to the HMI ECU*/
	    UART_sendByte(flag);
	}
}
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <mc2ReceiveDecision>:


void mc2ReceiveDecision(){
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	/* HMI ECU will send to the CONTROL ECU are u ready which is ARE_MC2_READY so this is a looping until CONTROL ECU
	 * receives this byte
	 * */
	while(UART_receiveByte() != ARE_MC2_READY);
     f30:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
     f34:	85 35       	cpi	r24, 0x55	; 85
     f36:	e1 f7       	brne	.-8      	; 0xf30 <mc2ReceiveDecision+0x8>
	/* HMO ECU will not send the decision unless the CONTROL ECU respond back with MC2_READY*/
	UART_sendByte(MC2_READY);
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_sendByte>
	/* receiving the decision from the HMI ECU*/
	decision=UART_receiveByte();
     f3e:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
     f42:	80 93 83 01 	sts	0x0183, r24
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <mc2SendDecision>:

void mc2SendDecision(){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	/* CONTROL ECU wants to send the decision to the HMI ECU but we must make synchronization between them first so,
	 * CONTROL ECU will ask if the HMI ECY is ready
	 * */
    UART_sendByte(ARE_MC1_READY);
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_sendByte>
    /* while loop until the HMI_ECU send i am ready which is MC1_READY*/
    while(UART_receiveByte() != MC1_READY);
     f5a:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
     f5e:	80 32       	cpi	r24, 0x20	; 32
     f60:	e1 f7       	brne	.-8      	; 0xf5a <mc2SendDecision+0xe>
    /* sending the decision to the HMI ECU*/
    UART_sendByte(decision);
     f62:	80 91 83 01 	lds	r24, 0x0183
     f66:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_sendByte>
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <timerCounter>:

void timerCounter(void){
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	/* increment the timer counter to controlling the time of door and lock */
	g_timerCount++;
     f78:	80 91 85 01 	lds	r24, 0x0185
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 93 85 01 	sts	0x0185, r24
}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <LockTheSystem>:
void LockTheSystem(TIMER_configType *configtype1){
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <LockTheSystem+0x6>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01
	/* put zero in the g_timerCount to start from zero (for safety) */
	g_timerCount=0;
     f96:	10 92 85 01 	sts	0x0185, r1
	/* we need to put 0 in the variable g_wrongPassCount for the next time */
	g_wrongPassCount=0;
     f9a:	10 92 84 01 	sts	0x0184, r1
	/* Initialize the TIMER1 by the structure that control the lock time*/
	TIMER_init(configtype1);
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <TIMER_init>
	/*turn on the buzzer */
    BUZZER_on();
     fa6:	0e 94 c3 06 	call	0xd86	; 0xd86 <BUZZER_on>
    /* sending lock the system to the HMI ECU to be display into the LD */
    decision=LOCK_THE_SYSTEM;
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	80 93 83 01 	sts	0x0183, r24
    /* Sending the decision to the HMI ECU */
    mc2SendDecision();
     fb0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
    /* while loop until the timer reach a 1 minute*/
    while(g_timerCount<10);
     fb4:	80 91 85 01 	lds	r24, 0x0185
     fb8:	8a 30       	cpi	r24, 0x0A	; 10
     fba:	e0 f3       	brcs	.-8      	; 0xfb4 <LockTheSystem+0x2c>
    /* De-initializing the timer */
    TIMER_DeInit(TIMER1);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TIMER_DeInit>
    /*turn off the buzzer*/
	BUZZER_off();
     fc2:	0e 94 cf 06 	call	0xd9e	; 0xd9e <BUZZER_off>
	/* put zero in the g_timerCount for the next time*/
	g_timerCount=0;
     fc6:	10 92 85 01 	sts	0x0185, r1
}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <main>:




int main(){
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	af 97       	sbiw	r28, 0x2f	; 47
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
	uint8 decisionFlag;
	/* To enable the global interrupt */
	SREG|=(1<<7);
     fe8:	af e5       	ldi	r26, 0x5F	; 95
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ef e5       	ldi	r30, 0x5F	; 95
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 68       	ori	r24, 0x80	; 128
     ff4:	8c 93       	st	X, r24
	/*To initialize the DC MOTOR : making the 2-pins an output pins*/
	DcMotor_Init();
     ff6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DcMotor_Init>
	 *                            with compare value of 46875
	 *                            Ttimer = 46875 * 0.000128 = 6 second
	 *                            to make the Lock time is 1 minute we need 10 overflow so, we will while loop until
	 *                            g_timerCount is equal 10
	 * */
	TIMER_configType configtype1={TIMER1,COMPARE_MODE_TIMER1,F_CPU_1024,0,46875};
     ffa:	ce 01       	movw	r24, r28
     ffc:	02 96       	adiw	r24, 0x02	; 2
     ffe:	9d 8f       	std	Y+29, r25	; 0x1d
    1000:	8c 8f       	std	Y+28, r24	; 0x1c
    1002:	eb e7       	ldi	r30, 0x7B	; 123
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	ff 8f       	std	Y+31, r31	; 0x1f
    1008:	ee 8f       	std	Y+30, r30	; 0x1e
    100a:	f7 e0       	ldi	r31, 0x07	; 7
    100c:	f8 a3       	std	Y+32, r31	; 0x20
    100e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1010:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1012:	00 80       	ld	r0, Z
    1014:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1016:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	9f 8f       	std	Y+31, r25	; 0x1f
    101c:	8e 8f       	std	Y+30, r24	; 0x1e
    101e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1020:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1022:	00 82       	st	Z, r0
    1024:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1026:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	9d 8f       	std	Y+29, r25	; 0x1d
    102c:	8c 8f       	std	Y+28, r24	; 0x1c
    102e:	98 a1       	ldd	r25, Y+32	; 0x20
    1030:	91 50       	subi	r25, 0x01	; 1
    1032:	98 a3       	std	Y+32, r25	; 0x20
    1034:	e8 a1       	ldd	r30, Y+32	; 0x20
    1036:	ee 23       	and	r30, r30
    1038:	51 f7       	brne	.-44     	; 0x100e <main+0x3a>
	 *                             we will while loop until g_timerCount is equal 39
	 *                          3- To make the door holding time is (15+3+15) seconds we need 66 overflow so,
	 *                             we will while loop until g_timerCount is equal 66
	 *
	 * */
	TIMER_configType configtype2={TIMER1,COMPARE_MODE_TIMER1,F_CPU_64,0,62500};
    103a:	ce 01       	movw	r24, r28
    103c:	09 96       	adiw	r24, 0x09	; 9
    103e:	9a a3       	std	Y+34, r25	; 0x22
    1040:	89 a3       	std	Y+33, r24	; 0x21
    1042:	e4 e7       	ldi	r30, 0x74	; 116
    1044:	f1 e0       	ldi	r31, 0x01	; 1
    1046:	fc a3       	std	Y+36, r31	; 0x24
    1048:	eb a3       	std	Y+35, r30	; 0x23
    104a:	f7 e0       	ldi	r31, 0x07	; 7
    104c:	fd a3       	std	Y+37, r31	; 0x25
    104e:	eb a1       	ldd	r30, Y+35	; 0x23
    1050:	fc a1       	ldd	r31, Y+36	; 0x24
    1052:	00 80       	ld	r0, Z
    1054:	8b a1       	ldd	r24, Y+35	; 0x23
    1056:	9c a1       	ldd	r25, Y+36	; 0x24
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	9c a3       	std	Y+36, r25	; 0x24
    105c:	8b a3       	std	Y+35, r24	; 0x23
    105e:	e9 a1       	ldd	r30, Y+33	; 0x21
    1060:	fa a1       	ldd	r31, Y+34	; 0x22
    1062:	00 82       	st	Z, r0
    1064:	89 a1       	ldd	r24, Y+33	; 0x21
    1066:	9a a1       	ldd	r25, Y+34	; 0x22
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	9a a3       	std	Y+34, r25	; 0x22
    106c:	89 a3       	std	Y+33, r24	; 0x21
    106e:	9d a1       	ldd	r25, Y+37	; 0x25
    1070:	91 50       	subi	r25, 0x01	; 1
    1072:	9d a3       	std	Y+37, r25	; 0x25
    1074:	ed a1       	ldd	r30, Y+37	; 0x25
    1076:	ee 23       	and	r30, r30
    1078:	51 f7       	brne	.-44     	; 0x104e <main+0x7a>
	/* Set the call back of the timer interrupt in order to make the timer not depends on the application*/
	TIMER1_setCallBack(timerCounter);
    107a:	88 eb       	ldi	r24, 0xB8	; 184
    107c:	97 e0       	ldi	r25, 0x07	; 7
    107e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <TIMER1_setCallBack>
	/* To make the buzzer pin an output pin*/
	BUZZER_init();
    1082:	0e 94 b7 06 	call	0xd6e	; 0xd6e <BUZZER_init>
	/*initialize the UART with a specific UART frame based on structure*/
	UART_ConfigType uartConfigType={PARITY_DISABLED,ONE_BIT,EIGHT_BITS,115200};
    1086:	ce 01       	movw	r24, r28
    1088:	40 96       	adiw	r24, 0x10	; 16
    108a:	9f a3       	std	Y+39, r25	; 0x27
    108c:	8e a3       	std	Y+38, r24	; 0x26
    108e:	ed e6       	ldi	r30, 0x6D	; 109
    1090:	f1 e0       	ldi	r31, 0x01	; 1
    1092:	f9 a7       	std	Y+41, r31	; 0x29
    1094:	e8 a7       	std	Y+40, r30	; 0x28
    1096:	f7 e0       	ldi	r31, 0x07	; 7
    1098:	fa a7       	std	Y+42, r31	; 0x2a
    109a:	e8 a5       	ldd	r30, Y+40	; 0x28
    109c:	f9 a5       	ldd	r31, Y+41	; 0x29
    109e:	00 80       	ld	r0, Z
    10a0:	88 a5       	ldd	r24, Y+40	; 0x28
    10a2:	99 a5       	ldd	r25, Y+41	; 0x29
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	99 a7       	std	Y+41, r25	; 0x29
    10a8:	88 a7       	std	Y+40, r24	; 0x28
    10aa:	ee a1       	ldd	r30, Y+38	; 0x26
    10ac:	ff a1       	ldd	r31, Y+39	; 0x27
    10ae:	00 82       	st	Z, r0
    10b0:	8e a1       	ldd	r24, Y+38	; 0x26
    10b2:	9f a1       	ldd	r25, Y+39	; 0x27
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	9f a3       	std	Y+39, r25	; 0x27
    10b8:	8e a3       	std	Y+38, r24	; 0x26
    10ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    10bc:	91 50       	subi	r25, 0x01	; 1
    10be:	9a a7       	std	Y+42, r25	; 0x2a
    10c0:	ea a5       	ldd	r30, Y+42	; 0x2a
    10c2:	ee 23       	and	r30, r30
    10c4:	51 f7       	brne	.-44     	; 0x109a <main+0xc6>
	/*Initialize the UART based on the upper structure */
	UART_init(&uartConfigType);
    10c6:	ce 01       	movw	r24, r28
    10c8:	40 96       	adiw	r24, 0x10	; 16
    10ca:	0e 94 3a 11 	call	0x2274	; 0x2274 <UART_init>
	/*initialize the TWI with a specific speed and address based on structure*/
	TWI_configType twiConfigType={FAST_MODE_400,1};
    10ce:	ce 01       	movw	r24, r28
    10d0:	47 96       	adiw	r24, 0x17	; 23
    10d2:	9c a7       	std	Y+44, r25	; 0x2c
    10d4:	8b a7       	std	Y+43, r24	; 0x2b
    10d6:	e8 e6       	ldi	r30, 0x68	; 104
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	fe a7       	std	Y+46, r31	; 0x2e
    10dc:	ed a7       	std	Y+45, r30	; 0x2d
    10de:	f5 e0       	ldi	r31, 0x05	; 5
    10e0:	ff a7       	std	Y+47, r31	; 0x2f
    10e2:	ed a5       	ldd	r30, Y+45	; 0x2d
    10e4:	fe a5       	ldd	r31, Y+46	; 0x2e
    10e6:	00 80       	ld	r0, Z
    10e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    10ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	9e a7       	std	Y+46, r25	; 0x2e
    10f0:	8d a7       	std	Y+45, r24	; 0x2d
    10f2:	eb a5       	ldd	r30, Y+43	; 0x2b
    10f4:	fc a5       	ldd	r31, Y+44	; 0x2c
    10f6:	00 82       	st	Z, r0
    10f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	9c a7       	std	Y+44, r25	; 0x2c
    1100:	8b a7       	std	Y+43, r24	; 0x2b
    1102:	9f a5       	ldd	r25, Y+47	; 0x2f
    1104:	91 50       	subi	r25, 0x01	; 1
    1106:	9f a7       	std	Y+47, r25	; 0x2f
    1108:	ef a5       	ldd	r30, Y+47	; 0x2f
    110a:	ee 23       	and	r30, r30
    110c:	51 f7       	brne	.-44     	; 0x10e2 <main+0x10e>
	/*Initialize the TWI based on the upper structure */
	TWI_init(&twiConfigType);
    110e:	ce 01       	movw	r24, r28
    1110:	47 96       	adiw	r24, 0x17	; 23
    1112:	0e 94 9a 10 	call	0x2134	; 0x2134 <TWI_init>

	/*Here, the CONTROL ECU will make the decisions to the HMI ECU*/

	/* First : in case of new system the user must set the password so the CONTROL ECU need to set the password that's
	 * why it send that decision to the HMI ECU to control the keypad for setting the Password */
	decision=ADJUST_PASSWORD;
    1116:	84 e0       	ldi	r24, 0x04	; 4
    1118:	80 93 83 01 	sts	0x0183, r24
	/* Sending the decision to the HMI ECU */
	mc2SendDecision();
    111c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
	/* Call the function of adjusting the password */
	adjustPassword();
    1120:	0e 94 75 07 	call	0xeea	; 0xeea <adjustPassword>
	/* Second : sending order the password is saved to the HMI to display that on the LCD */
	decision = PASSWORD_IS_SAVED;
    1124:	82 e1       	ldi	r24, 0x12	; 18
    1126:	80 93 83 01 	sts	0x0183, r24
	/* sending the decision to the HMI ECU*/
	mc2SendDecision();
    112a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
	/* Saving the password in the external EEPROM */
	savePasswordToEEPROM();
    112e:	0e 94 57 07 	call	0xeae	; 0xeae <savePasswordToEEPROM>


	while(1){
		/* Third : CONTROL ECU sends this decision to the HMI ECU to display the menu on the screen by the HMI ECU*/
		decision = DISPLAY_MENU;
    1132:	85 e0       	ldi	r24, 0x05	; 5
    1134:	80 93 83 01 	sts	0x0183, r24
		/* sending the decision to the HMI ECU*/
		mc2SendDecision();
    1138:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
		/* Fourth : To control the keypad to get a choice from the user, we set the choice to be that */
		decision=GET_CHOICE;
    113c:	86 e0       	ldi	r24, 0x06	; 6
    113e:	80 93 83 01 	sts	0x0183, r24
		/* sending the decision to the HMI ECU*/
		mc2SendDecision();
    1142:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
		/* FIFTH  : To receive the choice from the HMI ECU, we call this function below */
		mc2ReceiveDecision();
    1146:	0e 94 94 07 	call	0xf28	; 0xf28 <mc2ReceiveDecision>

		/* In case the user enter '+' (OPEN_THE_DOOR) or '-' (CHANGE_THE_PASSWORD) */
		if( (decision == OPEN_THE_DOOR) || (decision == CHANGE_THE_PASSWORD) ){
    114a:	80 91 83 01 	lds	r24, 0x0183
    114e:	8b 32       	cpi	r24, 0x2B	; 43
    1150:	29 f0       	breq	.+10     	; 0x115c <main+0x188>
    1152:	80 91 83 01 	lds	r24, 0x0183
    1156:	8d 32       	cpi	r24, 0x2D	; 45
    1158:	09 f0       	breq	.+2      	; 0x115c <main+0x188>
    115a:	a4 c0       	rjmp	.+328    	; 0x12a4 <main+0x2d0>
			/* To not lose the user choice, we put its value in the variable below */
			decisionFlag=decision;
    115c:	80 91 83 01 	lds	r24, 0x0183
    1160:	89 83       	std	Y+1, r24	; 0x01
			/* Get the password from External EEPROM and save it inside the g_password global variable */
			getPasswordFromEEPROM();
    1162:	0e 94 66 07 	call	0xecc	; 0xecc <getPasswordFromEEPROM>
			/* Sixth : in order to open the door or change the password, the user must enter the old password
			 *         so, we need to get the password from the user and compare it with the password in the EEPROM
			 *         */
			decision=GET_PASSWORD;
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	80 93 83 01 	sts	0x0183, r24
			/* sending the decision to the HMI ECU*/
			mc2SendDecision();
    116c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
    1170:	8e c0       	rjmp	.+284    	; 0x128e <main+0x2ba>
			/* Looping until the g_wrongPassCount less than 3 and decision==GET_PASSWORD
			 * The display menu will be displayed again after this loop is terminated
			 *  */
			while((g_wrongPassCount<3) && (decision==GET_PASSWORD)){
				/* Receive the password from the HMI ECU */
			    receiveMatchPassword();
    1172:	0e 94 03 07 	call	0xe06	; 0xe06 <receiveMatchPassword>
			    /* Call the compare function..
			     * This function return 1 or 0 : 1 if--> password is right, 0 if--> password is wrong
			     * */
			    decision=comparePassword();
    1176:	0e 94 2b 07 	call	0xe56	; 0xe56 <comparePassword>
    117a:	80 93 83 01 	sts	0x0183, r24
			    /* First case : if the password is right and the user choice was changing the password */
			    if(decision == PASSWORD_IS_RIGHT && decisionFlag==CHANGE_THE_PASSWORD){
    117e:	80 91 83 01 	lds	r24, 0x0183
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	c9 f4       	brne	.+50     	; 0x11b8 <main+0x1e4>
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	8d 32       	cpi	r24, 0x2D	; 45
    118a:	b1 f4       	brne	.+44     	; 0x11b8 <main+0x1e4>
			    	/* sending password is right to the HMI ECU to be display into the LD */
			    	decision = PASSWORD_IS_RIGHT;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 93 83 01 	sts	0x0183, r24
			    	/* sending the decision to the HMI ECU*/
			    	mc2SendDecision();
    1192:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	/* we need to put 0 in the variable g_wrongPassCount for the next time */
			    	g_wrongPassCount=0;
    1196:	10 92 84 01 	sts	0x0184, r1
			    	/* sending that decision to the HMI ECU to control the keypad & LCD for setting the Password */
			    	decision=ADJUST_PASSWORD;
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	80 93 83 01 	sts	0x0183, r24
			    	/* sending the decision to the HMI ECU*/
			    	mc2SendDecision();
    11a0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	/* Call the function of adjusting the password */
			    	adjustPassword();
    11a4:	0e 94 75 07 	call	0xeea	; 0xeea <adjustPassword>
			    	/* Second : sending order the password is saved to the HMI to display that on the LCD */
			    	decision = PASSWORD_IS_SAVED;
    11a8:	82 e1       	ldi	r24, 0x12	; 18
    11aa:	80 93 83 01 	sts	0x0183, r24
			    	/* sending the decision to the HMI ECU*/
			    	mc2SendDecision();
    11ae:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	/* Saving the password in the external EEPROM */
			    	savePasswordToEEPROM();
    11b2:	0e 94 57 07 	call	0xeae	; 0xeae <savePasswordToEEPROM>
    11b6:	6b c0       	rjmp	.+214    	; 0x128e <main+0x2ba>
			    }
			    /* Second case : if the password is right and the user choice was changing the password */
			    else if(decision == PASSWORD_IS_RIGHT && decisionFlag==OPEN_THE_DOOR){
    11b8:	80 91 83 01 	lds	r24, 0x0183
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	09 f0       	breq	.+2      	; 0x11c2 <main+0x1ee>
    11c0:	4b c0       	rjmp	.+150    	; 0x1258 <main+0x284>
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	8b 32       	cpi	r24, 0x2B	; 43
    11c6:	09 f0       	breq	.+2      	; 0x11ca <main+0x1f6>
    11c8:	47 c0       	rjmp	.+142    	; 0x1258 <main+0x284>
			    	/* sending password is right to the HMI ECU to be display into the LD */
			    	decision = PASSWORD_IS_RIGHT_OPEN;
    11ca:	83 e1       	ldi	r24, 0x13	; 19
    11cc:	80 93 83 01 	sts	0x0183, r24
			    	/* sending the decision to the HMI ECU*/
			    	mc2SendDecision();
    11d0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	/* we need to put 0 in the variable g_wrongPassCount for the next time */
			    	g_wrongPassCount=0;
    11d4:	10 92 84 01 	sts	0x0184, r1
			    	/* put zero inside the timer counter to start from zero (for safety)*/
			    	g_timerCount=0;
    11d8:	10 92 85 01 	sts	0x0185, r1
			    	/* Initialize the TIMER1 by the structure that control the door time (opening and closing) */
			    	TIMER_init(&configtype2);
    11dc:	ce 01       	movw	r24, r28
    11de:	09 96       	adiw	r24, 0x09	; 9
    11e0:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <TIMER_init>

			    	/* Second : sending order the door is opening to the HMI to display that on the LCD */
			    	decision = DOOR_IS_OPENING;
    11e4:	87 e0       	ldi	r24, 0x07	; 7
    11e6:	80 93 83 01 	sts	0x0183, r24
			    	/* sending the decision to the HMI ECU*/
			    	mc2SendDecision();
    11ea:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	/* rotate the dc motor clock wise*/
			    	DcMotor_Rotate(MOTOR_CW,100);
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	64 e6       	ldi	r22, 0x64	; 100
    11f2:	0e 94 7d 09 	call	0x12fa	; 0x12fa <DcMotor_Rotate>
			    	/* looping until it reach 15 seconds (Opening time = 15 seconds)*/
			    	while(g_timerCount < 30);
    11f6:	80 91 85 01 	lds	r24, 0x0185
    11fa:	8e 31       	cpi	r24, 0x1E	; 30
    11fc:	e0 f3       	brcs	.-8      	; 0x11f6 <main+0x222>

			    	/* Second : sending order the door is opened to the HMI to display that on the LCD */
			    	decision = DOOR_IS_OPENED;
    11fe:	88 e0       	ldi	r24, 0x08	; 8
    1200:	80 93 83 01 	sts	0x0183, r24
			    	/* sending the decision to the HMI ECU*/
			    	mc2SendDecision();
    1204:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	/* Stop the dc motor to make the user enters the door*/
			    	DcMotor_Rotate(MOTOR_OFF,0);
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <DcMotor_Rotate>
			    	/* looping until it reach 18 seconds (Holding time = 3 seconds)
			    	 * Why 18 seconds ??
			    	 * --> 15 seconds for the Opening time and 3 second for the holding time
			    	 * */
			    	while(g_timerCount < 39);
    1210:	80 91 85 01 	lds	r24, 0x0185
    1214:	87 32       	cpi	r24, 0x27	; 39
    1216:	e0 f3       	brcs	.-8      	; 0x1210 <main+0x23c>

			    	/* Second : sending order the door is closing to the HMI to display that on the LCD */
			    	decision = DOOR_IS_CLOSING;
    1218:	89 e0       	ldi	r24, 0x09	; 9
    121a:	80 93 83 01 	sts	0x0183, r24
			    	/* sending the decision to the HMI ECU*/
			    	mc2SendDecision();
    121e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	/* rotate the dc motor counter clock wise*/
			    	DcMotor_Rotate(MOTOR_CCW,100);
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	64 e6       	ldi	r22, 0x64	; 100
    1226:	0e 94 7d 09 	call	0x12fa	; 0x12fa <DcMotor_Rotate>
			    	/* looping until it reach 33 seconds (Closing time = 15 seconds)
			    	 * Why 33 seconds ??
			    	 * --> 15 seconds for the Opening time, 3 second for the holding time and 15 seconds for the closing
			    	 *  time
			    	 * */
			    	while(g_timerCount < 66);
    122a:	80 91 85 01 	lds	r24, 0x0185
    122e:	82 34       	cpi	r24, 0x42	; 66
    1230:	e0 f3       	brcs	.-8      	; 0x122a <main+0x256>

			    	/* Second : sending order the door is closed to the HMI to display that on the LCD */
			    	decision = DOOR_IS_CLOSED;
    1232:	81 e1       	ldi	r24, 0x11	; 17
    1234:	80 93 83 01 	sts	0x0183, r24
			    	/* sending the decision to the HMI ECU*/
			    	mc2SendDecision();
    1238:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	/* Stop the dc motor ( door is closed )*/
			    	DcMotor_Rotate(MOTOR_OFF,0);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	0e 94 7d 09 	call	0x12fa	; 0x12fa <DcMotor_Rotate>
			    	/*waiting 2-second to make the message display on the screen*/
			    	while(g_timerCount < 70);
    1244:	80 91 85 01 	lds	r24, 0x0185
    1248:	86 34       	cpi	r24, 0x46	; 70
    124a:	e0 f3       	brcs	.-8      	; 0x1244 <main+0x270>
			    	/* De-init the TIMER1 */
			    	TIMER_DeInit(TIMER1);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <TIMER_DeInit>
			    	/* put zero into the g_timerCount for the next time */
			    	g_timerCount=0;
    1252:	10 92 85 01 	sts	0x0185, r1
    1256:	1b c0       	rjmp	.+54     	; 0x128e <main+0x2ba>

			    }
			    /* Third case : if the password is right and the user choice was changing the password */
			    else if(decision == PASSWORD_IS_WRONG){
    1258:	80 91 83 01 	lds	r24, 0x0183
    125c:	88 23       	and	r24, r24
    125e:	b9 f4       	brne	.+46     	; 0x128e <main+0x2ba>
			    	/* Increment the g_wrongPassCount every time the user enters the password wrong */
			    	g_wrongPassCount++;
    1260:	80 91 84 01 	lds	r24, 0x0184
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	80 93 84 01 	sts	0x0184, r24
			    	/* If g_wrongPassCount equal the maximum possible wrong password, the system must be locked*/
			    	if(g_wrongPassCount == MAX_POSSIBLE_WRONG_PASSWORD)
    126a:	80 91 84 01 	lds	r24, 0x0184
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	29 f4       	brne	.+10     	; 0x127c <main+0x2a8>
			    	{
			    		/* Calling the Lock function*/
			    	    LockTheSystem(&configtype1);
    1272:	ce 01       	movw	r24, r28
    1274:	02 96       	adiw	r24, 0x02	; 2
    1276:	0e 94 c4 07 	call	0xf88	; 0xf88 <LockTheSystem>
    127a:	09 c0       	rjmp	.+18     	; 0x128e <main+0x2ba>
			    	}
			    	/* if the g_wrongPassCount is less than 3, the following must be happened*/
			    	else
			    	{
			    		/* sending password is wrong to the HMI ECU to be display into the LD */
			   	        decision=PASSWORD_IS_WRONG;
    127c:	10 92 83 01 	sts	0x0183, r1
			   	        /* sending the decision to the HMI ECU*/
			    	    mc2SendDecision();
    1280:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			    	    /* Get the password again */
			    	    decision=GET_PASSWORD;
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	80 93 83 01 	sts	0x0183, r24
			    	    /* sending the decision to the HMI ECU*/
			    	    mc2SendDecision();
    128a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
			/* sending the decision to the HMI ECU*/
			mc2SendDecision();
			/* Looping until the g_wrongPassCount less than 3 and decision==GET_PASSWORD
			 * The display menu will be displayed again after this loop is terminated
			 *  */
			while((g_wrongPassCount<3) && (decision==GET_PASSWORD)){
    128e:	80 91 84 01 	lds	r24, 0x0184
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	08 f0       	brcs	.+2      	; 0x1298 <main+0x2c4>
    1296:	4d cf       	rjmp	.-358    	; 0x1132 <main+0x15e>
    1298:	80 91 83 01 	lds	r24, 0x0183
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	09 f4       	brne	.+2      	; 0x12a2 <main+0x2ce>
    12a0:	68 cf       	rjmp	.-304    	; 0x1172 <main+0x19e>
    12a2:	47 cf       	rjmp	.-370    	; 0x1132 <main+0x15e>
			    	   }
			    }
			}
		}
		/* In case the user enters another character rather than '-' and '+'*/
		else if( (decision != CHANGE_THE_PASSWORD) && (decision != OPEN_THE_DOOR) ){
    12a4:	80 91 83 01 	lds	r24, 0x0183
    12a8:	8d 32       	cpi	r24, 0x2D	; 45
    12aa:	09 f4       	brne	.+2      	; 0x12ae <main+0x2da>
    12ac:	42 cf       	rjmp	.-380    	; 0x1132 <main+0x15e>
    12ae:	80 91 83 01 	lds	r24, 0x0183
    12b2:	8b 32       	cpi	r24, 0x2B	; 43
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <main+0x2e4>
    12b6:	3d cf       	rjmp	.-390    	; 0x1132 <main+0x15e>
			/* This is not valid option so, we will ask the user to enter the again*/
			decision = NOT_VALID_CHOICE;
    12b8:	84 e1       	ldi	r24, 0x14	; 20
    12ba:	80 93 83 01 	sts	0x0183, r24
			/* sending the decision to the HMI ECU*/
			mc2SendDecision();
    12be:	0e 94 a6 07 	call	0xf4c	; 0xf4c <mc2SendDecision>
    12c2:	37 cf       	rjmp	.-402    	; 0x1132 <main+0x15e>

000012c4 <DcMotor_Init>:
#include"gpio.h"
#include"pwm.h"
#include"common_macros.h"


void DcMotor_Init(void){
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	/*setup the direction of the 2-pins of the motor */
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,PIN_OUTPUT);
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	65 e0       	ldi	r22, 0x05	; 5
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 40 0b 	call	0x1680	; 0x1680 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,PIN_OUTPUT);
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	66 e0       	ldi	r22, 0x06	; 6
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	0e 94 40 0b 	call	0x1680	; 0x1680 <GPIO_setupPinDirection>
	/*to write 0*/
	GPIO_writePin(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,LOGIC_LOW);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	65 e0       	ldi	r22, 0x05	; 5
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,LOGIC_LOW);
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	66 e0       	ldi	r22, 0x06	; 6
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DcMotor_Rotate+0x6>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	6a 83       	std	Y+2, r22	; 0x02
	if(state == MOTOR_CW){
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	59 f4       	brne	.+22     	; 0x1324 <DcMotor_Rotate+0x2a>
	GPIO_writePin(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,LOGIC_HIGH);
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	65 e0       	ldi	r22, 0x05	; 5
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,LOGIC_LOW);
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	66 e0       	ldi	r22, 0x06	; 6
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
    1322:	18 c0       	rjmp	.+48     	; 0x1354 <DcMotor_Rotate+0x5a>
	}
	else if(state == MOTOR_CCW){
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	59 f4       	brne	.+22     	; 0x1340 <DcMotor_Rotate+0x46>
	GPIO_writePin(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,LOGIC_LOW);
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	65 e0       	ldi	r22, 0x05	; 5
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,LOGIC_HIGH);
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	66 e0       	ldi	r22, 0x06	; 6
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
    133e:	0a c0       	rjmp	.+20     	; 0x1354 <DcMotor_Rotate+0x5a>
	}
	else{
	GPIO_writePin(MOTOR_IN1_PORT_ID,MOTOR_IN1_PIN_ID,LOGIC_LOW);
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	65 e0       	ldi	r22, 0x05	; 5
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID,MOTOR_IN2_PIN_ID,LOGIC_LOW);
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	66 e0       	ldi	r22, 0x06	; 6
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	0e 94 6f 0c 	call	0x18de	; 0x18de <GPIO_writePin>
	}
	PWM_Timer0_Start(speed);
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <PWM_Timer0_Start>

}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <EEPROM_writeByte>:

#include"twi.h"
#include"eeprom.h"


uint8 EEPROM_writeByte(uint16 address,uint8 data){
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <EEPROM_writeByte+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <EEPROM_writeByte+0x8>
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	6b 83       	std	Y+3, r22	; 0x03
	/* First : we send the start bit
	 * */
	TWI_start();
    1376:	0e 94 d7 10 	call	0x21ae	; 0x21ae <TWI_start>
	/*Check of sending the start bit*/
	if(TWI_getStatus() != TWI_START){
    137a:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	11 f0       	breq	.+4      	; 0x1386 <EEPROM_writeByte+0x22>
		return ERROR;
    1382:	1c 82       	std	Y+4, r1	; 0x04
    1384:	28 c0       	rjmp	.+80     	; 0x13d6 <EEPROM_writeByte+0x72>
	}
	/* In the device address, we need to send the last 3-bits of the location which we want to write in
	 * */
	TWI_writeByte((uint8)((((address & 0x0700)>>7) | 0xA0 )));
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	80 70       	andi	r24, 0x00	; 0
    138c:	97 70       	andi	r25, 0x07	; 7
    138e:	88 0f       	add	r24, r24
    1390:	89 2f       	mov	r24, r25
    1392:	88 1f       	adc	r24, r24
    1394:	99 0b       	sbc	r25, r25
    1396:	91 95       	neg	r25
    1398:	80 6a       	ori	r24, 0xA0	; 160
    139a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the slave address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK){
    139e:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    13a2:	88 31       	cpi	r24, 0x18	; 24
    13a4:	11 f0       	breq	.+4      	; 0x13aa <EEPROM_writeByte+0x46>
		return ERROR;
    13a6:	1c 82       	std	Y+4, r1	; 0x04
    13a8:	16 c0       	rjmp	.+44     	; 0x13d6 <EEPROM_writeByte+0x72>
	}
	/*sending the first 8-bits in the location address*/
	TWI_writeByte((uint8)(address));
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the location address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
    13b0:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    13b4:	88 32       	cpi	r24, 0x28	; 40
    13b6:	11 f0       	breq	.+4      	; 0x13bc <EEPROM_writeByte+0x58>
		return ERROR;
    13b8:	1c 82       	std	Y+4, r1	; 0x04
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <EEPROM_writeByte+0x72>
	}
	/*sending the data in the location address*/
	TWI_writeByte(data);
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the data and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
    13c2:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    13c6:	88 32       	cpi	r24, 0x28	; 40
    13c8:	11 f0       	breq	.+4      	; 0x13ce <EEPROM_writeByte+0x6a>
		return ERROR;
    13ca:	1c 82       	std	Y+4, r1	; 0x04
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <EEPROM_writeByte+0x72>
	}
	TWI_stop();
    13ce:	0e 94 e7 10 	call	0x21ce	; 0x21ce <TWI_stop>
	/*return success operation */
	return SUCCESS;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	8c 83       	std	Y+4, r24	; 0x04
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 address,uint8 *data){
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <EEPROM_readByte+0x6>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <EEPROM_readByte+0x8>
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	7c 83       	std	Y+4, r23	; 0x04
    13fa:	6b 83       	std	Y+3, r22	; 0x03
	/* First : we send the start bit
	 * */
	TWI_start();
    13fc:	0e 94 d7 10 	call	0x21ae	; 0x21ae <TWI_start>
	/*Check of sending the start bit*/
	if(TWI_getStatus() != TWI_START){
    1400:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    1404:	88 30       	cpi	r24, 0x08	; 8
    1406:	11 f0       	breq	.+4      	; 0x140c <EEPROM_readByte+0x26>
		return ERROR;
    1408:	1d 82       	std	Y+5, r1	; 0x05
    140a:	44 c0       	rjmp	.+136    	; 0x1494 <EEPROM_readByte+0xae>
	}
	/* In the device address, we need to send the last 3-bits of the location which we want to write in
	 * */
	TWI_writeByte((uint8)((((address & 0x0700)>>7) | 0xA0 )));
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	80 70       	andi	r24, 0x00	; 0
    1412:	97 70       	andi	r25, 0x07	; 7
    1414:	88 0f       	add	r24, r24
    1416:	89 2f       	mov	r24, r25
    1418:	88 1f       	adc	r24, r24
    141a:	99 0b       	sbc	r25, r25
    141c:	91 95       	neg	r25
    141e:	80 6a       	ori	r24, 0xA0	; 160
    1420:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the slave address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK){
    1424:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    1428:	88 31       	cpi	r24, 0x18	; 24
    142a:	11 f0       	breq	.+4      	; 0x1430 <EEPROM_readByte+0x4a>
		return ERROR;
    142c:	1d 82       	std	Y+5, r1	; 0x05
    142e:	32 c0       	rjmp	.+100    	; 0x1494 <EEPROM_readByte+0xae>
	}
	/*sending the first 8-bits in the location address*/
	TWI_writeByte((uint8)(address));
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the location address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
    1436:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    143a:	88 32       	cpi	r24, 0x28	; 40
    143c:	11 f0       	breq	.+4      	; 0x1442 <EEPROM_readByte+0x5c>
		return ERROR;
    143e:	1d 82       	std	Y+5, r1	; 0x05
    1440:	29 c0       	rjmp	.+82     	; 0x1494 <EEPROM_readByte+0xae>
	}
	/*Sending the repeated start bit*/
	TWI_start();
    1442:	0e 94 d7 10 	call	0x21ae	; 0x21ae <TWI_start>
	if(TWI_getStatus() != TWI_REPEATED_START){
    1446:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    144a:	80 31       	cpi	r24, 0x10	; 16
    144c:	11 f0       	breq	.+4      	; 0x1452 <EEPROM_readByte+0x6c>
		return ERROR;
    144e:	1d 82       	std	Y+5, r1	; 0x05
    1450:	21 c0       	rjmp	.+66     	; 0x1494 <EEPROM_readByte+0xae>
	}
	/*Here, we need to send read control bit so we will make or operation with 1*/
	TWI_writeByte((uint8)((((address & 0x0700)>>7) | 0xA0 | 1 )));
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	80 70       	andi	r24, 0x00	; 0
    1458:	97 70       	andi	r25, 0x07	; 7
    145a:	88 0f       	add	r24, r24
    145c:	89 2f       	mov	r24, r25
    145e:	88 1f       	adc	r24, r24
    1460:	99 0b       	sbc	r25, r25
    1462:	91 95       	neg	r25
    1464:	81 6a       	ori	r24, 0xA1	; 161
    1466:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the slave address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_R_ACK){
    146a:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    146e:	80 34       	cpi	r24, 0x40	; 64
    1470:	11 f0       	breq	.+4      	; 0x1476 <EEPROM_readByte+0x90>
		return ERROR;
    1472:	1d 82       	std	Y+5, r1	; 0x05
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <EEPROM_readByte+0xae>
	}
	/*reading the byte*/
	*data=TWI_readByteWithNACK();
    1476:	0e 94 1c 11 	call	0x2238	; 0x2238 <TWI_readByteWithNACK>
    147a:	eb 81       	ldd	r30, Y+3	; 0x03
    147c:	fc 81       	ldd	r31, Y+4	; 0x04
    147e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK){
    1480:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    1484:	88 35       	cpi	r24, 0x58	; 88
    1486:	11 f0       	breq	.+4      	; 0x148c <EEPROM_readByte+0xa6>
        return ERROR;
    1488:	1d 82       	std	Y+5, r1	; 0x05
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <EEPROM_readByte+0xae>
       }
    TWI_stop();
    148c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <TWI_stop>
	return SUCCESS;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <EEPROM_writeArray>:


uint8 EEPROM_writeArray(uint16 address,uint8 *data,uint8 length){
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	27 97       	sbiw	r28, 0x07	; 7
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	9b 83       	std	Y+3, r25	; 0x03
    14bc:	8a 83       	std	Y+2, r24	; 0x02
    14be:	7d 83       	std	Y+5, r23	; 0x05
    14c0:	6c 83       	std	Y+4, r22	; 0x04
    14c2:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i=0;
    14c4:	19 82       	std	Y+1, r1	; 0x01
	/* First : we send the start bit
		 * */
	TWI_start();
    14c6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <TWI_start>
	/*Check of sending the start bit*/
	if(TWI_getStatus() != TWI_START){
    14ca:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    14ce:	88 30       	cpi	r24, 0x08	; 8
    14d0:	11 f0       	breq	.+4      	; 0x14d6 <EEPROM_writeArray+0x30>
		return ERROR;
    14d2:	1f 82       	std	Y+7, r1	; 0x07
    14d4:	39 c0       	rjmp	.+114    	; 0x1548 <EEPROM_writeArray+0xa2>
	}
	/* In the device address, we need to send the last 3-bits of the location which we want to write in
	 * */
	TWI_writeByte((uint8)((((address & 0x0700)>>7) | 0xA0 )));
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	9b 81       	ldd	r25, Y+3	; 0x03
    14da:	80 70       	andi	r24, 0x00	; 0
    14dc:	97 70       	andi	r25, 0x07	; 7
    14de:	88 0f       	add	r24, r24
    14e0:	89 2f       	mov	r24, r25
    14e2:	88 1f       	adc	r24, r24
    14e4:	99 0b       	sbc	r25, r25
    14e6:	91 95       	neg	r25
    14e8:	80 6a       	ori	r24, 0xA0	; 160
    14ea:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the slave address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK){
    14ee:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    14f2:	88 31       	cpi	r24, 0x18	; 24
    14f4:	11 f0       	breq	.+4      	; 0x14fa <EEPROM_writeArray+0x54>
		return ERROR;
    14f6:	1f 82       	std	Y+7, r1	; 0x07
    14f8:	27 c0       	rjmp	.+78     	; 0x1548 <EEPROM_writeArray+0xa2>
	}
	/*sending the first 8-bits in the location address*/
	TWI_writeByte((uint8)(address));
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the location address and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
    1500:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    1504:	88 32       	cpi	r24, 0x28	; 40
    1506:	11 f0       	breq	.+4      	; 0x150c <EEPROM_writeArray+0x66>
		return ERROR;
    1508:	1f 82       	std	Y+7, r1	; 0x07
    150a:	1e c0       	rjmp	.+60     	; 0x1548 <EEPROM_writeArray+0xa2>
	}
	/* For loop to the length of the array to write in the memmory
	 * */
	for(i=0;i<length;i++){
    150c:	19 82       	std	Y+1, r1	; 0x01
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <EEPROM_writeArray+0x92>
	/*sending the data in the location address*/
	TWI_writeByte(data[i]);
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	9d 81       	ldd	r25, Y+5	; 0x05
    151a:	fc 01       	movw	r30, r24
    151c:	e2 0f       	add	r30, r18
    151e:	f3 1f       	adc	r31, r19
    1520:	80 81       	ld	r24, Z
    1522:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
	/*Check of sending the data and responded with ACK*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
    1526:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    152a:	88 32       	cpi	r24, 0x28	; 40
    152c:	11 f0       	breq	.+4      	; 0x1532 <EEPROM_writeArray+0x8c>
		return ERROR;
    152e:	1f 82       	std	Y+7, r1	; 0x07
    1530:	0b c0       	rjmp	.+22     	; 0x1548 <EEPROM_writeArray+0xa2>
	if(TWI_getStatus() != TWI_MT_DATA_ACK){
		return ERROR;
	}
	/* For loop to the length of the array to write in the memmory
	 * */
	for(i=0;i<length;i++){
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	99 81       	ldd	r25, Y+1	; 0x01
    153a:	8e 81       	ldd	r24, Y+6	; 0x06
    153c:	98 17       	cp	r25, r24
    153e:	40 f3       	brcs	.-48     	; 0x1510 <EEPROM_writeArray+0x6a>
		return ERROR;
	}

	}
	/*sending the stop bit*/
	TWI_stop();
    1540:	0e 94 e7 10 	call	0x21ce	; 0x21ce <TWI_stop>
	return SUCCESS;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	8f 83       	std	Y+7, r24	; 0x07
    1548:	8f 81       	ldd	r24, Y+7	; 0x07
}
    154a:	27 96       	adiw	r28, 0x07	; 7
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <EEPROM_readArray>:



uint8 EEPROM_readArray(uint16 address,uint8 *data,uint8 length){
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	27 97       	sbiw	r28, 0x07	; 7
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	7d 83       	std	Y+5, r23	; 0x05
    157a:	6c 83       	std	Y+4, r22	; 0x04
    157c:	4e 83       	std	Y+6, r20	; 0x06
	    uint8 i=0;
    157e:	19 82       	std	Y+1, r1	; 0x01
		/* First : we send the start bit
			 * */
		TWI_start();
    1580:	0e 94 d7 10 	call	0x21ae	; 0x21ae <TWI_start>
		/*Check of sending the start bit*/
		if(TWI_getStatus() != TWI_START){
    1584:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    1588:	88 30       	cpi	r24, 0x08	; 8
    158a:	11 f0       	breq	.+4      	; 0x1590 <EEPROM_readArray+0x34>
			return ERROR;
    158c:	1f 82       	std	Y+7, r1	; 0x07
    158e:	6c c0       	rjmp	.+216    	; 0x1668 <EEPROM_readArray+0x10c>
		}
		/* In the device address, we need to send the last 3-bits of the location which we want to write in
		 * */
		TWI_writeByte((uint8)((((address & 0x0700)>>7) | 0xA0 )));
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	9b 81       	ldd	r25, Y+3	; 0x03
    1594:	80 70       	andi	r24, 0x00	; 0
    1596:	97 70       	andi	r25, 0x07	; 7
    1598:	88 0f       	add	r24, r24
    159a:	89 2f       	mov	r24, r25
    159c:	88 1f       	adc	r24, r24
    159e:	99 0b       	sbc	r25, r25
    15a0:	91 95       	neg	r25
    15a2:	80 6a       	ori	r24, 0xA0	; 160
    15a4:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
		/*Check of sending the slave address and responded with ACK*/
		if(TWI_getStatus() != TWI_MT_SLA_W_ACK){
    15a8:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    15ac:	88 31       	cpi	r24, 0x18	; 24
    15ae:	11 f0       	breq	.+4      	; 0x15b4 <EEPROM_readArray+0x58>
			return ERROR;
    15b0:	1f 82       	std	Y+7, r1	; 0x07
    15b2:	5a c0       	rjmp	.+180    	; 0x1668 <EEPROM_readArray+0x10c>
		}
		/*sending the first 8-bits in the location address*/
		TWI_writeByte((uint8)(address));
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
		if(TWI_getStatus() != TWI_MT_DATA_ACK){
    15ba:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    15be:	88 32       	cpi	r24, 0x28	; 40
    15c0:	11 f0       	breq	.+4      	; 0x15c6 <EEPROM_readArray+0x6a>
			return ERROR;
    15c2:	1f 82       	std	Y+7, r1	; 0x07
    15c4:	51 c0       	rjmp	.+162    	; 0x1668 <EEPROM_readArray+0x10c>
		}
		/*sending another start bit to change the control bit from write to read because we want to read*/
		TWI_start();
    15c6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <TWI_start>
		if(TWI_getStatus() != TWI_REPEATED_START){
    15ca:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    15ce:	80 31       	cpi	r24, 0x10	; 16
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <EEPROM_readArray+0x7a>
			return ERROR;
    15d2:	1f 82       	std	Y+7, r1	; 0x07
    15d4:	49 c0       	rjmp	.+146    	; 0x1668 <EEPROM_readArray+0x10c>
		}
		/*Here, we need to send read control bit so we will make or operation with 1*/
		TWI_writeByte((uint8)((((address & 0x0700)>>7) | 0xA0 | 1 )));
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	9b 81       	ldd	r25, Y+3	; 0x03
    15da:	80 70       	andi	r24, 0x00	; 0
    15dc:	97 70       	andi	r25, 0x07	; 7
    15de:	88 0f       	add	r24, r24
    15e0:	89 2f       	mov	r24, r25
    15e2:	88 1f       	adc	r24, r24
    15e4:	99 0b       	sbc	r25, r25
    15e6:	91 95       	neg	r25
    15e8:	81 6a       	ori	r24, 0xA1	; 161
    15ea:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <TWI_writeByte>
		/*Check of sending the slave address and responded with ACK*/
		if(TWI_getStatus() != TWI_MT_SLA_R_ACK){
    15ee:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    15f2:	80 34       	cpi	r24, 0x40	; 64
    15f4:	11 f0       	breq	.+4      	; 0x15fa <EEPROM_readArray+0x9e>
			return ERROR;
    15f6:	1f 82       	std	Y+7, r1	; 0x07
    15f8:	37 c0       	rjmp	.+110    	; 0x1668 <EEPROM_readArray+0x10c>
		}
		for(i=0;i<length-1;i++){
    15fa:	19 82       	std	Y+1, r1	; 0x01
    15fc:	15 c0       	rjmp	.+42     	; 0x1628 <EEPROM_readArray+0xcc>

		data[i]=TWI_readByteWithACK();
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	8c 01       	movw	r16, r24
    160a:	02 0f       	add	r16, r18
    160c:	13 1f       	adc	r17, r19
    160e:	0e 94 09 11 	call	0x2212	; 0x2212 <TWI_readByteWithACK>
    1612:	f8 01       	movw	r30, r16
    1614:	80 83       	st	Z, r24
		if (TWI_getStatus() != TWI_MR_DATA_ACK){
    1616:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    161a:	80 35       	cpi	r24, 0x50	; 80
    161c:	11 f0       	breq	.+4      	; 0x1622 <EEPROM_readArray+0xc6>
		      return ERROR;
    161e:	1f 82       	std	Y+7, r1	; 0x07
    1620:	23 c0       	rjmp	.+70     	; 0x1668 <EEPROM_readArray+0x10c>
		TWI_writeByte((uint8)((((address & 0x0700)>>7) | 0xA0 | 1 )));
		/*Check of sending the slave address and responded with ACK*/
		if(TWI_getStatus() != TWI_MT_SLA_R_ACK){
			return ERROR;
		}
		for(i=0;i<length-1;i++){
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8e 81       	ldd	r24, Y+6	; 0x06
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	28 17       	cp	r18, r24
    1638:	39 07       	cpc	r19, r25
    163a:	0c f3       	brlt	.-62     	; 0x15fe <EEPROM_readArray+0xa2>
		if (TWI_getStatus() != TWI_MR_DATA_ACK){
		      return ERROR;
		   }

		}
		data[i]=TWI_readByteWithNACK();
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	8c 01       	movw	r16, r24
    1648:	02 0f       	add	r16, r18
    164a:	13 1f       	adc	r17, r19
    164c:	0e 94 1c 11 	call	0x2238	; 0x2238 <TWI_readByteWithNACK>
    1650:	f8 01       	movw	r30, r16
    1652:	80 83       	st	Z, r24
		if (TWI_getStatus() != TWI_MR_DATA_NACK){
    1654:	0e 94 2f 11 	call	0x225e	; 0x225e <TWI_getStatus>
    1658:	88 35       	cpi	r24, 0x58	; 88
    165a:	11 f0       	breq	.+4      	; 0x1660 <EEPROM_readArray+0x104>
	      return ERROR;
    165c:	1f 82       	std	Y+7, r1	; 0x07
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <EEPROM_readArray+0x10c>
		   }

		TWI_stop();
    1660:	0e 94 e7 10 	call	0x21ce	; 0x21ce <TWI_stop>
		return SUCCESS;
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	ff 83       	std	Y+7, r31	; 0x07
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
}
    166a:	27 96       	adiw	r28, 0x07	; 7
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	08 95       	ret

00001680 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction){
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <GPIO_setupPinDirection+0x6>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <GPIO_setupPinDirection+0x8>
    1688:	0f 92       	push	r0
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	6a 83       	std	Y+2, r22	; 0x02
    1692:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num >= NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS_PER_PORT) ){
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	84 30       	cpi	r24, 0x04	; 4
    1698:	08 f0       	brcs	.+2      	; 0x169c <GPIO_setupPinDirection+0x1c>
    169a:	d5 c0       	rjmp	.+426    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <GPIO_setupPinDirection+0x24>
    16a2:	d1 c0       	rjmp	.+418    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
		/* do nothing */
	}
	else {
		/* Setup the pin direction as required */
		switch (port_num){
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3d 83       	std	Y+5, r19	; 0x05
    16ac:	2c 83       	std	Y+4, r18	; 0x04
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	9d 81       	ldd	r25, Y+5	; 0x05
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <GPIO_setupPinDirection+0x3a>
    16b8:	43 c0       	rjmp	.+134    	; 0x1740 <GPIO_setupPinDirection+0xc0>
    16ba:	2c 81       	ldd	r18, Y+4	; 0x04
    16bc:	3d 81       	ldd	r19, Y+5	; 0x05
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	2c f4       	brge	.+10     	; 0x16ce <GPIO_setupPinDirection+0x4e>
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	71 f0       	breq	.+28     	; 0x16e8 <GPIO_setupPinDirection+0x68>
    16cc:	bc c0       	rjmp	.+376    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
    16ce:	2c 81       	ldd	r18, Y+4	; 0x04
    16d0:	3d 81       	ldd	r19, Y+5	; 0x05
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <GPIO_setupPinDirection+0x5a>
    16d8:	5f c0       	rjmp	.+190    	; 0x1798 <GPIO_setupPinDirection+0x118>
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	91 05       	cpc	r25, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <GPIO_setupPinDirection+0x66>
    16e4:	85 c0       	rjmp	.+266    	; 0x17f0 <GPIO_setupPinDirection+0x170>
    16e6:	af c0       	rjmp	.+350    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction == PIN_OUTPUT){
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	a1 f4       	brne	.+40     	; 0x1716 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    16ee:	aa e3       	ldi	r26, 0x3A	; 58
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ea e3       	ldi	r30, 0x3A	; 58
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <GPIO_setupPinDirection+0x8c>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <GPIO_setupPinDirection+0x88>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	98 c0       	rjmp	.+304    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
    1716:	aa e3       	ldi	r26, 0x3A	; 58
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ea e3       	ldi	r30, 0x3A	; 58
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_setupPinDirection+0xb4>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_setupPinDirection+0xb0>
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	83 c0       	rjmp	.+262    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT){
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	a1 f4       	brne	.+40     	; 0x176e <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);}
    1746:	a7 e3       	ldi	r26, 0x37	; 55
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e7 e3       	ldi	r30, 0x37	; 55
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <GPIO_setupPinDirection+0xe4>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <GPIO_setupPinDirection+0xe0>
    1768:	84 2b       	or	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	6c c0       	rjmp	.+216    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
			else{
				CLEAR_BIT(DDRB,pin_num);
    176e:	a7 e3       	ldi	r26, 0x37	; 55
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e7 e3       	ldi	r30, 0x37	; 55
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_setupPinDirection+0x10c>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_setupPinDirection+0x108>
    1790:	80 95       	com	r24
    1792:	84 23       	and	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	57 c0       	rjmp	.+174    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT){
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	a1 f4       	brne	.+40     	; 0x17c6 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);}
    179e:	a4 e3       	ldi	r26, 0x34	; 52
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e4 e3       	ldi	r30, 0x34	; 52
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <GPIO_setupPinDirection+0x13c>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <GPIO_setupPinDirection+0x138>
    17c0:	84 2b       	or	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	40 c0       	rjmp	.+128    	; 0x1846 <GPIO_setupPinDirection+0x1c6>
			else{
				CLEAR_BIT(DDRC,pin_num);
    17c6:	a4 e3       	ldi	r26, 0x34	; 52
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e4 e3       	ldi	r30, 0x34	; 52
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_setupPinDirection+0x164>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_setupPinDirection+0x160>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	2b c0       	rjmp	.+86     	; 0x1846 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT){
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	a1 f4       	brne	.+40     	; 0x181e <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);}
    17f6:	a1 e3       	ldi	r26, 0x31	; 49
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e3       	ldi	r30, 0x31	; 49
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	48 2f       	mov	r20, r24
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 2e       	mov	r0, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <GPIO_setupPinDirection+0x194>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	0a 94       	dec	r0
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <GPIO_setupPinDirection+0x190>
    1818:	84 2b       	or	r24, r20
    181a:	8c 93       	st	X, r24
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <GPIO_setupPinDirection+0x1c6>
			else{
				CLEAR_BIT(DDRD,pin_num);
    181e:	a1 e3       	ldi	r26, 0x31	; 49
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e1 e3       	ldi	r30, 0x31	; 49
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GPIO_setupPinDirection+0x1bc>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <GPIO_setupPinDirection+0x1b8>
    1840:	80 95       	com	r24
    1842:	84 23       	and	r24, r20
    1844:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction){
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <GPIO_setupPortDirection+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <GPIO_setupPortDirection+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS){
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	84 30       	cpi	r24, 0x04	; 4
    186a:	90 f5       	brcc	.+100    	; 0x18d0 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	}
	else{
		/* Setup the port direction as required */
		switch(port_num){
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3c 83       	std	Y+4, r19	; 0x04
    1874:	2b 83       	std	Y+3, r18	; 0x03
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	91 05       	cpc	r25, r1
    187e:	d1 f0       	breq	.+52     	; 0x18b4 <GPIO_setupPortDirection+0x5e>
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	3c 81       	ldd	r19, Y+4	; 0x04
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	2c f4       	brge	.+10     	; 0x1894 <GPIO_setupPortDirection+0x3e>
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	61 f0       	breq	.+24     	; 0x18aa <GPIO_setupPortDirection+0x54>
    1892:	1e c0       	rjmp	.+60     	; 0x18d0 <GPIO_setupPortDirection+0x7a>
    1894:	2b 81       	ldd	r18, Y+3	; 0x03
    1896:	3c 81       	ldd	r19, Y+4	; 0x04
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	81 f0       	breq	.+32     	; 0x18be <GPIO_setupPortDirection+0x68>
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	81 f0       	breq	.+32     	; 0x18c8 <GPIO_setupPortDirection+0x72>
    18a8:	13 c0       	rjmp	.+38     	; 0x18d0 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA=direction;
    18aa:	ea e3       	ldi	r30, 0x3A	; 58
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	80 83       	st	Z, r24
    18b2:	0e c0       	rjmp	.+28     	; 0x18d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB=direction;
    18b4:	e7 e3       	ldi	r30, 0x37	; 55
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	80 83       	st	Z, r24
    18bc:	09 c0       	rjmp	.+18     	; 0x18d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC=direction;
    18be:	e4 e3       	ldi	r30, 0x34	; 52
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	80 83       	st	Z, r24
    18c6:	04 c0       	rjmp	.+8      	; 0x18d0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD=direction;
    18c8:	e1 e3       	ldi	r30, 0x31	; 49
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	80 83       	st	Z, r24
			break;
		}
	}
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value){
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <GPIO_writePin+0x6>
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <GPIO_writePin+0x8>
    18e6:	0f 92       	push	r0
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	6a 83       	std	Y+2, r22	; 0x02
    18f0:	4b 83       	std	Y+3, r20	; 0x03
	if( (port_num >= NUM_OF_PORTS ) || (pin_num >= NUM_OF_PINS_PER_PORT) ){
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	84 30       	cpi	r24, 0x04	; 4
    18f6:	08 f0       	brcs	.+2      	; 0x18fa <GPIO_writePin+0x1c>
    18f8:	d5 c0       	rjmp	.+426    	; 0x1aa4 <GPIO_writePin+0x1c6>
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	88 30       	cpi	r24, 0x08	; 8
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <GPIO_writePin+0x24>
    1900:	d1 c0       	rjmp	.+418    	; 0x1aa4 <GPIO_writePin+0x1c6>
		/* do nothing */
	}
	else{
		switch (port_num){
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	3d 83       	std	Y+5, r19	; 0x05
    190a:	2c 83       	std	Y+4, r18	; 0x04
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	81 30       	cpi	r24, 0x01	; 1
    1912:	91 05       	cpc	r25, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <GPIO_writePin+0x3a>
    1916:	43 c0       	rjmp	.+134    	; 0x199e <GPIO_writePin+0xc0>
    1918:	2c 81       	ldd	r18, Y+4	; 0x04
    191a:	3d 81       	ldd	r19, Y+5	; 0x05
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	2c f4       	brge	.+10     	; 0x192c <GPIO_writePin+0x4e>
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	71 f0       	breq	.+28     	; 0x1946 <GPIO_writePin+0x68>
    192a:	bc c0       	rjmp	.+376    	; 0x1aa4 <GPIO_writePin+0x1c6>
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <GPIO_writePin+0x5a>
    1936:	5f c0       	rjmp	.+190    	; 0x19f6 <GPIO_writePin+0x118>
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	9d 81       	ldd	r25, Y+5	; 0x05
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	91 05       	cpc	r25, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <GPIO_writePin+0x66>
    1942:	85 c0       	rjmp	.+266    	; 0x1a4e <GPIO_writePin+0x170>
    1944:	af c0       	rjmp	.+350    	; 0x1aa4 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_HIGH){
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	a1 f4       	brne	.+40     	; 0x1974 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);}
    194c:	ab e3       	ldi	r26, 0x3B	; 59
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	eb e3       	ldi	r30, 0x3B	; 59
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <GPIO_writePin+0x8c>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <GPIO_writePin+0x88>
    196e:	84 2b       	or	r24, r20
    1970:	8c 93       	st	X, r24
    1972:	98 c0       	rjmp	.+304    	; 0x1aa4 <GPIO_writePin+0x1c6>
			else{
				CLEAR_BIT(PORTA,pin_num);
    1974:	ab e3       	ldi	r26, 0x3B	; 59
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	eb e3       	ldi	r30, 0x3B	; 59
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_writePin+0xb4>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_writePin+0xb0>
    1996:	80 95       	com	r24
    1998:	84 23       	and	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	83 c0       	rjmp	.+262    	; 0x1aa4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH){
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	a1 f4       	brne	.+40     	; 0x19cc <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);}
    19a4:	a8 e3       	ldi	r26, 0x38	; 56
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e8 e3       	ldi	r30, 0x38	; 56
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <GPIO_writePin+0xe4>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <GPIO_writePin+0xe0>
    19c6:	84 2b       	or	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	6c c0       	rjmp	.+216    	; 0x1aa4 <GPIO_writePin+0x1c6>
			else{
				CLEAR_BIT(PORTB,pin_num);
    19cc:	a8 e3       	ldi	r26, 0x38	; 56
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e8 e3       	ldi	r30, 0x38	; 56
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <GPIO_writePin+0x10c>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <GPIO_writePin+0x108>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	57 c0       	rjmp	.+174    	; 0x1aa4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH){
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	a1 f4       	brne	.+40     	; 0x1a24 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);}
    19fc:	a5 e3       	ldi	r26, 0x35	; 53
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e5 e3       	ldi	r30, 0x35	; 53
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_writePin+0x13c>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_writePin+0x138>
    1a1e:	84 2b       	or	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	40 c0       	rjmp	.+128    	; 0x1aa4 <GPIO_writePin+0x1c6>
			else{
				CLEAR_BIT(PORTC,pin_num);
    1a24:	a5 e3       	ldi	r26, 0x35	; 53
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e5 e3       	ldi	r30, 0x35	; 53
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <GPIO_writePin+0x164>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <GPIO_writePin+0x160>
    1a46:	80 95       	com	r24
    1a48:	84 23       	and	r24, r20
    1a4a:	8c 93       	st	X, r24
    1a4c:	2b c0       	rjmp	.+86     	; 0x1aa4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH){
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);}
    1a54:	a2 e3       	ldi	r26, 0x32	; 50
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e2 e3       	ldi	r30, 0x32	; 50
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_writePin+0x194>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_writePin+0x190>
    1a76:	84 2b       	or	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <GPIO_writePin+0x1c6>
			else{
				CLEAR_BIT(PORTD,pin_num);
    1a7c:	a2 e3       	ldi	r26, 0x32	; 50
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e2 e3       	ldi	r30, 0x32	; 50
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_writePin+0x1bc>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_writePin+0x1b8>
    1a9e:	80 95       	com	r24
    1aa0:	84 23       	and	r24, r20
    1aa2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num,uint8 value){
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <GPIO_writePort+0x6>
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <GPIO_writePort+0x8>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	90 f5       	brcc	.+100    	; 0x1b2e <GPIO_writePort+0x7a>
		/*do nothing*/
	}
	else{
		switch(port_num){
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	3c 83       	std	Y+4, r19	; 0x04
    1ad2:	2b 83       	std	Y+3, r18	; 0x03
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	91 05       	cpc	r25, r1
    1adc:	d1 f0       	breq	.+52     	; 0x1b12 <GPIO_writePort+0x5e>
    1ade:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae2:	22 30       	cpi	r18, 0x02	; 2
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <GPIO_writePort+0x3e>
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	61 f0       	breq	.+24     	; 0x1b08 <GPIO_writePort+0x54>
    1af0:	1e c0       	rjmp	.+60     	; 0x1b2e <GPIO_writePort+0x7a>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	81 f0       	breq	.+32     	; 0x1b1c <GPIO_writePort+0x68>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	83 30       	cpi	r24, 0x03	; 3
    1b02:	91 05       	cpc	r25, r1
    1b04:	81 f0       	breq	.+32     	; 0x1b26 <GPIO_writePort+0x72>
    1b06:	13 c0       	rjmp	.+38     	; 0x1b2e <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA=value;
    1b08:	eb e3       	ldi	r30, 0x3B	; 59
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	80 83       	st	Z, r24
    1b10:	0e c0       	rjmp	.+28     	; 0x1b2e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	80 83       	st	Z, r24
    1b1a:	09 c0       	rjmp	.+18     	; 0x1b2e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1b1c:	e5 e3       	ldi	r30, 0x35	; 53
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	80 83       	st	Z, r24
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1b26:	e2 e3       	ldi	r30, 0x32	; 50
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num){
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <GPIO_readPin+0x6>
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <GPIO_readPin+0x8>
    1b44:	0f 92       	push	r0
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	8a 83       	std	Y+2, r24	; 0x02
    1b4c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	if( (port_num>=NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS_PER_PORT) ){
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	18 f4       	brcc	.+6      	; 0x1b5a <GPIO_readPin+0x1e>
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 30       	cpi	r24, 0x08	; 8
    1b58:	10 f0       	brcs	.+4      	; 0x1b5e <GPIO_readPin+0x22>
		value=LOGIC_LOW; /* return logic low*/
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    1b5c:	80 c0       	rjmp	.+256    	; 0x1c5e <GPIO_readPin+0x122>
	}
	else{
		switch (port_num){
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3d 83       	std	Y+5, r19	; 0x05
    1b66:	2c 83       	std	Y+4, r18	; 0x04
    1b68:	4c 81       	ldd	r20, Y+4	; 0x04
    1b6a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b6c:	41 30       	cpi	r20, 0x01	; 1
    1b6e:	51 05       	cpc	r21, r1
    1b70:	79 f1       	breq	.+94     	; 0x1bd0 <GPIO_readPin+0x94>
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
    1b74:	9d 81       	ldd	r25, Y+5	; 0x05
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	91 05       	cpc	r25, r1
    1b7a:	34 f4       	brge	.+12     	; 0x1b88 <GPIO_readPin+0x4c>
    1b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b80:	21 15       	cp	r18, r1
    1b82:	31 05       	cpc	r19, r1
    1b84:	69 f0       	breq	.+26     	; 0x1ba0 <GPIO_readPin+0x64>
    1b86:	6b c0       	rjmp	.+214    	; 0x1c5e <GPIO_readPin+0x122>
    1b88:	4c 81       	ldd	r20, Y+4	; 0x04
    1b8a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b8c:	42 30       	cpi	r20, 0x02	; 2
    1b8e:	51 05       	cpc	r21, r1
    1b90:	b9 f1       	breq	.+110    	; 0x1c00 <GPIO_readPin+0xc4>
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <GPIO_readPin+0x62>
    1b9c:	49 c0       	rjmp	.+146    	; 0x1c30 <GPIO_readPin+0xf4>
    1b9e:	5f c0       	rjmp	.+190    	; 0x1c5e <GPIO_readPin+0x122>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    1ba0:	e9 e3       	ldi	r30, 0x39	; 57
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a9 01       	movw	r20, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <GPIO_readPin+0x7c>
    1bb4:	55 95       	asr	r21
    1bb6:	47 95       	ror	r20
    1bb8:	8a 95       	dec	r24
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <GPIO_readPin+0x78>
    1bbc:	ca 01       	movw	r24, r20
    1bbe:	81 70       	andi	r24, 0x01	; 1
    1bc0:	90 70       	andi	r25, 0x00	; 0
    1bc2:	88 23       	and	r24, r24
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <GPIO_readPin+0x90>
				value=LOGIC_HIGH;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	49 c0       	rjmp	.+146    	; 0x1c5e <GPIO_readPin+0x122>
			}
			else{
				value=LOGIC_LOW;
    1bcc:	19 82       	std	Y+1, r1	; 0x01
    1bce:	47 c0       	rjmp	.+142    	; 0x1c5e <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    1bd0:	e6 e3       	ldi	r30, 0x36	; 54
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <GPIO_readPin+0xac>
    1be4:	55 95       	asr	r21
    1be6:	47 95       	ror	r20
    1be8:	8a 95       	dec	r24
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <GPIO_readPin+0xa8>
    1bec:	ca 01       	movw	r24, r20
    1bee:	81 70       	andi	r24, 0x01	; 1
    1bf0:	90 70       	andi	r25, 0x00	; 0
    1bf2:	88 23       	and	r24, r24
    1bf4:	19 f0       	breq	.+6      	; 0x1bfc <GPIO_readPin+0xc0>
				value=LOGIC_HIGH;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	31 c0       	rjmp	.+98     	; 0x1c5e <GPIO_readPin+0x122>
			}
			else{
				value=LOGIC_LOW;
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	2f c0       	rjmp	.+94     	; 0x1c5e <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    1c00:	e3 e3       	ldi	r30, 0x33	; 51
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a9 01       	movw	r20, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_readPin+0xdc>
    1c14:	55 95       	asr	r21
    1c16:	47 95       	ror	r20
    1c18:	8a 95       	dec	r24
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_readPin+0xd8>
    1c1c:	ca 01       	movw	r24, r20
    1c1e:	81 70       	andi	r24, 0x01	; 1
    1c20:	90 70       	andi	r25, 0x00	; 0
    1c22:	88 23       	and	r24, r24
    1c24:	19 f0       	breq	.+6      	; 0x1c2c <GPIO_readPin+0xf0>
				value=LOGIC_HIGH;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	19 c0       	rjmp	.+50     	; 0x1c5e <GPIO_readPin+0x122>
			}
			else{
				value=LOGIC_LOW;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	17 c0       	rjmp	.+46     	; 0x1c5e <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    1c30:	e0 e3       	ldi	r30, 0x30	; 48
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a9 01       	movw	r20, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <GPIO_readPin+0x10c>
    1c44:	55 95       	asr	r21
    1c46:	47 95       	ror	r20
    1c48:	8a 95       	dec	r24
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <GPIO_readPin+0x108>
    1c4c:	ca 01       	movw	r24, r20
    1c4e:	81 70       	andi	r24, 0x01	; 1
    1c50:	90 70       	andi	r25, 0x00	; 0
    1c52:	88 23       	and	r24, r24
    1c54:	19 f0       	breq	.+6      	; 0x1c5c <GPIO_readPin+0x120>
				value=LOGIC_HIGH;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <GPIO_readPin+0x122>
			}
			else{
				value=LOGIC_LOW;
    1c5c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <GPIO_readPort+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <GPIO_readPort+0x8>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if(port_num >= NUM_OF_PORTS){
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	84 30       	cpi	r24, 0x04	; 4
    1c82:	10 f0       	brcs	.+4      	; 0x1c88 <GPIO_readPort+0x18>
		value = LOGIC_LOW;
    1c84:	19 82       	std	Y+1, r1	; 0x01
    1c86:	32 c0       	rjmp	.+100    	; 0x1cec <GPIO_readPort+0x7c>
	}
	else{
		switch(port_num){
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3c 83       	std	Y+4, r19	; 0x04
    1c90:	2b 83       	std	Y+3, r18	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	d1 f0       	breq	.+52     	; 0x1cd0 <GPIO_readPort+0x60>
    1c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <GPIO_readPort+0x40>
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <GPIO_readPort+0x56>
    1cae:	1e c0       	rjmp	.+60     	; 0x1cec <GPIO_readPort+0x7c>
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	81 f0       	breq	.+32     	; 0x1cda <GPIO_readPort+0x6a>
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	83 30       	cpi	r24, 0x03	; 3
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	81 f0       	breq	.+32     	; 0x1ce4 <GPIO_readPort+0x74>
    1cc4:	13 c0       	rjmp	.+38     	; 0x1cec <GPIO_readPort+0x7c>
		case PORTA_ID:
			value=PINA;
    1cc6:	e9 e3       	ldi	r30, 0x39	; 57
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	0e c0       	rjmp	.+28     	; 0x1cec <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			value=PINB;
    1cd0:	e6 e3       	ldi	r30, 0x36	; 54
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			value=PINC;
    1cda:	e3 e3       	ldi	r30, 0x33	; 51
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			value=PIND;
    1ce4:	e0 e3       	ldi	r30, 0x30	; 48
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <PWM_Timer0_Start>:
#include"std_types.h"
/*
 * F_CPU = 1 Mhz
 * F_TIMER = F_CPU / (256*8) = 488.28125 = 500 Hz
 * */
void PWM_Timer0_Start(uint8 duty_cycle){
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	0f 92       	push	r0
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	DDRB|=(1<<3); /*To make the oc0 pin an output pin*/
    1d0c:	a7 e3       	ldi	r26, 0x37	; 55
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e7 e3       	ldi	r30, 0x37	; 55
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	88 60       	ori	r24, 0x08	; 8
    1d18:	8c 93       	st	X, r24
	TCNT0=0; // clear the timer register
    1d1a:	e2 e5       	ldi	r30, 0x52	; 82
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	10 82       	st	Z, r1
	 * with casting :
	 * same example :
	 *   --> 50 will be 50.0 and that's a float number when we divide it by 100 , it will be 0.5 not 0.0
	 *       and that's what we need .. and then we made casting back to the uint8
	 * */
	OCR0=(uint8)(((float32)duty_cycle/100)*255);
    1d20:	0c e5       	ldi	r16, 0x5C	; 92
    1d22:	10 e0       	ldi	r17, 0x00	; 0
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e0       	ldi	r26, 0x00	; 0
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	bc 01       	movw	r22, r24
    1d3c:	cd 01       	movw	r24, r26
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	48 ec       	ldi	r20, 0xC8	; 200
    1d44:	52 e4       	ldi	r21, 0x42	; 66
    1d46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	53 e4       	ldi	r21, 0x43	; 67
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 83       	st	Z, r24
	TCCR0=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS01)|(1<<CS00);
    1d72:	e3 e5       	ldi	r30, 0x53	; 83
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	8b e6       	ldi	r24, 0x6B	; 107
    1d78:	80 83       	st	Z, r24


}
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <__vector_9>:

static volatile void (*g_timer0CallBackPtr)(void)=NULL_PTR;
static volatile void (*g_timer1CallBackPtr)(void)=NULL_PTR;


ISR(TIMER0_OVF_vect){
    1d86:	1f 92       	push	r1
    1d88:	0f 92       	push	r0
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	0f 92       	push	r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	2f 93       	push	r18
    1d92:	3f 93       	push	r19
    1d94:	4f 93       	push	r20
    1d96:	5f 93       	push	r21
    1d98:	6f 93       	push	r22
    1d9a:	7f 93       	push	r23
    1d9c:	8f 93       	push	r24
    1d9e:	9f 93       	push	r25
    1da0:	af 93       	push	r26
    1da2:	bf 93       	push	r27
    1da4:	ef 93       	push	r30
    1da6:	ff 93       	push	r31
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    1db0:	80 91 86 01 	lds	r24, 0x0186
    1db4:	90 91 87 01 	lds	r25, 0x0187
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	29 f0       	breq	.+10     	; 0x1dc6 <__vector_9+0x40>
		(*g_timer0CallBackPtr)();
    1dbc:	e0 91 86 01 	lds	r30, 0x0186
    1dc0:	f0 91 87 01 	lds	r31, 0x0187
    1dc4:	09 95       	icall
	}
}
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	ff 91       	pop	r31
    1dcc:	ef 91       	pop	r30
    1dce:	bf 91       	pop	r27
    1dd0:	af 91       	pop	r26
    1dd2:	9f 91       	pop	r25
    1dd4:	8f 91       	pop	r24
    1dd6:	7f 91       	pop	r23
    1dd8:	6f 91       	pop	r22
    1dda:	5f 91       	pop	r21
    1ddc:	4f 91       	pop	r20
    1dde:	3f 91       	pop	r19
    1de0:	2f 91       	pop	r18
    1de2:	0f 90       	pop	r0
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	0f 90       	pop	r0
    1de8:	1f 90       	pop	r1
    1dea:	18 95       	reti

00001dec <__vector_19>:

ISR(TIMER0_COMP_vect){
    1dec:	1f 92       	push	r1
    1dee:	0f 92       	push	r0
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	0f 92       	push	r0
    1df4:	11 24       	eor	r1, r1
    1df6:	2f 93       	push	r18
    1df8:	3f 93       	push	r19
    1dfa:	4f 93       	push	r20
    1dfc:	5f 93       	push	r21
    1dfe:	6f 93       	push	r22
    1e00:	7f 93       	push	r23
    1e02:	8f 93       	push	r24
    1e04:	9f 93       	push	r25
    1e06:	af 93       	push	r26
    1e08:	bf 93       	push	r27
    1e0a:	ef 93       	push	r30
    1e0c:	ff 93       	push	r31
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    1e16:	80 91 86 01 	lds	r24, 0x0186
    1e1a:	90 91 87 01 	lds	r25, 0x0187
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	29 f0       	breq	.+10     	; 0x1e2c <__vector_19+0x40>
		(*g_timer0CallBackPtr)();
    1e22:	e0 91 86 01 	lds	r30, 0x0186
    1e26:	f0 91 87 01 	lds	r31, 0x0187
    1e2a:	09 95       	icall
	}
}
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	ff 91       	pop	r31
    1e32:	ef 91       	pop	r30
    1e34:	bf 91       	pop	r27
    1e36:	af 91       	pop	r26
    1e38:	9f 91       	pop	r25
    1e3a:	8f 91       	pop	r24
    1e3c:	7f 91       	pop	r23
    1e3e:	6f 91       	pop	r22
    1e40:	5f 91       	pop	r21
    1e42:	4f 91       	pop	r20
    1e44:	3f 91       	pop	r19
    1e46:	2f 91       	pop	r18
    1e48:	0f 90       	pop	r0
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	0f 90       	pop	r0
    1e4e:	1f 90       	pop	r1
    1e50:	18 95       	reti

00001e52 <__vector_8>:

ISR(TIMER1_OVF_vect){
    1e52:	1f 92       	push	r1
    1e54:	0f 92       	push	r0
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	0f 92       	push	r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	2f 93       	push	r18
    1e5e:	3f 93       	push	r19
    1e60:	4f 93       	push	r20
    1e62:	5f 93       	push	r21
    1e64:	6f 93       	push	r22
    1e66:	7f 93       	push	r23
    1e68:	8f 93       	push	r24
    1e6a:	9f 93       	push	r25
    1e6c:	af 93       	push	r26
    1e6e:	bf 93       	push	r27
    1e70:	ef 93       	push	r30
    1e72:	ff 93       	push	r31
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    1e7c:	80 91 88 01 	lds	r24, 0x0188
    1e80:	90 91 89 01 	lds	r25, 0x0189
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	29 f0       	breq	.+10     	; 0x1e92 <__vector_8+0x40>
		(*g_timer1CallBackPtr)();
    1e88:	e0 91 88 01 	lds	r30, 0x0188
    1e8c:	f0 91 89 01 	lds	r31, 0x0189
    1e90:	09 95       	icall
	}
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	ff 91       	pop	r31
    1e98:	ef 91       	pop	r30
    1e9a:	bf 91       	pop	r27
    1e9c:	af 91       	pop	r26
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	7f 91       	pop	r23
    1ea4:	6f 91       	pop	r22
    1ea6:	5f 91       	pop	r21
    1ea8:	4f 91       	pop	r20
    1eaa:	3f 91       	pop	r19
    1eac:	2f 91       	pop	r18
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti

00001eb8 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	2f 93       	push	r18
    1ec4:	3f 93       	push	r19
    1ec6:	4f 93       	push	r20
    1ec8:	5f 93       	push	r21
    1eca:	6f 93       	push	r22
    1ecc:	7f 93       	push	r23
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	af 93       	push	r26
    1ed4:	bf 93       	push	r27
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    1ee2:	80 91 88 01 	lds	r24, 0x0188
    1ee6:	90 91 89 01 	lds	r25, 0x0189
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	29 f0       	breq	.+10     	; 0x1ef8 <__vector_6+0x40>
		(*g_timer1CallBackPtr)();
    1eee:	e0 91 88 01 	lds	r30, 0x0188
    1ef2:	f0 91 89 01 	lds	r31, 0x0189
    1ef6:	09 95       	icall
	}
}
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <TIMER_init>:


void TIMER_init(const TIMER_configType *Config_Ptr){
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <TIMER_init+0x6>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	/*In case of timer0*/
	if(Config_Ptr->timer_id == TIMER0){
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	80 81       	ld	r24, Z
    1f32:	88 23       	and	r24, r24
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <TIMER_init+0x1a>
    1f36:	4b c0       	rjmp	.+150    	; 0x1fce <TIMER_init+0xb0>
		TCCR0 = (1<<FOC0);
    1f38:	e3 e5       	ldi	r30, 0x53	; 83
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 e8       	ldi	r24, 0x80	; 128
    1f3e:	80 83       	st	Z, r24
		/*if normal mode : WGM00=0 , WGM01=0
		 *if compare mode : WGM00=0 , WGM01=1
		 * */
		TCCR0 = (TCCR0 & 0xB7) | (Config_Ptr->mode<<2);
    1f40:	a3 e5       	ldi	r26, 0x53	; 83
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e3 e5       	ldi	r30, 0x53	; 83
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	27 7b       	andi	r18, 0xB7	; 183
    1f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f50:	fa 81       	ldd	r31, Y+2	; 0x02
    1f52:	81 81       	ldd	r24, Z+1	; 0x01
    1f54:	88 2f       	mov	r24, r24
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	82 2b       	or	r24, r18
    1f62:	8c 93       	st	X, r24
		/* The next line is to adjust the prescaler
		 * */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    1f64:	a3 e5       	ldi	r26, 0x53	; 83
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e3 e5       	ldi	r30, 0x53	; 83
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	98 2f       	mov	r25, r24
    1f70:	98 7f       	andi	r25, 0xF8	; 248
    1f72:	e9 81       	ldd	r30, Y+1	; 0x01
    1f74:	fa 81       	ldd	r31, Y+2	; 0x02
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	89 2b       	or	r24, r25
    1f7a:	8c 93       	st	X, r24
		/*The below line is for initial value of the timer register */
		TCNT0 = (uint8)(Config_Ptr->timerStartValue);
    1f7c:	a2 e5       	ldi	r26, 0x52	; 82
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e9 81       	ldd	r30, Y+1	; 0x01
    1f82:	fa 81       	ldd	r31, Y+2	; 0x02
    1f84:	83 81       	ldd	r24, Z+3	; 0x03
    1f86:	94 81       	ldd	r25, Z+4	; 0x04
    1f88:	8c 93       	st	X, r24
		/*Enabling the interrupt of overflow and compare mode in order to execute the ISR code*/
		if(Config_Ptr->mode == NORMAL_MODE){
    1f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8e:	81 81       	ldd	r24, Z+1	; 0x01
    1f90:	88 23       	and	r24, r24
    1f92:	41 f4       	brne	.+16     	; 0x1fa4 <TIMER_init+0x86>
			TIMSK |=(1<<TOIE0);
    1f94:	a9 e5       	ldi	r26, 0x59	; 89
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e9 e5       	ldi	r30, 0x59	; 89
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	81 60       	ori	r24, 0x01	; 1
    1fa0:	8c 93       	st	X, r24
    1fa2:	69 c0       	rjmp	.+210    	; 0x2076 <TIMER_init+0x158>
		}
		else if(Config_Ptr->mode == COMPARE_MODE){
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	81 81       	ldd	r24, Z+1	; 0x01
    1faa:	82 30       	cpi	r24, 0x02	; 2
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <TIMER_init+0x92>
    1fae:	63 c0       	rjmp	.+198    	; 0x2076 <TIMER_init+0x158>
			OCR0  = (uint8)(Config_Ptr->compareValue);
    1fb0:	ac e5       	ldi	r26, 0x5C	; 92
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	85 81       	ldd	r24, Z+5	; 0x05
    1fba:	96 81       	ldd	r25, Z+6	; 0x06
    1fbc:	8c 93       	st	X, r24
			TIMSK |=(1<<OCIE0);
    1fbe:	a9 e5       	ldi	r26, 0x59	; 89
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e9 e5       	ldi	r30, 0x59	; 89
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	82 60       	ori	r24, 0x02	; 2
    1fca:	8c 93       	st	X, r24
    1fcc:	54 c0       	rjmp	.+168    	; 0x2076 <TIMER_init+0x158>
		}
	}
	/*In case of timer1*/
	else if(Config_Ptr->timer_id == TIMER1){
    1fce:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd2:	80 81       	ld	r24, Z
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <TIMER_init+0xbc>
    1fd8:	4e c0       	rjmp	.+156    	; 0x2076 <TIMER_init+0x158>
		/*The below line is for initial value of the timer register */
		TCNT1  = Config_Ptr->timerStartValue;
    1fda:	ac e4       	ldi	r26, 0x4C	; 76
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe2:	83 81       	ldd	r24, Z+3	; 0x03
    1fe4:	94 81       	ldd	r25, Z+4	; 0x04
    1fe6:	11 96       	adiw	r26, 0x01	; 1
    1fe8:	9c 93       	st	X, r25
    1fea:	8e 93       	st	-X, r24

		TCCR1A = (1<<FOC1A);
    1fec:	ef e4       	ldi	r30, 0x4F	; 79
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	88 e0       	ldi	r24, 0x08	; 8
    1ff2:	80 83       	st	Z, r24
		TCCR1B=0;
    1ff4:	ee e4       	ldi	r30, 0x4E	; 78
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	10 82       	st	Z, r1

		TCCR1B = (TCCR1B & 0xE7) | (Config_Ptr->mode<<1);
    1ffa:	ae e4       	ldi	r26, 0x4E	; 78
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	ee e4       	ldi	r30, 0x4E	; 78
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	28 2f       	mov	r18, r24
    2006:	27 7e       	andi	r18, 0xE7	; 231
    2008:	e9 81       	ldd	r30, Y+1	; 0x01
    200a:	fa 81       	ldd	r31, Y+2	; 0x02
    200c:	81 81       	ldd	r24, Z+1	; 0x01
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	82 2b       	or	r24, r18
    2018:	8c 93       	st	X, r24
		/* The next line is to adjust the prescaler
		 * */
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    201a:	ae e4       	ldi	r26, 0x4E	; 78
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	ee e4       	ldi	r30, 0x4E	; 78
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	98 2f       	mov	r25, r24
    2026:	98 7f       	andi	r25, 0xF8	; 248
    2028:	e9 81       	ldd	r30, Y+1	; 0x01
    202a:	fa 81       	ldd	r31, Y+2	; 0x02
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	89 2b       	or	r24, r25
    2030:	8c 93       	st	X, r24
		/*Enabling the interrupt of overflow and compare mode in order to execute the ISR code*/
		if(Config_Ptr->mode == NORMAL_MODE){
    2032:	e9 81       	ldd	r30, Y+1	; 0x01
    2034:	fa 81       	ldd	r31, Y+2	; 0x02
    2036:	81 81       	ldd	r24, Z+1	; 0x01
    2038:	88 23       	and	r24, r24
    203a:	41 f4       	brne	.+16     	; 0x204c <TIMER_init+0x12e>
			TIMSK |=(1<<TOIE1);
    203c:	a9 e5       	ldi	r26, 0x59	; 89
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e9 e5       	ldi	r30, 0x59	; 89
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	84 60       	ori	r24, 0x04	; 4
    2048:	8c 93       	st	X, r24
    204a:	15 c0       	rjmp	.+42     	; 0x2076 <TIMER_init+0x158>
		}
		else if(Config_Ptr->mode == COMPARE_MODE_TIMER1){
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	81 81       	ldd	r24, Z+1	; 0x01
    2052:	84 30       	cpi	r24, 0x04	; 4
    2054:	81 f4       	brne	.+32     	; 0x2076 <TIMER_init+0x158>
			/* To adjust the compare value */
			OCR1A  = Config_Ptr->compareValue;
    2056:	aa e4       	ldi	r26, 0x4A	; 74
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e9 81       	ldd	r30, Y+1	; 0x01
    205c:	fa 81       	ldd	r31, Y+2	; 0x02
    205e:	85 81       	ldd	r24, Z+5	; 0x05
    2060:	96 81       	ldd	r25, Z+6	; 0x06
    2062:	11 96       	adiw	r26, 0x01	; 1
    2064:	9c 93       	st	X, r25
    2066:	8e 93       	st	-X, r24
			TIMSK |=(1<<OCIE1A);
    2068:	a9 e5       	ldi	r26, 0x59	; 89
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e9 e5       	ldi	r30, 0x59	; 89
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 61       	ori	r24, 0x10	; 16
    2074:	8c 93       	st	X, r24
		}
	}
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <TIMER0_setCallBack>:


void TIMER0_setCallBack(void (*a_ptr)(void)){
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <TIMER0_setCallBack+0x6>
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
	g_timer0CallBackPtr=a_ptr;
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	90 93 87 01 	sts	0x0187, r25
    2096:	80 93 86 01 	sts	0x0186, r24
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <TIMER1_setCallBack>:

void TIMER1_setCallBack(void (*a_ptr)(void)){
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <TIMER1_setCallBack+0x6>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackPtr=a_ptr;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	90 93 89 01 	sts	0x0189, r25
    20ba:	80 93 88 01 	sts	0x0188, r24
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <TIMER_DeInit>:

void TIMER_DeInit(TIMER_ID timer_id){
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	0f 92       	push	r0
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	89 83       	std	Y+1, r24	; 0x01
	/*In case of timer0*/
	if(timer_id == TIMER0){
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	88 23       	and	r24, r24
    20d8:	89 f4       	brne	.+34     	; 0x20fc <TIMER_DeInit+0x34>
	    TCCR0=0;
    20da:	e3 e5       	ldi	r30, 0x53	; 83
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	10 82       	st	Z, r1
	    TCNT0=0;
    20e0:	e2 e5       	ldi	r30, 0x52	; 82
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	10 82       	st	Z, r1
	    OCR0=0;
    20e6:	ec e5       	ldi	r30, 0x5C	; 92
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	10 82       	st	Z, r1
	    /*disable the interrupt module of timer0*/
	    TIMSK &=~(1<<TOIE0) &~(1<<OCIE0);
    20ec:	a9 e5       	ldi	r26, 0x59	; 89
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e9 e5       	ldi	r30, 0x59	; 89
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8c 7f       	andi	r24, 0xFC	; 252
    20f8:	8c 93       	st	X, r24
    20fa:	18 c0       	rjmp	.+48     	; 0x212c <TIMER_DeInit+0x64>
	}
	/*In case of timer1*/
	else if(timer_id == TIMER1){
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	a9 f4       	brne	.+42     	; 0x212c <TIMER_DeInit+0x64>
	    TCCR1A=0;
    2102:	ef e4       	ldi	r30, 0x4F	; 79
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	10 82       	st	Z, r1
	    TCCR1B=0;
    2108:	ee e4       	ldi	r30, 0x4E	; 78
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	10 82       	st	Z, r1
	    TCNT1=0;
    210e:	ec e4       	ldi	r30, 0x4C	; 76
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	11 82       	std	Z+1, r1	; 0x01
    2114:	10 82       	st	Z, r1
	    OCR1A=0;
    2116:	ea e4       	ldi	r30, 0x4A	; 74
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	11 82       	std	Z+1, r1	; 0x01
    211c:	10 82       	st	Z, r1
	    /*disable the interrupt module of timer1*/
	    TIMSK &=~(1<<TOIE1) &~(1<<OCIE1A);
    211e:	a9 e5       	ldi	r26, 0x59	; 89
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e9 e5       	ldi	r30, 0x59	; 89
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	8b 7e       	andi	r24, 0xEB	; 235
    212a:	8c 93       	st	X, r24
	}
}
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <TWI_init>:
#include"twi.h"
#include"gpio.h"
#include<avr/io.h>
#include"common_macros.h"

void TWI_init(TWI_configType *Config_Ptr){
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <TWI_init+0xa>
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
	/*Choosing a prescaler of 1*/
	TWSR = 0x00;
    2146:	e1 e2       	ldi	r30, 0x21	; 33
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	10 82       	st	Z, r1
	 /*  --> normal mode (100)
	 *  --> fast mode   (400)
	 * */
	TWBR=((F_CPU/(Config_Ptr->mode))-16)/2;
    214c:	00 e2       	ldi	r16, 0x20	; 32
    214e:	10 e0       	ldi	r17, 0x00	; 0
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	20 81       	ld	r18, Z
    2156:	31 81       	ldd	r19, Z+1	; 0x01
    2158:	42 81       	ldd	r20, Z+2	; 0x02
    215a:	53 81       	ldd	r21, Z+3	; 0x03
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	92 e1       	ldi	r25, 0x12	; 18
    2160:	aa e7       	ldi	r26, 0x7A	; 122
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 07 12 	call	0x240e	; 0x240e <__udivmodsi4>
    216c:	da 01       	movw	r26, r20
    216e:	c9 01       	movw	r24, r18
    2170:	40 97       	sbiw	r24, 0x10	; 16
    2172:	a1 09       	sbc	r26, r1
    2174:	b1 09       	sbc	r27, r1
    2176:	b6 95       	lsr	r27
    2178:	a7 95       	ror	r26
    217a:	97 95       	ror	r25
    217c:	87 95       	ror	r24
    217e:	f8 01       	movw	r30, r16
    2180:	80 83       	st	Z, r24
	TWBR=2;
    2182:	e0 e2       	ldi	r30, 0x20	; 32
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	82 e0       	ldi	r24, 0x02	; 2
    2188:	80 83       	st	Z, r24
	/*fit the address given by the structure in the TWAR*/
	TWAR=((Config_Ptr->address)<<1);
    218a:	a2 e2       	ldi	r26, 0x22	; 34
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e9 81       	ldd	r30, Y+1	; 0x01
    2190:	fa 81       	ldd	r31, Y+2	; 0x02
    2192:	84 81       	ldd	r24, Z+4	; 0x04
    2194:	88 0f       	add	r24, r24
    2196:	8c 93       	st	X, r24
	/*Enabling the two wire interface */
	TWCR = (1<<TWEN);
    2198:	e6 e5       	ldi	r30, 0x56	; 86
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	84 e0       	ldi	r24, 0x04	; 4
    219e:	80 83       	st	Z, r24
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	08 95       	ret

000021ae <TWI_start>:


void TWI_start(){
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
	/* (1<<TWSTA) ---> To send the start bit, TWSTA must be 1
	 * (1<<TWEN)  ---> to save the enable bit value because we don't make an oring operation
	 * (1<<TWINT) ---> to clear the flag before sending the start bit to check for the next time
	 * */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    21b6:	e6 e5       	ldi	r30, 0x56	; 86
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	84 ea       	ldi	r24, 0xA4	; 164
    21bc:	80 83       	st	Z, r24
	/*Polling till the start bit is sent*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    21be:	e6 e5       	ldi	r30, 0x56	; 86
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	88 23       	and	r24, r24
    21c6:	dc f7       	brge	.-10     	; 0x21be <TWI_start+0x10>
}
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <TWI_stop>:


void TWI_stop(){
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	/* (1<<TWSTO) ---> To send the stop bit, TWSTO must be 1
	 * (1<<TWEN)  ---> to save the enable bit value because we don't make an oring operation
	 * (1<<TWINT) ---> to clear the flag before sending the start bit to check for the next time
	 * */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    21d6:	e6 e5       	ldi	r30, 0x56	; 86
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	84 e9       	ldi	r24, 0x94	; 148
    21dc:	80 83       	st	Z, r24

}
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <TWI_writeByte>:


void TWI_writeByte(uint8 data){
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
	/*Put the data we want to send in the two wire data register*/
	TWDR=data;
    21f0:	e3 e2       	ldi	r30, 0x23	; 35
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	80 83       	st	Z, r24
	/* (1<<TWEN)  ---> to save the enable bit value because we don't make an oring operation
	 * (1<<TWINT) ---> to clear the flag before sending the start bit to check for the next time
	 * */
	TWCR = (1 << TWINT) | (1 << TWEN);
    21f8:	e6 e5       	ldi	r30, 0x56	; 86
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	84 e8       	ldi	r24, 0x84	; 132
    21fe:	80 83       	st	Z, r24
	/*Polling until the data is sent by checking on the flag*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2200:	e6 e5       	ldi	r30, 0x56	; 86
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	88 23       	and	r24, r24
    2208:	dc f7       	brge	.-10     	; 0x2200 <TWI_writeByte+0x1c>
}
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(){
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	/* (1<<TWEN)  ---> to save the enable bit value because we don't make an oring operation
	 * (1<<TWINT) ---> to clear the flag before sending the start bit to check for the next time
	 * (1<<TWEA)  ---> to enable the ACK bit
	 * */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    221a:	e6 e5       	ldi	r30, 0x56	; 86
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	84 ec       	ldi	r24, 0xC4	; 196
    2220:	80 83       	st	Z, r24
	/*Polling until the data is read by checking on the flag*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2222:	e6 e5       	ldi	r30, 0x56	; 86
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 23       	and	r24, r24
    222a:	dc f7       	brge	.-10     	; 0x2222 <TWI_readByteWithACK+0x10>
	/*return the two wire data register value*/
	return TWDR;
    222c:	e3 e2       	ldi	r30, 0x23	; 35
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
}
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(){
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
	/* (1<<TWEN)  ---> to save the enable bit value because we don't make an oring operation
	 * (1<<TWINT) ---> to clear the flag before sending the start bit to check for the next time
	 * */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2240:	e6 e5       	ldi	r30, 0x56	; 86
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	84 e8       	ldi	r24, 0x84	; 132
    2246:	80 83       	st	Z, r24
	/*Polling until the data is read by checking on the flag*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2248:	e6 e5       	ldi	r30, 0x56	; 86
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	88 23       	and	r24, r24
    2250:	dc f7       	brge	.-10     	; 0x2248 <TWI_readByteWithNACK+0x10>
	/*return the two wire data register value*/
	return TWDR;
    2252:	e3 e2       	ldi	r30, 0x23	; 35
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
}
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <TWI_getStatus>:


uint8 TWI_getStatus(){
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	/* Return the status of the last 5-bit in the TWSR register
	 * */
	return (TWSR & 0xF8);
    2266:	e1 e2       	ldi	r30, 0x21	; 33
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	88 7f       	andi	r24, 0xF8	; 248
}
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <UART_init>:

#include"uart.h"
#include"avr/io.h"
#include"common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr){
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <UART_init+0x6>
    227a:	00 d0       	rcall	.+0      	; 0x227c <UART_init+0x8>
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
	/*Variable for calculating the UBRR value*/
	uint16 ubrrValue;

	UCSRA = (1<<U2X);
    2284:	eb e2       	ldi	r30, 0x2B	; 43
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	80 83       	st	Z, r24
	/*
	 * To enbale the transmitter and receiver*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    228c:	ea e2       	ldi	r30, 0x2A	; 42
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	88 e1       	ldi	r24, 0x18	; 24
    2292:	80 83       	st	Z, r24
	/* URSEL must be 1 to write in the UCSRC register
	 * */
	UCSRC = (1<<URSEL) | ( (Config_Ptr->parity) <<4) | ( (Config_Ptr->stopBit) <<3) | ((Config_Ptr->dataBits) <<1);
    2294:	a0 e4       	ldi	r26, 0x40	; 64
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	eb 81       	ldd	r30, Y+3	; 0x03
    229a:	fc 81       	ldd	r31, Y+4	; 0x04
    229c:	80 81       	ld	r24, Z
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	82 95       	swap	r24
    22a4:	92 95       	swap	r25
    22a6:	90 7f       	andi	r25, 0xF0	; 240
    22a8:	98 27       	eor	r25, r24
    22aa:	80 7f       	andi	r24, 0xF0	; 240
    22ac:	98 27       	eor	r25, r24
    22ae:	28 2f       	mov	r18, r24
    22b0:	20 68       	ori	r18, 0x80	; 128
    22b2:	eb 81       	ldd	r30, Y+3	; 0x03
    22b4:	fc 81       	ldd	r31, Y+4	; 0x04
    22b6:	81 81       	ldd	r24, Z+1	; 0x01
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	28 2b       	or	r18, r24
    22ca:	eb 81       	ldd	r30, Y+3	; 0x03
    22cc:	fc 81       	ldd	r31, Y+4	; 0x04
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	82 2b       	or	r24, r18
    22da:	8c 93       	st	X, r24
	/*To calculate the ubrr value based on the baud rate given in the structure*/
	ubrrValue =(uint16)((F_CPU/( ( Config_Ptr->baudRate ) *8 ))-1);
    22dc:	eb 81       	ldd	r30, Y+3	; 0x03
    22de:	fc 81       	ldd	r31, Y+4	; 0x04
    22e0:	83 81       	ldd	r24, Z+3	; 0x03
    22e2:	94 81       	ldd	r25, Z+4	; 0x04
    22e4:	a5 81       	ldd	r26, Z+5	; 0x05
    22e6:	b6 81       	ldd	r27, Z+6	; 0x06
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	aa 1f       	adc	r26, r26
    22ee:	bb 1f       	adc	r27, r27
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	aa 1f       	adc	r26, r26
    22f6:	bb 1f       	adc	r27, r27
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	aa 1f       	adc	r26, r26
    22fe:	bb 1f       	adc	r27, r27
    2300:	9c 01       	movw	r18, r24
    2302:	ad 01       	movw	r20, r26
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	92 e1       	ldi	r25, 0x12	; 18
    2308:	aa e7       	ldi	r26, 0x7A	; 122
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 07 12 	call	0x240e	; 0x240e <__udivmodsi4>
    2314:	da 01       	movw	r26, r20
    2316:	c9 01       	movw	r24, r18
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	9a 83       	std	Y+2, r25	; 0x02
    231c:	89 83       	std	Y+1, r24	; 0x01
	/*put the first eight bits in the UBRRL*/
	UBRRL=ubrrValue;
    231e:	e9 e2       	ldi	r30, 0x29	; 41
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	80 83       	st	Z, r24
	/*to put the next 4 bits of the ubbrValue we need to shift right by 8*/
	UBRRH=ubrrValue>>8;
    2326:	e0 e4       	ldi	r30, 0x40	; 64
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	89 2f       	mov	r24, r25
    2330:	99 27       	eor	r25, r25
    2332:	80 83       	st	Z, r24
}
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <UART_sendByte>:


void UART_sendByte(uint8 data){
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	89 83       	std	Y+1, r24	; 0x01
	/*if the UDRE flag is 0 that's mean that the sending process is not finished yet
	  */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    234e:	eb e2       	ldi	r30, 0x2B	; 43
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	80 72       	andi	r24, 0x20	; 32
    235a:	90 70       	andi	r25, 0x00	; 0
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	b9 f3       	breq	.-18     	; 0x234e <UART_sendByte+0xc>
	/*if the while loop is false that's mean UDR is empty so we will put the data
	 * in the UDR register*/
	UDR=data;
    2360:	ec e2       	ldi	r30, 0x2C	; 44
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	80 83       	st	Z, r24
}
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <UART_receiveByte>:


uint8 UART_receiveByte(){
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
	/*The RXC flag will be 1 when the receiving process is completed */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2378:	eb e2       	ldi	r30, 0x2B	; 43
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	88 23       	and	r24, r24
    2380:	dc f7       	brge	.-10     	; 0x2378 <UART_receiveByte+0x8>
	/*returning the UDR value if the flag is 1 and clear the flag in this
	 * instruction too*/
	return UDR;
    2382:	ec e2       	ldi	r30, 0x2C	; 44
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
}
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <UART_sendString>:

void UART_sendString(uint8 *string){
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	00 d0       	rcall	.+0      	; 0x2394 <UART_sendString+0x6>
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	0a c0       	rjmp	.+20     	; 0x23b2 <UART_sendString+0x24>
	/*while till u find the null character*/
	while(*string != '\0'){
		/*sending the first byte*/
		UART_sendByte(*string);
    239e:	e9 81       	ldd	r30, Y+1	; 0x01
    23a0:	fa 81       	ldd	r31, Y+2	; 0x02
    23a2:	80 81       	ld	r24, Z
    23a4:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_sendByte>
		/*increment the pointer to the next byte location*/
		string++;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(uint8 *string){
	/*while till u find the null character*/
	while(*string != '\0'){
    23b2:	e9 81       	ldd	r30, Y+1	; 0x01
    23b4:	fa 81       	ldd	r31, Y+2	; 0x02
    23b6:	80 81       	ld	r24, Z
    23b8:	88 23       	and	r24, r24
    23ba:	89 f7       	brne	.-30     	; 0x239e <UART_sendString+0x10>
		/*sending the first byte*/
		UART_sendByte(*string);
		/*increment the pointer to the next byte location*/
		string++;
	}
}
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <UART_receiveString>:

void UART_receiveString(uint8 *string){
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <UART_receiveString+0x6>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
	/*receiving the first byte and then check if byte is equal to the special character */
	*string = UART_receiveByte();
    23d4:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
    23d8:	e9 81       	ldd	r30, Y+1	; 0x01
    23da:	fa 81       	ldd	r31, Y+2	; 0x02
    23dc:	80 83       	st	Z, r24
    23de:	0a c0       	rjmp	.+20     	; 0x23f4 <UART_receiveString+0x2e>
	while(*string != '#'){
		/*increment the pointer to the next byte location to put the next byte in the next location*/
		string++;
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
		/*receive the next byte and put it in the next location of the string */
		*string = UART_receiveByte();
    23ea:	0e 94 b8 11 	call	0x2370	; 0x2370 <UART_receiveByte>
    23ee:	e9 81       	ldd	r30, Y+1	; 0x01
    23f0:	fa 81       	ldd	r31, Y+2	; 0x02
    23f2:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *string){
	/*receiving the first byte and then check if byte is equal to the special character */
	*string = UART_receiveByte();
	while(*string != '#'){
    23f4:	e9 81       	ldd	r30, Y+1	; 0x01
    23f6:	fa 81       	ldd	r31, Y+2	; 0x02
    23f8:	80 81       	ld	r24, Z
    23fa:	83 32       	cpi	r24, 0x23	; 35
    23fc:	89 f7       	brne	.-30     	; 0x23e0 <UART_receiveString+0x1a>
		/*increment the pointer to the next byte location to put the next byte in the next location*/
		string++;
		/*receive the next byte and put it in the next location of the string */
		*string = UART_receiveByte();
	}
	*string='\0';
    23fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2400:	fa 81       	ldd	r31, Y+2	; 0x02
    2402:	10 82       	st	Z, r1
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <__udivmodsi4>:
    240e:	a1 e2       	ldi	r26, 0x21	; 33
    2410:	1a 2e       	mov	r1, r26
    2412:	aa 1b       	sub	r26, r26
    2414:	bb 1b       	sub	r27, r27
    2416:	fd 01       	movw	r30, r26
    2418:	0d c0       	rjmp	.+26     	; 0x2434 <__udivmodsi4_ep>

0000241a <__udivmodsi4_loop>:
    241a:	aa 1f       	adc	r26, r26
    241c:	bb 1f       	adc	r27, r27
    241e:	ee 1f       	adc	r30, r30
    2420:	ff 1f       	adc	r31, r31
    2422:	a2 17       	cp	r26, r18
    2424:	b3 07       	cpc	r27, r19
    2426:	e4 07       	cpc	r30, r20
    2428:	f5 07       	cpc	r31, r21
    242a:	20 f0       	brcs	.+8      	; 0x2434 <__udivmodsi4_ep>
    242c:	a2 1b       	sub	r26, r18
    242e:	b3 0b       	sbc	r27, r19
    2430:	e4 0b       	sbc	r30, r20
    2432:	f5 0b       	sbc	r31, r21

00002434 <__udivmodsi4_ep>:
    2434:	66 1f       	adc	r22, r22
    2436:	77 1f       	adc	r23, r23
    2438:	88 1f       	adc	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	1a 94       	dec	r1
    243e:	69 f7       	brne	.-38     	; 0x241a <__udivmodsi4_loop>
    2440:	60 95       	com	r22
    2442:	70 95       	com	r23
    2444:	80 95       	com	r24
    2446:	90 95       	com	r25
    2448:	9b 01       	movw	r18, r22
    244a:	ac 01       	movw	r20, r24
    244c:	bd 01       	movw	r22, r26
    244e:	cf 01       	movw	r24, r30
    2450:	08 95       	ret

00002452 <__prologue_saves__>:
    2452:	2f 92       	push	r2
    2454:	3f 92       	push	r3
    2456:	4f 92       	push	r4
    2458:	5f 92       	push	r5
    245a:	6f 92       	push	r6
    245c:	7f 92       	push	r7
    245e:	8f 92       	push	r8
    2460:	9f 92       	push	r9
    2462:	af 92       	push	r10
    2464:	bf 92       	push	r11
    2466:	cf 92       	push	r12
    2468:	df 92       	push	r13
    246a:	ef 92       	push	r14
    246c:	ff 92       	push	r15
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	ca 1b       	sub	r28, r26
    247c:	db 0b       	sbc	r29, r27
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	09 94       	ijmp

0000248a <__epilogue_restores__>:
    248a:	2a 88       	ldd	r2, Y+18	; 0x12
    248c:	39 88       	ldd	r3, Y+17	; 0x11
    248e:	48 88       	ldd	r4, Y+16	; 0x10
    2490:	5f 84       	ldd	r5, Y+15	; 0x0f
    2492:	6e 84       	ldd	r6, Y+14	; 0x0e
    2494:	7d 84       	ldd	r7, Y+13	; 0x0d
    2496:	8c 84       	ldd	r8, Y+12	; 0x0c
    2498:	9b 84       	ldd	r9, Y+11	; 0x0b
    249a:	aa 84       	ldd	r10, Y+10	; 0x0a
    249c:	b9 84       	ldd	r11, Y+9	; 0x09
    249e:	c8 84       	ldd	r12, Y+8	; 0x08
    24a0:	df 80       	ldd	r13, Y+7	; 0x07
    24a2:	ee 80       	ldd	r14, Y+6	; 0x06
    24a4:	fd 80       	ldd	r15, Y+5	; 0x05
    24a6:	0c 81       	ldd	r16, Y+4	; 0x04
    24a8:	1b 81       	ldd	r17, Y+3	; 0x03
    24aa:	aa 81       	ldd	r26, Y+2	; 0x02
    24ac:	b9 81       	ldd	r27, Y+1	; 0x01
    24ae:	ce 0f       	add	r28, r30
    24b0:	d1 1d       	adc	r29, r1
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	ed 01       	movw	r28, r26
    24be:	08 95       	ret

000024c0 <_exit>:
    24c0:	f8 94       	cli

000024c2 <__stop_program>:
    24c2:	ff cf       	rjmp	.-2      	; 0x24c2 <__stop_program>
