
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000188  00800060  00003352  000033e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001e8  008001e8  0000356e  2**0
                  ALLOC
  3 .stab         00002e38  00000000  00000000  00003570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001323  00000000  00000000  000063a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000076cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000780b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000797b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000095c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a4af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b25c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b649  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__vector_8>
      24:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3e       	cpi	r26, 0xEE	; 238
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a6 0c 	call	0x194c	; 0x194c <main>
      8a:	0c 94 a7 19 	jmp	0x334e	; 0x334e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ec       	ldi	r26, 0xCA	; 202
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 47 19 	jmp	0x328e	; 0x328e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a ec       	ldi	r24, 0xCA	; 202
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 47 19 	jmp	0x328e	; 0x328e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num >= NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS_PER_PORT) ){
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* do nothing */
	}
	else {
		/* Setup the pin direction as required */
		switch (port_num){
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction == PIN_OUTPUT){
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT){
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);}
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			else{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT){
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);}
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			else{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT){
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);}
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			else{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_setupPortDirection+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_setupPortDirection+0x8>
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS){
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	90 f5       	brcc	.+100    	; 0xd96 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	}
	else{
		/* Setup the port direction as required */
		switch(port_num){
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3c 83       	std	Y+4, r19	; 0x04
     d3a:	2b 83       	std	Y+3, r18	; 0x03
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	9c 81       	ldd	r25, Y+4	; 0x04
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 05       	cpc	r25, r1
     d44:	d1 f0       	breq	.+52     	; 0xd7a <GPIO_setupPortDirection+0x5e>
     d46:	2b 81       	ldd	r18, Y+3	; 0x03
     d48:	3c 81       	ldd	r19, Y+4	; 0x04
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <GPIO_setupPortDirection+0x3e>
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	61 f0       	breq	.+24     	; 0xd70 <GPIO_setupPortDirection+0x54>
     d58:	1e c0       	rjmp	.+60     	; 0xd96 <GPIO_setupPortDirection+0x7a>
     d5a:	2b 81       	ldd	r18, Y+3	; 0x03
     d5c:	3c 81       	ldd	r19, Y+4	; 0x04
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	81 f0       	breq	.+32     	; 0xd84 <GPIO_setupPortDirection+0x68>
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	91 05       	cpc	r25, r1
     d6c:	81 f0       	breq	.+32     	; 0xd8e <GPIO_setupPortDirection+0x72>
     d6e:	13 c0       	rjmp	.+38     	; 0xd96 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA=direction;
     d70:	ea e3       	ldi	r30, 0x3A	; 58
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	80 83       	st	Z, r24
     d78:	0e c0       	rjmp	.+28     	; 0xd96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB=direction;
     d7a:	e7 e3       	ldi	r30, 0x37	; 55
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	80 83       	st	Z, r24
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC=direction;
     d84:	e4 e3       	ldi	r30, 0x34	; 52
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	80 83       	st	Z, r24
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD=direction;
     d8e:	e1 e3       	ldi	r30, 0x31	; 49
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	80 83       	st	Z, r24
			break;
		}
	}
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 value){
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <GPIO_writePin+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <GPIO_writePin+0x8>
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	6a 83       	std	Y+2, r22	; 0x02
     db6:	4b 83       	std	Y+3, r20	; 0x03
	if( (port_num >= NUM_OF_PORTS ) || (pin_num >= NUM_OF_PINS_PER_PORT) ){
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <GPIO_writePin+0x1c>
     dbe:	d5 c0       	rjmp	.+426    	; 0xf6a <GPIO_writePin+0x1c6>
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	88 30       	cpi	r24, 0x08	; 8
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <GPIO_writePin+0x24>
     dc6:	d1 c0       	rjmp	.+418    	; 0xf6a <GPIO_writePin+0x1c6>
		/* do nothing */
	}
	else{
		switch (port_num){
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3d 83       	std	Y+5, r19	; 0x05
     dd0:	2c 83       	std	Y+4, r18	; 0x04
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	9d 81       	ldd	r25, Y+5	; 0x05
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <GPIO_writePin+0x3a>
     ddc:	43 c0       	rjmp	.+134    	; 0xe64 <GPIO_writePin+0xc0>
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	2c f4       	brge	.+10     	; 0xdf2 <GPIO_writePin+0x4e>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	71 f0       	breq	.+28     	; 0xe0c <GPIO_writePin+0x68>
     df0:	bc c0       	rjmp	.+376    	; 0xf6a <GPIO_writePin+0x1c6>
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <GPIO_writePin+0x5a>
     dfc:	5f c0       	rjmp	.+190    	; 0xebc <GPIO_writePin+0x118>
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	9d 81       	ldd	r25, Y+5	; 0x05
     e02:	83 30       	cpi	r24, 0x03	; 3
     e04:	91 05       	cpc	r25, r1
     e06:	09 f4       	brne	.+2      	; 0xe0a <GPIO_writePin+0x66>
     e08:	85 c0       	rjmp	.+266    	; 0xf14 <GPIO_writePin+0x170>
     e0a:	af c0       	rjmp	.+350    	; 0xf6a <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_HIGH){
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	a1 f4       	brne	.+40     	; 0xe3a <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);}
     e12:	ab e3       	ldi	r26, 0x3B	; 59
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	eb e3       	ldi	r30, 0x3B	; 59
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <GPIO_writePin+0x8c>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <GPIO_writePin+0x88>
     e34:	84 2b       	or	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	98 c0       	rjmp	.+304    	; 0xf6a <GPIO_writePin+0x1c6>
			else{
				CLEAR_BIT(PORTA,pin_num);
     e3a:	ab e3       	ldi	r26, 0x3B	; 59
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	eb e3       	ldi	r30, 0x3B	; 59
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0xb4>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0xb0>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	83 c0       	rjmp	.+262    	; 0xf6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH){
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	a1 f4       	brne	.+40     	; 0xe92 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);}
     e6a:	a8 e3       	ldi	r26, 0x38	; 56
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e8 e3       	ldi	r30, 0x38	; 56
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <GPIO_writePin+0xe4>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <GPIO_writePin+0xe0>
     e8c:	84 2b       	or	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	6c c0       	rjmp	.+216    	; 0xf6a <GPIO_writePin+0x1c6>
			else{
				CLEAR_BIT(PORTB,pin_num);
     e92:	a8 e3       	ldi	r26, 0x38	; 56
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e8 e3       	ldi	r30, 0x38	; 56
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x10c>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x108>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	57 c0       	rjmp	.+174    	; 0xf6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH){
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	a1 f4       	brne	.+40     	; 0xeea <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);}
     ec2:	a5 e3       	ldi	r26, 0x35	; 53
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e5 e3       	ldi	r30, 0x35	; 53
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <GPIO_writePin+0x13c>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <GPIO_writePin+0x138>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	40 c0       	rjmp	.+128    	; 0xf6a <GPIO_writePin+0x1c6>
			else{
				CLEAR_BIT(PORTC,pin_num);
     eea:	a5 e3       	ldi	r26, 0x35	; 53
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e3       	ldi	r30, 0x35	; 53
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <GPIO_writePin+0x164>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <GPIO_writePin+0x160>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	2b c0       	rjmp	.+86     	; 0xf6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH){
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	a1 f4       	brne	.+40     	; 0xf42 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);}
     f1a:	a2 e3       	ldi	r26, 0x32	; 50
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <GPIO_writePin+0x194>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <GPIO_writePin+0x190>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <GPIO_writePin+0x1c6>
			else{
				CLEAR_BIT(PORTD,pin_num);
     f42:	a2 e3       	ldi	r26, 0x32	; 50
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e2 e3       	ldi	r30, 0x32	; 50
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_writePin+0x1bc>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_writePin+0x1b8>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num,uint8 value){
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <GPIO_writePort+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <GPIO_writePort+0x8>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	84 30       	cpi	r24, 0x04	; 4
     f8e:	90 f5       	brcc	.+100    	; 0xff4 <GPIO_writePort+0x7a>
		/*do nothing*/
	}
	else{
		switch(port_num){
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3c 83       	std	Y+4, r19	; 0x04
     f98:	2b 83       	std	Y+3, r18	; 0x03
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	d1 f0       	breq	.+52     	; 0xfd8 <GPIO_writePort+0x5e>
     fa4:	2b 81       	ldd	r18, Y+3	; 0x03
     fa6:	3c 81       	ldd	r19, Y+4	; 0x04
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	31 05       	cpc	r19, r1
     fac:	2c f4       	brge	.+10     	; 0xfb8 <GPIO_writePort+0x3e>
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	61 f0       	breq	.+24     	; 0xfce <GPIO_writePort+0x54>
     fb6:	1e c0       	rjmp	.+60     	; 0xff4 <GPIO_writePort+0x7a>
     fb8:	2b 81       	ldd	r18, Y+3	; 0x03
     fba:	3c 81       	ldd	r19, Y+4	; 0x04
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	81 f0       	breq	.+32     	; 0xfe2 <GPIO_writePort+0x68>
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	91 05       	cpc	r25, r1
     fca:	81 f0       	breq	.+32     	; 0xfec <GPIO_writePort+0x72>
     fcc:	13 c0       	rjmp	.+38     	; 0xff4 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA=value;
     fce:	eb e3       	ldi	r30, 0x3B	; 59
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	80 83       	st	Z, r24
     fd6:	0e c0       	rjmp	.+28     	; 0xff4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
     fd8:	e8 e3       	ldi	r30, 0x38	; 56
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	80 83       	st	Z, r24
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
     fe2:	e5 e3       	ldi	r30, 0x35	; 53
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	80 83       	st	Z, r24
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
     fec:	e2 e3       	ldi	r30, 0x32	; 50
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	80 83       	st	Z, r24
			break;
		}
	}
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num){
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_readPin+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_readPin+0x8>
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	if( (port_num>=NUM_OF_PORTS) || (pin_num>=NUM_OF_PINS_PER_PORT) ){
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	84 30       	cpi	r24, 0x04	; 4
    1018:	18 f4       	brcc	.+6      	; 0x1020 <GPIO_readPin+0x1e>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 30       	cpi	r24, 0x08	; 8
    101e:	10 f0       	brcs	.+4      	; 0x1024 <GPIO_readPin+0x22>
		value=LOGIC_LOW; /* return logic low*/
    1020:	19 82       	std	Y+1, r1	; 0x01
    1022:	80 c0       	rjmp	.+256    	; 0x1124 <GPIO_readPin+0x122>
	}
	else{
		switch (port_num){
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	4c 81       	ldd	r20, Y+4	; 0x04
    1030:	5d 81       	ldd	r21, Y+5	; 0x05
    1032:	41 30       	cpi	r20, 0x01	; 1
    1034:	51 05       	cpc	r21, r1
    1036:	79 f1       	breq	.+94     	; 0x1096 <GPIO_readPin+0x94>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	91 05       	cpc	r25, r1
    1040:	34 f4       	brge	.+12     	; 0x104e <GPIO_readPin+0x4c>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	21 15       	cp	r18, r1
    1048:	31 05       	cpc	r19, r1
    104a:	69 f0       	breq	.+26     	; 0x1066 <GPIO_readPin+0x64>
    104c:	6b c0       	rjmp	.+214    	; 0x1124 <GPIO_readPin+0x122>
    104e:	4c 81       	ldd	r20, Y+4	; 0x04
    1050:	5d 81       	ldd	r21, Y+5	; 0x05
    1052:	42 30       	cpi	r20, 0x02	; 2
    1054:	51 05       	cpc	r21, r1
    1056:	b9 f1       	breq	.+110    	; 0x10c6 <GPIO_readPin+0xc4>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <GPIO_readPin+0x62>
    1062:	49 c0       	rjmp	.+146    	; 0x10f6 <GPIO_readPin+0xf4>
    1064:	5f c0       	rjmp	.+190    	; 0x1124 <GPIO_readPin+0x122>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    1066:	e9 e3       	ldi	r30, 0x39	; 57
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a9 01       	movw	r20, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_readPin+0x7c>
    107a:	55 95       	asr	r21
    107c:	47 95       	ror	r20
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_readPin+0x78>
    1082:	ca 01       	movw	r24, r20
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	90 70       	andi	r25, 0x00	; 0
    1088:	88 23       	and	r24, r24
    108a:	19 f0       	breq	.+6      	; 0x1092 <GPIO_readPin+0x90>
				value=LOGIC_HIGH;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	49 c0       	rjmp	.+146    	; 0x1124 <GPIO_readPin+0x122>
			}
			else{
				value=LOGIC_LOW;
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	47 c0       	rjmp	.+142    	; 0x1124 <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    1096:	e6 e3       	ldi	r30, 0x36	; 54
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a9 01       	movw	r20, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_readPin+0xac>
    10aa:	55 95       	asr	r21
    10ac:	47 95       	ror	r20
    10ae:	8a 95       	dec	r24
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_readPin+0xa8>
    10b2:	ca 01       	movw	r24, r20
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	88 23       	and	r24, r24
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <GPIO_readPin+0xc0>
				value=LOGIC_HIGH;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	31 c0       	rjmp	.+98     	; 0x1124 <GPIO_readPin+0x122>
			}
			else{
				value=LOGIC_LOW;
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	2f c0       	rjmp	.+94     	; 0x1124 <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    10c6:	e3 e3       	ldi	r30, 0x33	; 51
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_readPin+0xdc>
    10da:	55 95       	asr	r21
    10dc:	47 95       	ror	r20
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_readPin+0xd8>
    10e2:	ca 01       	movw	r24, r20
    10e4:	81 70       	andi	r24, 0x01	; 1
    10e6:	90 70       	andi	r25, 0x00	; 0
    10e8:	88 23       	and	r24, r24
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <GPIO_readPin+0xf0>
				value=LOGIC_HIGH;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	19 c0       	rjmp	.+50     	; 0x1124 <GPIO_readPin+0x122>
			}
			else{
				value=LOGIC_LOW;
    10f2:	19 82       	std	Y+1, r1	; 0x01
    10f4:	17 c0       	rjmp	.+46     	; 0x1124 <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    10f6:	e0 e3       	ldi	r30, 0x30	; 48
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a9 01       	movw	r20, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_readPin+0x10c>
    110a:	55 95       	asr	r21
    110c:	47 95       	ror	r20
    110e:	8a 95       	dec	r24
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_readPin+0x108>
    1112:	ca 01       	movw	r24, r20
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	90 70       	andi	r25, 0x00	; 0
    1118:	88 23       	and	r24, r24
    111a:	19 f0       	breq	.+6      	; 0x1122 <GPIO_readPin+0x120>
				value=LOGIC_HIGH;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <GPIO_readPin+0x122>
			}
			else{
				value=LOGIC_LOW;
    1122:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <GPIO_readPort+0x6>
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x8>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if(port_num >= NUM_OF_PORTS){
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	10 f0       	brcs	.+4      	; 0x114e <GPIO_readPort+0x18>
		value = LOGIC_LOW;
    114a:	19 82       	std	Y+1, r1	; 0x01
    114c:	32 c0       	rjmp	.+100    	; 0x11b2 <GPIO_readPort+0x7c>
	}
	else{
		switch(port_num){
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x60>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x40>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x56>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7c>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x6a>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x74>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7c>
		case PORTA_ID:
			value=PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			value=PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			value=PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			value=PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <getSendPassword>:
 * responsible for unlock the system.
 */
void timerCounter(void);


void getSendPassword(){
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	a2 97       	sbiw	r28, 0x22	; 34
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
	/* For the for loop */
	uint8 count=0;
    11da:	1d 8e       	std	Y+29, r1	; 0x1d
	/* To save the password in it temporary*/
	uint8 password[PASSWORD];
	/*Clearing the screen */
	LCD_clearScreen();
    11dc:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,(uint8 *)"Please Ent Pass:");
    11e0:	20 e6       	ldi	r18, 0x60	; 96
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	a9 01       	movw	r20, r18
    11ea:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,5);
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	65 e0       	ldi	r22, 0x05	; 5
    11f2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_moveCursor>
	for(count=0 ; count<PASSWORD;count++){
    11f6:	1d 8e       	std	Y+29, r1	; 0x1d
    11f8:	84 c0       	rjmp	.+264    	; 0x1302 <getSendPassword+0x140>
		password[count]=KEYPAD_getPressedKey();
    11fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11fc:	08 2f       	mov	r16, r24
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	0e 94 be 10 	call	0x217c	; 0x217c <KEYPAD_getPressedKey>
    1204:	28 2f       	mov	r18, r24
    1206:	ce 01       	movw	r24, r28
    1208:	4e 96       	adiw	r24, 0x1e	; 30
    120a:	fc 01       	movw	r30, r24
    120c:	e0 0f       	add	r30, r16
    120e:	f1 1f       	adc	r31, r17
    1210:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    1212:	8a e2       	ldi	r24, 0x2A	; 42
    1214:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayCharacter>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a8 ec       	ldi	r26, 0xC8	; 200
    121e:	b3 e4       	ldi	r27, 0x43	; 67
    1220:	89 8f       	std	Y+25, r24	; 0x19
    1222:	9a 8f       	std	Y+26, r25	; 0x1a
    1224:	ab 8f       	std	Y+27, r26	; 0x1b
    1226:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1228:	69 8d       	ldd	r22, Y+25	; 0x19
    122a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    122c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    122e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	4a ef       	ldi	r20, 0xFA	; 250
    1236:	54 e4       	ldi	r21, 0x44	; 68
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8d 8b       	std	Y+21, r24	; 0x15
    1242:	9e 8b       	std	Y+22, r25	; 0x16
    1244:	af 8b       	std	Y+23, r26	; 0x17
    1246:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1248:	6d 89       	ldd	r22, Y+21	; 0x15
    124a:	7e 89       	ldd	r23, Y+22	; 0x16
    124c:	8f 89       	ldd	r24, Y+23	; 0x17
    124e:	98 8d       	ldd	r25, Y+24	; 0x18
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	5f e3       	ldi	r21, 0x3F	; 63
    1258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125c:	88 23       	and	r24, r24
    125e:	2c f4       	brge	.+10     	; 0x126a <getSendPassword+0xa8>
		__ticks = 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9c 8b       	std	Y+20, r25	; 0x14
    1266:	8b 8b       	std	Y+19, r24	; 0x13
    1268:	3f c0       	rjmp	.+126    	; 0x12e8 <getSendPassword+0x126>
	else if (__tmp > 65535)
    126a:	6d 89       	ldd	r22, Y+21	; 0x15
    126c:	7e 89       	ldd	r23, Y+22	; 0x16
    126e:	8f 89       	ldd	r24, Y+23	; 0x17
    1270:	98 8d       	ldd	r25, Y+24	; 0x18
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	3f ef       	ldi	r19, 0xFF	; 255
    1276:	4f e7       	ldi	r20, 0x7F	; 127
    1278:	57 e4       	ldi	r21, 0x47	; 71
    127a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127e:	18 16       	cp	r1, r24
    1280:	4c f5       	brge	.+82     	; 0x12d4 <getSendPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1282:	69 8d       	ldd	r22, Y+25	; 0x19
    1284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	51 e4       	ldi	r21, 0x41	; 65
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	bc 01       	movw	r22, r24
    129c:	cd 01       	movw	r24, r26
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9c 8b       	std	Y+20, r25	; 0x14
    12a8:	8b 8b       	std	Y+19, r24	; 0x13
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <getSendPassword+0x108>
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9a 8b       	std	Y+18, r25	; 0x12
    12b2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12b4:	89 89       	ldd	r24, Y+17	; 0x11
    12b6:	9a 89       	ldd	r25, Y+18	; 0x12
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <getSendPassword+0xf6>
    12bc:	9a 8b       	std	Y+18, r25	; 0x12
    12be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c0:	8b 89       	ldd	r24, Y+19	; 0x13
    12c2:	9c 89       	ldd	r25, Y+20	; 0x14
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9c 8b       	std	Y+20, r25	; 0x14
    12c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ca:	8b 89       	ldd	r24, Y+19	; 0x13
    12cc:	9c 89       	ldd	r25, Y+20	; 0x14
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f7       	brne	.-38     	; 0x12ac <getSendPassword+0xea>
    12d2:	14 c0       	rjmp	.+40     	; 0x12fc <getSendPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d4:	6d 89       	ldd	r22, Y+21	; 0x15
    12d6:	7e 89       	ldd	r23, Y+22	; 0x16
    12d8:	8f 89       	ldd	r24, Y+23	; 0x17
    12da:	98 8d       	ldd	r25, Y+24	; 0x18
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9c 8b       	std	Y+20, r25	; 0x14
    12e6:	8b 8b       	std	Y+19, r24	; 0x13
    12e8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ea:	9c 89       	ldd	r25, Y+20	; 0x14
    12ec:	98 8b       	std	Y+16, r25	; 0x10
    12ee:	8f 87       	std	Y+15, r24	; 0x0f
    12f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f2:	98 89       	ldd	r25, Y+16	; 0x10
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <getSendPassword+0x132>
    12f8:	98 8b       	std	Y+16, r25	; 0x10
    12fa:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 password[PASSWORD];
	/*Clearing the screen */
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,(uint8 *)"Please Ent Pass:");
	LCD_moveCursor(1,5);
	for(count=0 ; count<PASSWORD;count++){
    12fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	8d 8f       	std	Y+29, r24	; 0x1d
    1302:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1304:	85 30       	cpi	r24, 0x05	; 5
    1306:	08 f4       	brcc	.+2      	; 0x130a <getSendPassword+0x148>
    1308:	78 cf       	rjmp	.-272    	; 0x11fa <getSendPassword+0x38>
		/* to not input more than one character
		 * */
		_delay_ms(400);
	}
	/* '=' is equivalent to enter */
	while(KEYPAD_getPressedKey() != 13);
    130a:	0e 94 be 10 	call	0x217c	; 0x217c <KEYPAD_getPressedKey>
    130e:	8d 30       	cpi	r24, 0x0D	; 13
    1310:	e1 f7       	brne	.-8      	; 0x130a <getSendPassword+0x148>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a8 ec       	ldi	r26, 0xC8	; 200
    1318:	b3 e4       	ldi	r27, 0x43	; 67
    131a:	8b 87       	std	Y+11, r24	; 0x0b
    131c:	9c 87       	std	Y+12, r25	; 0x0c
    131e:	ad 87       	std	Y+13, r26	; 0x0d
    1320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1322:	6b 85       	ldd	r22, Y+11	; 0x0b
    1324:	7c 85       	ldd	r23, Y+12	; 0x0c
    1326:	8d 85       	ldd	r24, Y+13	; 0x0d
    1328:	9e 85       	ldd	r25, Y+14	; 0x0e
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a ef       	ldi	r20, 0xFA	; 250
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8f 83       	std	Y+7, r24	; 0x07
    133c:	98 87       	std	Y+8, r25	; 0x08
    133e:	a9 87       	std	Y+9, r26	; 0x09
    1340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1342:	6f 81       	ldd	r22, Y+7	; 0x07
    1344:	78 85       	ldd	r23, Y+8	; 0x08
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e8       	ldi	r20, 0x80	; 128
    1350:	5f e3       	ldi	r21, 0x3F	; 63
    1352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1356:	88 23       	and	r24, r24
    1358:	2c f4       	brge	.+10     	; 0x1364 <getSendPassword+0x1a2>
		__ticks = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	3f c0       	rjmp	.+126    	; 0x13e2 <getSendPassword+0x220>
	else if (__tmp > 65535)
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	3f ef       	ldi	r19, 0xFF	; 255
    1370:	4f e7       	ldi	r20, 0x7F	; 127
    1372:	57 e4       	ldi	r21, 0x47	; 71
    1374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1378:	18 16       	cp	r1, r24
    137a:	4c f5       	brge	.+82     	; 0x13ce <getSendPassword+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137c:	6b 85       	ldd	r22, Y+11	; 0x0b
    137e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1380:	8d 85       	ldd	r24, Y+13	; 0x0d
    1382:	9e 85       	ldd	r25, Y+14	; 0x0e
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e2       	ldi	r20, 0x20	; 32
    138a:	51 e4       	ldi	r21, 0x41	; 65
    138c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <getSendPassword+0x202>
    13a6:	88 ec       	ldi	r24, 0xC8	; 200
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9c 83       	std	Y+4, r25	; 0x04
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <getSendPassword+0x1f0>
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f7       	brne	.-38     	; 0x13a6 <getSendPassword+0x1e4>
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <getSendPassword+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	6f 81       	ldd	r22, Y+7	; 0x07
    13d0:	78 85       	ldd	r23, Y+8	; 0x08
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	8d 83       	std	Y+5, r24	; 0x05
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <getSendPassword+0x22c>
    13f2:	9a 83       	std	Y+2, r25	; 0x02
    13f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	/* send all the characters to the CONTROL ECU*/
	for(count=0;count<PASSWORD;count++){
    13f6:	1d 8e       	std	Y+29, r1	; 0x1d
    13f8:	15 c0       	rjmp	.+42     	; 0x1424 <getSendPassword+0x262>
		/* check if the HMI ECU is ready */
		UART_sendByte(ARE_MC2_READY);
    13fa:	85 e5       	ldi	r24, 0x55	; 85
    13fc:	0e 94 a3 18 	call	0x3146	; 0x3146 <UART_sendByte>
		/* until HMI ECU send that it is ready which is MC2_RREADY*/
		while(UART_receiveByte() != MC2_READY);
    1400:	0e 94 ba 18 	call	0x3174	; 0x3174 <UART_receiveByte>
    1404:	8f 3f       	cpi	r24, 0xFF	; 255
    1406:	e1 f7       	brne	.-8      	; 0x1400 <getSendPassword+0x23e>
		/* Sending the characters of the password one by one*/
		UART_sendByte(password[count]);
    1408:	8d 8d       	ldd	r24, Y+29	; 0x1d
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	ce 01       	movw	r24, r28
    1410:	4e 96       	adiw	r24, 0x1e	; 30
    1412:	fc 01       	movw	r30, r24
    1414:	e2 0f       	add	r30, r18
    1416:	f3 1f       	adc	r31, r19
    1418:	80 81       	ld	r24, Z
    141a:	0e 94 a3 18 	call	0x3146	; 0x3146 <UART_sendByte>
	}
	/* '=' is equivalent to enter */
	while(KEYPAD_getPressedKey() != 13);
	_delay_ms(400);
	/* send all the characters to the CONTROL ECU*/
	for(count=0;count<PASSWORD;count++){
    141e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	8d 8f       	std	Y+29, r24	; 0x1d
    1424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1426:	85 30       	cpi	r24, 0x05	; 5
    1428:	40 f3       	brcs	.-48     	; 0x13fa <getSendPassword+0x238>
		while(UART_receiveByte() != MC2_READY);
		/* Sending the characters of the password one by one*/
		UART_sendByte(password[count]);
	}

}
    142a:	a2 96       	adiw	r28, 0x22	; 34
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <adjustPassword>:

void adjustPassword(){
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	ab 97       	sbiw	r28, 0x2b	; 43
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=FALSE;
    1454:	1b a6       	std	Y+43, r1	; 0x2b
    1456:	9d c1       	rjmp	.+826    	; 0x1792 <adjustPassword+0x352>
	while(flag == FALSE){
		/* Get the fist password from the user and send it to the CONTROL ECU*/
		getSendPassword();
    1458:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <getSendPassword>
		LCD_clearScreen();
    145c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,(uint8 *)"Please Re-Enter");
    1460:	21 e7       	ldi	r18, 0x71	; 113
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,(uint8 *)"The Password");
    146e:	21 e8       	ldi	r18, 0x81	; 129
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	aa e7       	ldi	r26, 0x7A	; 122
    1482:	b4 e4       	ldi	r27, 0x44	; 68
    1484:	8f a3       	std	Y+39, r24	; 0x27
    1486:	98 a7       	std	Y+40, r25	; 0x28
    1488:	a9 a7       	std	Y+41, r26	; 0x29
    148a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	6f a1       	ldd	r22, Y+39	; 0x27
    148e:	78 a5       	ldd	r23, Y+40	; 0x28
    1490:	89 a5       	ldd	r24, Y+41	; 0x29
    1492:	9a a5       	ldd	r25, Y+42	; 0x2a
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a ef       	ldi	r20, 0xFA	; 250
    149a:	54 e4       	ldi	r21, 0x44	; 68
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8b a3       	std	Y+35, r24	; 0x23
    14a6:	9c a3       	std	Y+36, r25	; 0x24
    14a8:	ad a3       	std	Y+37, r26	; 0x25
    14aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14ac:	6b a1       	ldd	r22, Y+35	; 0x23
    14ae:	7c a1       	ldd	r23, Y+36	; 0x24
    14b0:	8d a1       	ldd	r24, Y+37	; 0x25
    14b2:	9e a1       	ldd	r25, Y+38	; 0x26
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <adjustPassword+0x8e>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9a a3       	std	Y+34, r25	; 0x22
    14ca:	89 a3       	std	Y+33, r24	; 0x21
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <adjustPassword+0x10c>
	else if (__tmp > 65535)
    14ce:	6b a1       	ldd	r22, Y+35	; 0x23
    14d0:	7c a1       	ldd	r23, Y+36	; 0x24
    14d2:	8d a1       	ldd	r24, Y+37	; 0x25
    14d4:	9e a1       	ldd	r25, Y+38	; 0x26
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <adjustPassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	6f a1       	ldd	r22, Y+39	; 0x27
    14e8:	78 a5       	ldd	r23, Y+40	; 0x28
    14ea:	89 a5       	ldd	r24, Y+41	; 0x29
    14ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9a a3       	std	Y+34, r25	; 0x22
    150c:	89 a3       	std	Y+33, r24	; 0x21
    150e:	0f c0       	rjmp	.+30     	; 0x152e <adjustPassword+0xee>
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	98 a3       	std	Y+32, r25	; 0x20
    1516:	8f 8f       	std	Y+31, r24	; 0x1f
    1518:	8f 8d       	ldd	r24, Y+31	; 0x1f
    151a:	98 a1       	ldd	r25, Y+32	; 0x20
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <adjustPassword+0xdc>
    1520:	98 a3       	std	Y+32, r25	; 0x20
    1522:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	89 a1       	ldd	r24, Y+33	; 0x21
    1526:	9a a1       	ldd	r25, Y+34	; 0x22
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9a a3       	std	Y+34, r25	; 0x22
    152c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	89 a1       	ldd	r24, Y+33	; 0x21
    1530:	9a a1       	ldd	r25, Y+34	; 0x22
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <adjustPassword+0xd0>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <adjustPassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	6b a1       	ldd	r22, Y+35	; 0x23
    153a:	7c a1       	ldd	r23, Y+36	; 0x24
    153c:	8d a1       	ldd	r24, Y+37	; 0x25
    153e:	9e a1       	ldd	r25, Y+38	; 0x26
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9a a3       	std	Y+34, r25	; 0x22
    154a:	89 a3       	std	Y+33, r24	; 0x21
    154c:	89 a1       	ldd	r24, Y+33	; 0x21
    154e:	9a a1       	ldd	r25, Y+34	; 0x22
    1550:	9e 8f       	std	Y+30, r25	; 0x1e
    1552:	8d 8f       	std	Y+29, r24	; 0x1d
    1554:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1556:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <adjustPassword+0x118>
    155c:	9e 8f       	std	Y+30, r25	; 0x1e
    155e:	8d 8f       	std	Y+29, r24	; 0x1d
		/* delay to display the message on the screen (to take its time)*/
		_delay_ms(1000);
		/* Get the fist password from the user and send it to the CONTROL ECU*/
		getSendPassword();
    1560:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <getSendPassword>
		/* Looping until CONTROL_ECU send ARE_MC1_READY*/
		while(UART_receiveByte() != ARE_MC1_READY);
    1564:	0e 94 ba 18 	call	0x3174	; 0x3174 <UART_receiveByte>
    1568:	80 31       	cpi	r24, 0x10	; 16
    156a:	e1 f7       	brne	.-8      	; 0x1564 <adjustPassword+0x124>
		/* HMI ECU sends to the CONTROL ECU i am ready which is MC1_ECU*/
		UART_sendByte(MC1_READY);
    156c:	80 e2       	ldi	r24, 0x20	; 32
    156e:	0e 94 a3 18 	call	0x3146	; 0x3146 <UART_sendByte>
		/* Receive the compare state of the 2-passwords from the CONTROL ECU*/
		flag=UART_receiveByte();
    1572:	0e 94 ba 18 	call	0x3174	; 0x3174 <UART_receiveByte>
    1576:	8b a7       	std	Y+43, r24	; 0x2b
		/* fist state if the password is right, we will display on the screen the message below for 1 second */
		if(flag == PASSWORD_IS_RIGHT)
    1578:	8b a5       	ldd	r24, Y+43	; 0x2b
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	09 f0       	breq	.+2      	; 0x1580 <adjustPassword+0x140>
    157e:	83 c0       	rjmp	.+262    	; 0x1686 <adjustPassword+0x246>
		{
			LCD_clearScreen();
    1580:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"    Matching    ");
    1584:	2e e8       	ldi	r18, 0x8E	; 142
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	a9 01       	movw	r20, r18
    158e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,(uint8 *)"Saving Pass.....");
    1592:	2f e9       	ldi	r18, 0x9F	; 159
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	a9 01       	movw	r20, r18
    159c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	aa e7       	ldi	r26, 0x7A	; 122
    15a6:	b4 e4       	ldi	r27, 0x44	; 68
    15a8:	89 8f       	std	Y+25, r24	; 0x19
    15aa:	9a 8f       	std	Y+26, r25	; 0x1a
    15ac:	ab 8f       	std	Y+27, r26	; 0x1b
    15ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	69 8d       	ldd	r22, Y+25	; 0x19
    15b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4a ef       	ldi	r20, 0xFA	; 250
    15be:	54 e4       	ldi	r21, 0x44	; 68
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	8d 8b       	std	Y+21, r24	; 0x15
    15ca:	9e 8b       	std	Y+22, r25	; 0x16
    15cc:	af 8b       	std	Y+23, r26	; 0x17
    15ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15d0:	6d 89       	ldd	r22, Y+21	; 0x15
    15d2:	7e 89       	ldd	r23, Y+22	; 0x16
    15d4:	8f 89       	ldd	r24, Y+23	; 0x17
    15d6:	98 8d       	ldd	r25, Y+24	; 0x18
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <adjustPassword+0x1b2>
		__ticks = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9c 8b       	std	Y+20, r25	; 0x14
    15ee:	8b 8b       	std	Y+19, r24	; 0x13
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <adjustPassword+0x230>
	else if (__tmp > 65535)
    15f2:	6d 89       	ldd	r22, Y+21	; 0x15
    15f4:	7e 89       	ldd	r23, Y+22	; 0x16
    15f6:	8f 89       	ldd	r24, Y+23	; 0x17
    15f8:	98 8d       	ldd	r25, Y+24	; 0x18
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	3f ef       	ldi	r19, 0xFF	; 255
    15fe:	4f e7       	ldi	r20, 0x7F	; 127
    1600:	57 e4       	ldi	r21, 0x47	; 71
    1602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1606:	18 16       	cp	r1, r24
    1608:	4c f5       	brge	.+82     	; 0x165c <adjustPassword+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	69 8d       	ldd	r22, Y+25	; 0x19
    160c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1610:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e2       	ldi	r20, 0x20	; 32
    1618:	51 e4       	ldi	r21, 0x41	; 65
    161a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9c 8b       	std	Y+20, r25	; 0x14
    1630:	8b 8b       	std	Y+19, r24	; 0x13
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <adjustPassword+0x212>
    1634:	88 ec       	ldi	r24, 0xC8	; 200
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9a 8b       	std	Y+18, r25	; 0x12
    163a:	89 8b       	std	Y+17, r24	; 0x11
    163c:	89 89       	ldd	r24, Y+17	; 0x11
    163e:	9a 89       	ldd	r25, Y+18	; 0x12
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <adjustPassword+0x200>
    1644:	9a 8b       	std	Y+18, r25	; 0x12
    1646:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	8b 89       	ldd	r24, Y+19	; 0x13
    164a:	9c 89       	ldd	r25, Y+20	; 0x14
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9c 8b       	std	Y+20, r25	; 0x14
    1650:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	8b 89       	ldd	r24, Y+19	; 0x13
    1654:	9c 89       	ldd	r25, Y+20	; 0x14
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	69 f7       	brne	.-38     	; 0x1634 <adjustPassword+0x1f4>
    165a:	9b c0       	rjmp	.+310    	; 0x1792 <adjustPassword+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	6d 89       	ldd	r22, Y+21	; 0x15
    165e:	7e 89       	ldd	r23, Y+22	; 0x16
    1660:	8f 89       	ldd	r24, Y+23	; 0x17
    1662:	98 8d       	ldd	r25, Y+24	; 0x18
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9c 8b       	std	Y+20, r25	; 0x14
    166e:	8b 8b       	std	Y+19, r24	; 0x13
    1670:	8b 89       	ldd	r24, Y+19	; 0x13
    1672:	9c 89       	ldd	r25, Y+20	; 0x14
    1674:	98 8b       	std	Y+16, r25	; 0x10
    1676:	8f 87       	std	Y+15, r24	; 0x0f
    1678:	8f 85       	ldd	r24, Y+15	; 0x0f
    167a:	98 89       	ldd	r25, Y+16	; 0x10
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <adjustPassword+0x23c>
    1680:	98 8b       	std	Y+16, r25	; 0x10
    1682:	8f 87       	std	Y+15, r24	; 0x0f
    1684:	86 c0       	rjmp	.+268    	; 0x1792 <adjustPassword+0x352>
			_delay_ms(1000);
		}
		/* fist state if the password is wrong, we will display on the screen the message below for 1 second and loop again */
		else if(flag == PASSWORD_IS_WRONG)
    1686:	8b a5       	ldd	r24, Y+43	; 0x2b
    1688:	88 23       	and	r24, r24
    168a:	09 f0       	breq	.+2      	; 0x168e <adjustPassword+0x24e>
    168c:	82 c0       	rjmp	.+260    	; 0x1792 <adjustPassword+0x352>
		{
			LCD_clearScreen();
    168e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"  Dis-Matching  ");
    1692:	20 eb       	ldi	r18, 0xB0	; 176
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	a9 01       	movw	r20, r18
    169c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,(uint8 *)"Please try Again");
    16a0:	21 ec       	ldi	r18, 0xC1	; 193
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	a9 01       	movw	r20, r18
    16aa:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	aa e7       	ldi	r26, 0x7A	; 122
    16b4:	b4 e4       	ldi	r27, 0x44	; 68
    16b6:	8b 87       	std	Y+11, r24	; 0x0b
    16b8:	9c 87       	std	Y+12, r25	; 0x0c
    16ba:	ad 87       	std	Y+13, r26	; 0x0d
    16bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16be:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	4a ef       	ldi	r20, 0xFA	; 250
    16cc:	54 e4       	ldi	r21, 0x44	; 68
    16ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	8f 83       	std	Y+7, r24	; 0x07
    16d8:	98 87       	std	Y+8, r25	; 0x08
    16da:	a9 87       	std	Y+9, r26	; 0x09
    16dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e8       	ldi	r20, 0x80	; 128
    16ec:	5f e3       	ldi	r21, 0x3F	; 63
    16ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f2:	88 23       	and	r24, r24
    16f4:	2c f4       	brge	.+10     	; 0x1700 <adjustPassword+0x2c0>
		__ticks = 1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	3f c0       	rjmp	.+126    	; 0x177e <adjustPassword+0x33e>
	else if (__tmp > 65535)
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	57 e4       	ldi	r21, 0x47	; 71
    1710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1714:	18 16       	cp	r1, r24
    1716:	4c f5       	brge	.+82     	; 0x176a <adjustPassword+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1718:	6b 85       	ldd	r22, Y+11	; 0x0b
    171a:	7c 85       	ldd	r23, Y+12	; 0x0c
    171c:	8d 85       	ldd	r24, Y+13	; 0x0d
    171e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e2       	ldi	r20, 0x20	; 32
    1726:	51 e4       	ldi	r21, 0x41	; 65
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <adjustPassword+0x320>
    1742:	88 ec       	ldi	r24, 0xC8	; 200
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9c 83       	std	Y+4, r25	; 0x04
    1748:	8b 83       	std	Y+3, r24	; 0x03
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <adjustPassword+0x30e>
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	69 f7       	brne	.-38     	; 0x1742 <adjustPassword+0x302>
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <adjustPassword+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	9a 81       	ldd	r25, Y+2	; 0x02
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <adjustPassword+0x34a>
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01

}

void adjustPassword(){
	uint8 flag=FALSE;
	while(flag == FALSE){
    1792:	8b a5       	ldd	r24, Y+43	; 0x2b
    1794:	88 23       	and	r24, r24
    1796:	09 f4       	brne	.+2      	; 0x179a <adjustPassword+0x35a>
    1798:	5f ce       	rjmp	.-834    	; 0x1458 <adjustPassword+0x18>
			LCD_displayStringRowColumn(0,0,(uint8 *)"  Dis-Matching  ");
			LCD_displayStringRowColumn(1,0,(uint8 *)"Please try Again");
			_delay_ms(1000);
		}
	}
}
    179a:	ab 96       	adiw	r28, 0x2b	; 43
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <displayMenu>:

void displayMenu(){
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	/* Clearing the screen*/
	LCD_clearScreen();
    17b4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
	/* displaying the menu screen in different rows*/
	LCD_displayStringRowColumn(0,0,(uint8 *)"(+)   Open Door");
    17b8:	22 ed       	ldi	r18, 0xD2	; 210
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	a9 01       	movw	r20, r18
    17c2:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,(uint8 *)"(-)  Change Pass");
    17c6:	22 ee       	ldi	r18, 0xE2	; 226
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	a9 01       	movw	r20, r18
    17d0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
}
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <getChoiceFromUser>:


void getChoiceFromUser(void){
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	2e 97       	sbiw	r28, 0x0e	; 14
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
	/* getting the choice from the user */
	choice=KEYPAD_getPressedKey();
    17ee:	0e 94 be 10 	call	0x217c	; 0x217c <KEYPAD_getPressedKey>
    17f2:	80 93 e8 01 	sts	0x01E8, r24
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a8 ec       	ldi	r26, 0xC8	; 200
    17fc:	b3 e4       	ldi	r27, 0x43	; 67
    17fe:	8b 87       	std	Y+11, r24	; 0x0b
    1800:	9c 87       	std	Y+12, r25	; 0x0c
    1802:	ad 87       	std	Y+13, r26	; 0x0d
    1804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6b 85       	ldd	r22, Y+11	; 0x0b
    1808:	7c 85       	ldd	r23, Y+12	; 0x0c
    180a:	8d 85       	ldd	r24, Y+13	; 0x0d
    180c:	9e 85       	ldd	r25, Y+14	; 0x0e
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a ef       	ldi	r20, 0xFA	; 250
    1814:	54 e4       	ldi	r21, 0x44	; 68
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8f 83       	std	Y+7, r24	; 0x07
    1820:	98 87       	std	Y+8, r25	; 0x08
    1822:	a9 87       	std	Y+9, r26	; 0x09
    1824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <getChoiceFromUser+0x6e>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <getChoiceFromUser+0xec>
	else if (__tmp > 65535)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <getChoiceFromUser+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <getChoiceFromUser+0xce>
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9c 83       	std	Y+4, r25	; 0x04
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <getChoiceFromUser+0xbc>
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <getChoiceFromUser+0xb0>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <getChoiceFromUser+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <getChoiceFromUser+0xf8>
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
}
    18da:	2e 96       	adiw	r28, 0x0e	; 14
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <mc1SendChoice>:
/* This function is responsible for sending a choice to CONTROL_ECU
 * */
void mc1SendChoice(){
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(ARE_MC2_READY);
    18f4:	85 e5       	ldi	r24, 0x55	; 85
    18f6:	0e 94 a3 18 	call	0x3146	; 0x3146 <UART_sendByte>
	while(UART_receiveByte() != MC2_READY);
    18fa:	0e 94 ba 18 	call	0x3174	; 0x3174 <UART_receiveByte>
    18fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1900:	e1 f7       	brne	.-8      	; 0x18fa <mc1SendChoice+0xe>
	UART_sendByte(choice);
    1902:	80 91 e8 01 	lds	r24, 0x01E8
    1906:	0e 94 a3 18 	call	0x3146	; 0x3146 <UART_sendByte>
}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <mc1ReceiveChoice>:
/* This function is responsible for receiving a choice from CONTROL_ECU
 * */
void mc1ReceiveChoice(){
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte() != ARE_MC1_READY);
    1918:	0e 94 ba 18 	call	0x3174	; 0x3174 <UART_receiveByte>
    191c:	80 31       	cpi	r24, 0x10	; 16
    191e:	e1 f7       	brne	.-8      	; 0x1918 <mc1ReceiveChoice+0x8>
	UART_sendByte(MC1_READY);
    1920:	80 e2       	ldi	r24, 0x20	; 32
    1922:	0e 94 a3 18 	call	0x3146	; 0x3146 <UART_sendByte>
	choice=UART_receiveByte();
    1926:	0e 94 ba 18 	call	0x3174	; 0x3174 <UART_receiveByte>
    192a:	80 93 e8 01 	sts	0x01E8, r24
}
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <timerCounter>:

void timerCounter(){
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
	/* increment the timer counter to controlling the time of door and lock */
	g_timerCount++;
    193c:	80 91 e9 01 	lds	r24, 0x01E9
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	80 93 e9 01 	sts	0x01E9, r24
}
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <main>:

int main(){
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	ca 56       	subi	r28, 0x6A	; 106
    195a:	d0 40       	sbci	r29, 0x00	; 0
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
	/* To enable the global interrupt */
	SREG|=(1<<7);
    1966:	af e5       	ldi	r26, 0x5F	; 95
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	ef e5       	ldi	r30, 0x5F	; 95
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	80 68       	ori	r24, 0x80	; 128
    1972:	8c 93       	st	X, r24
	 *                            with compare value of 46875
	 *                            Ttimer = 46875 * 0.000128 = 6 second
	 *                            to make the Lock time is 1 minute we need 10 overflow so, we will while loop until
	 *                            g_timerCount is equal 10
	 * */
	TIMER_configType configtype1={TIMER1,COMPARE_MODE_TIMER1,F_CPU_1024,0,46875};
    1974:	ce 01       	movw	r24, r28
    1976:	89 5b       	subi	r24, 0xB9	; 185
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	6e 96       	adiw	r28, 0x1e	; 30
    197c:	9f af       	std	Y+63, r25	; 0x3f
    197e:	8e af       	std	Y+62, r24	; 0x3e
    1980:	6e 97       	sbiw	r28, 0x1e	; 30
    1982:	80 ee       	ldi	r24, 0xE0	; 224
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	a0 96       	adiw	r28, 0x20	; 32
    1988:	9f af       	std	Y+63, r25	; 0x3f
    198a:	8e af       	std	Y+62, r24	; 0x3e
    198c:	a0 97       	sbiw	r28, 0x20	; 32
    198e:	97 e0       	ldi	r25, 0x07	; 7
    1990:	a1 96       	adiw	r28, 0x21	; 33
    1992:	9f af       	std	Y+63, r25	; 0x3f
    1994:	a1 97       	sbiw	r28, 0x21	; 33
    1996:	a0 96       	adiw	r28, 0x20	; 32
    1998:	ee ad       	ldd	r30, Y+62	; 0x3e
    199a:	ff ad       	ldd	r31, Y+63	; 0x3f
    199c:	a0 97       	sbiw	r28, 0x20	; 32
    199e:	00 80       	ld	r0, Z
    19a0:	a0 96       	adiw	r28, 0x20	; 32
    19a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    19a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    19a6:	a0 97       	sbiw	r28, 0x20	; 32
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	a0 96       	adiw	r28, 0x20	; 32
    19ac:	9f af       	std	Y+63, r25	; 0x3f
    19ae:	8e af       	std	Y+62, r24	; 0x3e
    19b0:	a0 97       	sbiw	r28, 0x20	; 32
    19b2:	6e 96       	adiw	r28, 0x1e	; 30
    19b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    19b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    19b8:	6e 97       	sbiw	r28, 0x1e	; 30
    19ba:	00 82       	st	Z, r0
    19bc:	6e 96       	adiw	r28, 0x1e	; 30
    19be:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19c2:	6e 97       	sbiw	r28, 0x1e	; 30
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	6e 96       	adiw	r28, 0x1e	; 30
    19c8:	9f af       	std	Y+63, r25	; 0x3f
    19ca:	8e af       	std	Y+62, r24	; 0x3e
    19cc:	6e 97       	sbiw	r28, 0x1e	; 30
    19ce:	a1 96       	adiw	r28, 0x21	; 33
    19d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19d2:	a1 97       	sbiw	r28, 0x21	; 33
    19d4:	91 50       	subi	r25, 0x01	; 1
    19d6:	a1 96       	adiw	r28, 0x21	; 33
    19d8:	9f af       	std	Y+63, r25	; 0x3f
    19da:	a1 97       	sbiw	r28, 0x21	; 33
    19dc:	a1 96       	adiw	r28, 0x21	; 33
    19de:	ef ad       	ldd	r30, Y+63	; 0x3f
    19e0:	a1 97       	sbiw	r28, 0x21	; 33
    19e2:	ee 23       	and	r30, r30
    19e4:	c1 f6       	brne	.-80     	; 0x1996 <main+0x4a>
	 *                             we will while loop until g_timerCount is equal 39
	 *                          3- To make the door holding time is (15+3+15) seconds we need 66 overflow so,
	 *                             we will while loop until g_timerCount is equal 66
	 *
	 * */
	TIMER_configType configtype2={TIMER1,COMPARE_MODE_TIMER1,F_CPU_64,0,62500};
    19e6:	ce 01       	movw	r24, r28
    19e8:	82 5b       	subi	r24, 0xB2	; 178
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	a3 96       	adiw	r28, 0x23	; 35
    19ee:	9f af       	std	Y+63, r25	; 0x3f
    19f0:	8e af       	std	Y+62, r24	; 0x3e
    19f2:	a3 97       	sbiw	r28, 0x23	; 35
    19f4:	89 ed       	ldi	r24, 0xD9	; 217
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	a5 96       	adiw	r28, 0x25	; 37
    19fa:	9f af       	std	Y+63, r25	; 0x3f
    19fc:	8e af       	std	Y+62, r24	; 0x3e
    19fe:	a5 97       	sbiw	r28, 0x25	; 37
    1a00:	97 e0       	ldi	r25, 0x07	; 7
    1a02:	a6 96       	adiw	r28, 0x26	; 38
    1a04:	9f af       	std	Y+63, r25	; 0x3f
    1a06:	a6 97       	sbiw	r28, 0x26	; 38
    1a08:	a5 96       	adiw	r28, 0x25	; 37
    1a0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a0e:	a5 97       	sbiw	r28, 0x25	; 37
    1a10:	00 80       	ld	r0, Z
    1a12:	a5 96       	adiw	r28, 0x25	; 37
    1a14:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a16:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a18:	a5 97       	sbiw	r28, 0x25	; 37
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	a5 96       	adiw	r28, 0x25	; 37
    1a1e:	9f af       	std	Y+63, r25	; 0x3f
    1a20:	8e af       	std	Y+62, r24	; 0x3e
    1a22:	a5 97       	sbiw	r28, 0x25	; 37
    1a24:	a3 96       	adiw	r28, 0x23	; 35
    1a26:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a28:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a2a:	a3 97       	sbiw	r28, 0x23	; 35
    1a2c:	00 82       	st	Z, r0
    1a2e:	a3 96       	adiw	r28, 0x23	; 35
    1a30:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a32:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a34:	a3 97       	sbiw	r28, 0x23	; 35
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	a3 96       	adiw	r28, 0x23	; 35
    1a3a:	9f af       	std	Y+63, r25	; 0x3f
    1a3c:	8e af       	std	Y+62, r24	; 0x3e
    1a3e:	a3 97       	sbiw	r28, 0x23	; 35
    1a40:	a6 96       	adiw	r28, 0x26	; 38
    1a42:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a44:	a6 97       	sbiw	r28, 0x26	; 38
    1a46:	91 50       	subi	r25, 0x01	; 1
    1a48:	a6 96       	adiw	r28, 0x26	; 38
    1a4a:	9f af       	std	Y+63, r25	; 0x3f
    1a4c:	a6 97       	sbiw	r28, 0x26	; 38
    1a4e:	a6 96       	adiw	r28, 0x26	; 38
    1a50:	ef ad       	ldd	r30, Y+63	; 0x3f
    1a52:	a6 97       	sbiw	r28, 0x26	; 38
    1a54:	ee 23       	and	r30, r30
    1a56:	c1 f6       	brne	.-80     	; 0x1a08 <main+0xbc>
	/* Set the call back of the timer interrupt in order to make the timer not depends on the application*/
	TIMER1_setCallBack(timerCounter);
    1a58:	8a e9       	ldi	r24, 0x9A	; 154
    1a5a:	9c e0       	ldi	r25, 0x0C	; 12
    1a5c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <TIMER1_setCallBack>
	/*initialize the UART with a specific UART frame based on structure*/
	UART_ConfigType configtype={PARITY_DISABLED,ONE_BIT,EIGHT_BITS,115200};
    1a60:	ce 01       	movw	r24, r28
    1a62:	8b 5a       	subi	r24, 0xAB	; 171
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	a8 96       	adiw	r28, 0x28	; 40
    1a68:	9f af       	std	Y+63, r25	; 0x3f
    1a6a:	8e af       	std	Y+62, r24	; 0x3e
    1a6c:	a8 97       	sbiw	r28, 0x28	; 40
    1a6e:	82 ed       	ldi	r24, 0xD2	; 210
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	aa 96       	adiw	r28, 0x2a	; 42
    1a74:	9f af       	std	Y+63, r25	; 0x3f
    1a76:	8e af       	std	Y+62, r24	; 0x3e
    1a78:	aa 97       	sbiw	r28, 0x2a	; 42
    1a7a:	97 e0       	ldi	r25, 0x07	; 7
    1a7c:	ab 96       	adiw	r28, 0x2b	; 43
    1a7e:	9f af       	std	Y+63, r25	; 0x3f
    1a80:	ab 97       	sbiw	r28, 0x2b	; 43
    1a82:	aa 96       	adiw	r28, 0x2a	; 42
    1a84:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a86:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a88:	aa 97       	sbiw	r28, 0x2a	; 42
    1a8a:	00 80       	ld	r0, Z
    1a8c:	aa 96       	adiw	r28, 0x2a	; 42
    1a8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a90:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a92:	aa 97       	sbiw	r28, 0x2a	; 42
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	aa 96       	adiw	r28, 0x2a	; 42
    1a98:	9f af       	std	Y+63, r25	; 0x3f
    1a9a:	8e af       	std	Y+62, r24	; 0x3e
    1a9c:	aa 97       	sbiw	r28, 0x2a	; 42
    1a9e:	a8 96       	adiw	r28, 0x28	; 40
    1aa0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1aa2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1aa4:	a8 97       	sbiw	r28, 0x28	; 40
    1aa6:	00 82       	st	Z, r0
    1aa8:	a8 96       	adiw	r28, 0x28	; 40
    1aaa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aae:	a8 97       	sbiw	r28, 0x28	; 40
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	a8 96       	adiw	r28, 0x28	; 40
    1ab4:	9f af       	std	Y+63, r25	; 0x3f
    1ab6:	8e af       	std	Y+62, r24	; 0x3e
    1ab8:	a8 97       	sbiw	r28, 0x28	; 40
    1aba:	ab 96       	adiw	r28, 0x2b	; 43
    1abc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1abe:	ab 97       	sbiw	r28, 0x2b	; 43
    1ac0:	91 50       	subi	r25, 0x01	; 1
    1ac2:	ab 96       	adiw	r28, 0x2b	; 43
    1ac4:	9f af       	std	Y+63, r25	; 0x3f
    1ac6:	ab 97       	sbiw	r28, 0x2b	; 43
    1ac8:	ab 96       	adiw	r28, 0x2b	; 43
    1aca:	ef ad       	ldd	r30, Y+63	; 0x3f
    1acc:	ab 97       	sbiw	r28, 0x2b	; 43
    1ace:	ee 23       	and	r30, r30
    1ad0:	c1 f6       	brne	.-80     	; 0x1a82 <main+0x136>
	/*sending the structure to the UART for initialization*/
	UART_init(&configtype);
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	8b 5a       	subi	r24, 0xAB	; 171
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	0e 94 3c 18 	call	0x3078	; 0x3078 <UART_init>
	/* initialize the LCD */
	LCD_init();
    1adc:	0e 94 aa 13 	call	0x2754	; 0x2754 <LCD_init>
	 * all of this is happening based on the CONTROL ECU instruction
	 * */
	while(1){
		/* HMI ECU receives decision from the CONTROL ECU and based on this decision, the HMI ECU will implement whatever the CONTROL
		 * ECU wants */
		mc1ReceiveChoice();
    1ae0:	0e 94 88 0c 	call	0x1910	; 0x1910 <mc1ReceiveChoice>

		/* First Case : if the CONTROL ECU send adjust the password */
		if(choice == ADJUST_PASSWORD){
    1ae4:	80 91 e8 01 	lds	r24, 0x01E8
    1ae8:	84 30       	cpi	r24, 0x04	; 4
    1aea:	19 f4       	brne	.+6      	; 0x1af2 <main+0x1a6>
			adjustPassword();
    1aec:	0e 94 20 0a 	call	0x1440	; 0x1440 <adjustPassword>
    1af0:	f7 cf       	rjmp	.-18     	; 0x1ae0 <main+0x194>
		}

		/* Second Case : if the CONTROL ECU send password is saved, a message will display on the screen based on that state for only
		 * one second */
		else if(choice == PASSWORD_IS_SAVED){
    1af2:	80 91 e8 01 	lds	r24, 0x01E8
    1af6:	82 31       	cpi	r24, 0x12	; 18
    1af8:	09 f0       	breq	.+2      	; 0x1afc <main+0x1b0>
    1afa:	96 c0       	rjmp	.+300    	; 0x1c28 <main+0x2dc>
			LCD_clearScreen();
    1afc:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"Password Is ");
    1b00:	23 ef       	ldi	r18, 0xF3	; 243
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	a9 01       	movw	r20, r18
    1b0a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,(uint8 *)"Saved ");
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	31 e0       	ldi	r19, 0x01	; 1
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	a9 01       	movw	r20, r18
    1b18:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ed 5b       	subi	r30, 0xBD	; 189
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	aa e7       	ldi	r26, 0x7A	; 122
    1b28:	b4 e4       	ldi	r27, 0x44	; 68
    1b2a:	80 83       	st	Z, r24
    1b2c:	91 83       	std	Z+1, r25	; 0x01
    1b2e:	a2 83       	std	Z+2, r26	; 0x02
    1b30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	8e 01       	movw	r16, r28
    1b34:	01 5c       	subi	r16, 0xC1	; 193
    1b36:	1f 4f       	sbci	r17, 0xFF	; 255
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ed 5b       	subi	r30, 0xBD	; 189
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	4a ef       	ldi	r20, 0xFA	; 250
    1b4c:	54 e4       	ldi	r21, 0x44	; 68
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	f8 01       	movw	r30, r16
    1b58:	80 83       	st	Z, r24
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	a2 83       	std	Z+2, r26	; 0x02
    1b5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b60:	fe 01       	movw	r30, r28
    1b62:	ff 96       	adiw	r30, 0x3f	; 63
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e8       	ldi	r20, 0x80	; 128
    1b72:	5f e3       	ldi	r21, 0x3F	; 63
    1b74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b78:	88 23       	and	r24, r24
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <main+0x23a>
		__ticks = 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9e af       	std	Y+62, r25	; 0x3e
    1b82:	8d af       	std	Y+61, r24	; 0x3d
    1b84:	46 c0       	rjmp	.+140    	; 0x1c12 <main+0x2c6>
	else if (__tmp > 65535)
    1b86:	fe 01       	movw	r30, r28
    1b88:	ff 96       	adiw	r30, 0x3f	; 63
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	64 f5       	brge	.+88     	; 0x1bfa <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	ed 5b       	subi	r30, 0xBD	; 189
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9e af       	std	Y+62, r25	; 0x3e
    1bce:	8d af       	std	Y+61, r24	; 0x3d
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <main+0x2a4>
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9c af       	std	Y+60, r25	; 0x3c
    1bd8:	8b af       	std	Y+59, r24	; 0x3b
    1bda:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bdc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <main+0x292>
    1be2:	9c af       	std	Y+60, r25	; 0x3c
    1be4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9e af       	std	Y+62, r25	; 0x3e
    1bee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bf2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <main+0x286>
    1bf8:	73 cf       	rjmp	.-282    	; 0x1ae0 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ff 96       	adiw	r30, 0x3f	; 63
    1bfe:	60 81       	ld	r22, Z
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e af       	std	Y+62, r25	; 0x3e
    1c10:	8d af       	std	Y+61, r24	; 0x3d
    1c12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c16:	9a af       	std	Y+58, r25	; 0x3a
    1c18:	89 af       	std	Y+57, r24	; 0x39
    1c1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <main+0x2d2>
    1c22:	9a af       	std	Y+58, r25	; 0x3a
    1c24:	89 af       	std	Y+57, r24	; 0x39
    1c26:	5c cf       	rjmp	.-328    	; 0x1ae0 <main+0x194>
			_delay_ms(1000);
		}

		/* Third Case : if the CONTROL ECU send password is wrong, a message will display on the screen based on that state for only
		 * one second */
		else if(choice == PASSWORD_IS_WRONG){
    1c28:	80 91 e8 01 	lds	r24, 0x01E8
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <main+0x2e6>
    1c30:	83 c0       	rjmp	.+262    	; 0x1d38 <main+0x3ec>
			LCD_clearScreen();
    1c32:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"Please Enter the");
    1c36:	27 e0       	ldi	r18, 0x07	; 7
    1c38:	31 e0       	ldi	r19, 0x01	; 1
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	a9 01       	movw	r20, r18
    1c40:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,(uint8 *)"Correct Password");
    1c44:	28 e1       	ldi	r18, 0x18	; 24
    1c46:	31 e0       	ldi	r19, 0x01	; 1
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	a9 01       	movw	r20, r18
    1c4e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	aa e7       	ldi	r26, 0x7A	; 122
    1c58:	b4 e4       	ldi	r27, 0x44	; 68
    1c5a:	8d ab       	std	Y+53, r24	; 0x35
    1c5c:	9e ab       	std	Y+54, r25	; 0x36
    1c5e:	af ab       	std	Y+55, r26	; 0x37
    1c60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6d a9       	ldd	r22, Y+53	; 0x35
    1c64:	7e a9       	ldd	r23, Y+54	; 0x36
    1c66:	8f a9       	ldd	r24, Y+55	; 0x37
    1c68:	98 ad       	ldd	r25, Y+56	; 0x38
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a ef       	ldi	r20, 0xFA	; 250
    1c70:	54 e4       	ldi	r21, 0x44	; 68
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	89 ab       	std	Y+49, r24	; 0x31
    1c7c:	9a ab       	std	Y+50, r25	; 0x32
    1c7e:	ab ab       	std	Y+51, r26	; 0x33
    1c80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c82:	69 a9       	ldd	r22, Y+49	; 0x31
    1c84:	7a a9       	ldd	r23, Y+50	; 0x32
    1c86:	8b a9       	ldd	r24, Y+51	; 0x33
    1c88:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <main+0x358>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	98 ab       	std	Y+48, r25	; 0x30
    1ca0:	8f a7       	std	Y+47, r24	; 0x2f
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <main+0x3d6>
	else if (__tmp > 65535)
    1ca4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca8:	8b a9       	ldd	r24, Y+51	; 0x33
    1caa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <main+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6d a9       	ldd	r22, Y+53	; 0x35
    1cbe:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc0:	8f a9       	ldd	r24, Y+55	; 0x37
    1cc2:	98 ad       	ldd	r25, Y+56	; 0x38
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	98 ab       	std	Y+48, r25	; 0x30
    1ce2:	8f a7       	std	Y+47, r24	; 0x2f
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <main+0x3b8>
    1ce6:	88 ec       	ldi	r24, 0xC8	; 200
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9e a7       	std	Y+46, r25	; 0x2e
    1cec:	8d a7       	std	Y+45, r24	; 0x2d
    1cee:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cf0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <main+0x3a6>
    1cf6:	9e a7       	std	Y+46, r25	; 0x2e
    1cf8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	98 ab       	std	Y+48, r25	; 0x30
    1d02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d06:	98 a9       	ldd	r25, Y+48	; 0x30
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <main+0x39a>
    1d0c:	e9 ce       	rjmp	.-558    	; 0x1ae0 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d10:	7a a9       	ldd	r23, Y+50	; 0x32
    1d12:	8b a9       	ldd	r24, Y+51	; 0x33
    1d14:	9c a9       	ldd	r25, Y+52	; 0x34
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	98 ab       	std	Y+48, r25	; 0x30
    1d20:	8f a7       	std	Y+47, r24	; 0x2f
    1d22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d24:	98 a9       	ldd	r25, Y+48	; 0x30
    1d26:	9c a7       	std	Y+44, r25	; 0x2c
    1d28:	8b a7       	std	Y+43, r24	; 0x2b
    1d2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <main+0x3e2>
    1d32:	9c a7       	std	Y+44, r25	; 0x2c
    1d34:	8b a7       	std	Y+43, r24	; 0x2b
    1d36:	d4 ce       	rjmp	.-600    	; 0x1ae0 <main+0x194>
			_delay_ms(1000);
		}

		/* Fourth Case : if the CONTROL ECU send password is right(open door), a message will display on the screen based on that state
		 *  for only one second */
		else if(choice == PASSWORD_IS_RIGHT_OPEN){
    1d38:	80 91 e8 01 	lds	r24, 0x01E8
    1d3c:	83 31       	cpi	r24, 0x13	; 19
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <main+0x3f6>
    1d40:	83 c0       	rjmp	.+262    	; 0x1e48 <main+0x4fc>
			LCD_clearScreen();
    1d42:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"Pass. is right");
    1d46:	29 e2       	ldi	r18, 0x29	; 41
    1d48:	31 e0       	ldi	r19, 0x01	; 1
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	a9 01       	movw	r20, r18
    1d50:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,(uint8 *)"Door will open ");
    1d54:	28 e3       	ldi	r18, 0x38	; 56
    1d56:	31 e0       	ldi	r19, 0x01	; 1
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	a9 01       	movw	r20, r18
    1d5e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	aa e7       	ldi	r26, 0x7A	; 122
    1d68:	b4 e4       	ldi	r27, 0x44	; 68
    1d6a:	8f a3       	std	Y+39, r24	; 0x27
    1d6c:	98 a7       	std	Y+40, r25	; 0x28
    1d6e:	a9 a7       	std	Y+41, r26	; 0x29
    1d70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6f a1       	ldd	r22, Y+39	; 0x27
    1d74:	78 a5       	ldd	r23, Y+40	; 0x28
    1d76:	89 a5       	ldd	r24, Y+41	; 0x29
    1d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a ef       	ldi	r20, 0xFA	; 250
    1d80:	54 e4       	ldi	r21, 0x44	; 68
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8b a3       	std	Y+35, r24	; 0x23
    1d8c:	9c a3       	std	Y+36, r25	; 0x24
    1d8e:	ad a3       	std	Y+37, r26	; 0x25
    1d90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d92:	6b a1       	ldd	r22, Y+35	; 0x23
    1d94:	7c a1       	ldd	r23, Y+36	; 0x24
    1d96:	8d a1       	ldd	r24, Y+37	; 0x25
    1d98:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <main+0x468>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9a a3       	std	Y+34, r25	; 0x22
    1db0:	89 a3       	std	Y+33, r24	; 0x21
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <main+0x4e6>
	else if (__tmp > 65535)
    1db4:	6b a1       	ldd	r22, Y+35	; 0x23
    1db6:	7c a1       	ldd	r23, Y+36	; 0x24
    1db8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dba:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <main+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dce:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9a a3       	std	Y+34, r25	; 0x22
    1df2:	89 a3       	std	Y+33, r24	; 0x21
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <main+0x4c8>
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	98 a3       	std	Y+32, r25	; 0x20
    1dfc:	8f 8f       	std	Y+31, r24	; 0x1f
    1dfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e00:	98 a1       	ldd	r25, Y+32	; 0x20
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <main+0x4b6>
    1e06:	98 a3       	std	Y+32, r25	; 0x20
    1e08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9a a3       	std	Y+34, r25	; 0x22
    1e12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	89 a1       	ldd	r24, Y+33	; 0x21
    1e16:	9a a1       	ldd	r25, Y+34	; 0x22
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <main+0x4aa>
    1e1c:	61 ce       	rjmp	.-830    	; 0x1ae0 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e20:	7c a1       	ldd	r23, Y+36	; 0x24
    1e22:	8d a1       	ldd	r24, Y+37	; 0x25
    1e24:	9e a1       	ldd	r25, Y+38	; 0x26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9a a3       	std	Y+34, r25	; 0x22
    1e30:	89 a3       	std	Y+33, r24	; 0x21
    1e32:	89 a1       	ldd	r24, Y+33	; 0x21
    1e34:	9a a1       	ldd	r25, Y+34	; 0x22
    1e36:	9e 8f       	std	Y+30, r25	; 0x1e
    1e38:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <main+0x4f2>
    1e42:	9e 8f       	std	Y+30, r25	; 0x1e
    1e44:	8d 8f       	std	Y+29, r24	; 0x1d
    1e46:	4c ce       	rjmp	.-872    	; 0x1ae0 <main+0x194>
			_delay_ms(1000);
		}

		/* Fifth Case : if the CONTROL ECU send password is right(setting a new password), a message will display on the screen based
		 *  on that state for only one second */
		else if(choice == PASSWORD_IS_RIGHT){
    1e48:	80 91 e8 01 	lds	r24, 0x01E8
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <main+0x506>
    1e50:	83 c0       	rjmp	.+262    	; 0x1f58 <main+0x60c>
			LCD_clearScreen();
    1e52:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"Pass. is right");
    1e56:	29 e2       	ldi	r18, 0x29	; 41
    1e58:	31 e0       	ldi	r19, 0x01	; 1
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,(uint8 *)"Setting new pass");
    1e64:	28 e4       	ldi	r18, 0x48	; 72
    1e66:	31 e0       	ldi	r19, 0x01	; 1
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	a9 01       	movw	r20, r18
    1e6e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	aa e7       	ldi	r26, 0x7A	; 122
    1e78:	b4 e4       	ldi	r27, 0x44	; 68
    1e7a:	89 8f       	std	Y+25, r24	; 0x19
    1e7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	69 8d       	ldd	r22, Y+25	; 0x19
    1e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a ef       	ldi	r20, 0xFA	; 250
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8d 8b       	std	Y+21, r24	; 0x15
    1e9c:	9e 8b       	std	Y+22, r25	; 0x16
    1e9e:	af 8b       	std	Y+23, r26	; 0x17
    1ea0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <main+0x578>
		__ticks = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 8b       	std	Y+20, r25	; 0x14
    1ec0:	8b 8b       	std	Y+19, r24	; 0x13
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <main+0x5f6>
	else if (__tmp > 65535)
    1ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	4c f5       	brge	.+82     	; 0x1f2e <main+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9c 8b       	std	Y+20, r25	; 0x14
    1f02:	8b 8b       	std	Y+19, r24	; 0x13
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <main+0x5d8>
    1f06:	88 ec       	ldi	r24, 0xC8	; 200
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9a 8b       	std	Y+18, r25	; 0x12
    1f0c:	89 8b       	std	Y+17, r24	; 0x11
    1f0e:	89 89       	ldd	r24, Y+17	; 0x11
    1f10:	9a 89       	ldd	r25, Y+18	; 0x12
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <main+0x5c6>
    1f16:	9a 8b       	std	Y+18, r25	; 0x12
    1f18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9c 8b       	std	Y+20, r25	; 0x14
    1f22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	8b 89       	ldd	r24, Y+19	; 0x13
    1f26:	9c 89       	ldd	r25, Y+20	; 0x14
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	69 f7       	brne	.-38     	; 0x1f06 <main+0x5ba>
    1f2c:	d9 cd       	rjmp	.-1102   	; 0x1ae0 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f30:	7e 89       	ldd	r23, Y+22	; 0x16
    1f32:	8f 89       	ldd	r24, Y+23	; 0x17
    1f34:	98 8d       	ldd	r25, Y+24	; 0x18
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9c 8b       	std	Y+20, r25	; 0x14
    1f40:	8b 8b       	std	Y+19, r24	; 0x13
    1f42:	8b 89       	ldd	r24, Y+19	; 0x13
    1f44:	9c 89       	ldd	r25, Y+20	; 0x14
    1f46:	98 8b       	std	Y+16, r25	; 0x10
    1f48:	8f 87       	std	Y+15, r24	; 0x0f
    1f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4c:	98 89       	ldd	r25, Y+16	; 0x10
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <main+0x602>
    1f52:	98 8b       	std	Y+16, r25	; 0x10
    1f54:	8f 87       	std	Y+15, r24	; 0x0f
    1f56:	c4 cd       	rjmp	.-1144   	; 0x1ae0 <main+0x194>
			_delay_ms(1000);
		}

		/* Sixth Case : if the CONTROL ECU send display the menu, the HMI ECU will call the display menu function */
		else if(choice== DISPLAY_MENU){
    1f58:	80 91 e8 01 	lds	r24, 0x01E8
    1f5c:	85 30       	cpi	r24, 0x05	; 5
    1f5e:	19 f4       	brne	.+6      	; 0x1f66 <main+0x61a>
			/* Displaying the menu to ask the user which choice he want*/
			displayMenu();
    1f60:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <displayMenu>
    1f64:	bd cd       	rjmp	.-1158   	; 0x1ae0 <main+0x194>
		}

		/* Seventh Case : if the CONTROL ECU send get choice from user, the HMI ECU will call the get choice from user function*/
		else if(choice == GET_CHOICE){
    1f66:	80 91 e8 01 	lds	r24, 0x01E8
    1f6a:	86 30       	cpi	r24, 0x06	; 6
    1f6c:	29 f4       	brne	.+10     	; 0x1f78 <main+0x62c>
			getChoiceFromUser();
    1f6e:	0e 94 ed 0b 	call	0x17da	; 0x17da <getChoiceFromUser>
			mc1SendChoice();
    1f72:	0e 94 76 0c 	call	0x18ec	; 0x18ec <mc1SendChoice>
    1f76:	b4 cd       	rjmp	.-1176   	; 0x1ae0 <main+0x194>
		}

		/* Eighth Case : if the CONTROL ECU send not valid choice , a message will display on the screen based on that state for only
		 * one second */
		else if(choice == NOT_VALID_CHOICE){
    1f78:	80 91 e8 01 	lds	r24, 0x01E8
    1f7c:	84 31       	cpi	r24, 0x14	; 20
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <main+0x636>
    1f80:	83 c0       	rjmp	.+262    	; 0x2088 <main+0x73c>
			LCD_clearScreen();
    1f82:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"Not Valid Choice");
    1f86:	29 e5       	ldi	r18, 0x59	; 89
    1f88:	31 e0       	ldi	r19, 0x01	; 1
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	a9 01       	movw	r20, r18
    1f90:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,(uint8 *)"Re-Enter again  ");
    1f94:	2a e6       	ldi	r18, 0x6A	; 106
    1f96:	31 e0       	ldi	r19, 0x01	; 1
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	a9 01       	movw	r20, r18
    1f9e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	aa e7       	ldi	r26, 0x7A	; 122
    1fa8:	b4 e4       	ldi	r27, 0x44	; 68
    1faa:	8b 87       	std	Y+11, r24	; 0x0b
    1fac:	9c 87       	std	Y+12, r25	; 0x0c
    1fae:	ad 87       	std	Y+13, r26	; 0x0d
    1fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4a ef       	ldi	r20, 0xFA	; 250
    1fc0:	54 e4       	ldi	r21, 0x44	; 68
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8f 83       	std	Y+7, r24	; 0x07
    1fcc:	98 87       	std	Y+8, r25	; 0x08
    1fce:	a9 87       	std	Y+9, r26	; 0x09
    1fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd4:	78 85       	ldd	r23, Y+8	; 0x08
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5f e3       	ldi	r21, 0x3F	; 63
    1fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <main+0x6a8>
		__ticks = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <main+0x726>
	else if (__tmp > 65535)
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	4c f5       	brge	.+82     	; 0x205e <main+0x712>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <main+0x708>
    2036:	88 ec       	ldi	r24, 0xC8	; 200
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <main+0x6f6>
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <main+0x6ea>
    205c:	41 cd       	rjmp	.-1406   	; 0x1ae0 <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <main+0x732>
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	2c cd       	rjmp	.-1448   	; 0x1ae0 <main+0x194>
			_delay_ms(1000);

		}

		/* Ninth Case : if the CONTROL ECU send get choice , the HMI ECU will call the get and send password function */
		else if (choice == GET_PASSWORD){
    2088:	80 91 e8 01 	lds	r24, 0x01E8
    208c:	82 30       	cpi	r24, 0x02	; 2
    208e:	19 f4       	brne	.+6      	; 0x2096 <main+0x74a>
			getSendPassword();
    2090:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <getSendPassword>
    2094:	25 cd       	rjmp	.-1462   	; 0x1ae0 <main+0x194>
		}

		/* Tenth Case : if the CONTROL ECU send lock the system , a message will display on the screen for 1-minute */
		else if(choice == LOCK_THE_SYSTEM){
    2096:	80 91 e8 01 	lds	r24, 0x01E8
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	d1 f4       	brne	.+52     	; 0x20d2 <main+0x786>
			/* put zero in the g_timerCount to start from zero (for safety) */
			g_timerCount=0;
    209e:	10 92 e9 01 	sts	0x01E9, r1
			/* Clearing the screen*/
			LCD_clearScreen();
    20a2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			/* Display the lock message for 1 minute*/
			LCD_displayStringRowColumn(0,0,(uint8 *)"System Is Locked");
    20a6:	2b e7       	ldi	r18, 0x7B	; 123
    20a8:	31 e0       	ldi	r19, 0x01	; 1
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	a9 01       	movw	r20, r18
    20b0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			/* Initialize the TIMER1 by the structure that control the lock time*/
			TIMER_init(&configtype1);
    20b4:	ce 01       	movw	r24, r28
    20b6:	89 5b       	subi	r24, 0xB9	; 185
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	0e 94 31 17 	call	0x2e62	; 0x2e62 <TIMER_init>
			/* while loop until the timer reach a 1 minute*/
			while(g_timerCount<10);
    20be:	80 91 e9 01 	lds	r24, 0x01E9
    20c2:	8a 30       	cpi	r24, 0x0A	; 10
    20c4:	e0 f3       	brcs	.-8      	; 0x20be <main+0x772>
			/* De-initializing the timer */
			TIMER_DeInit(TIMER1);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	0e 94 06 18 	call	0x300c	; 0x300c <TIMER_DeInit>
			/* put zero in the g_timerCount for the next time*/
			g_timerCount=0;
    20cc:	10 92 e9 01 	sts	0x01E9, r1
    20d0:	07 cd       	rjmp	.-1522   	; 0x1ae0 <main+0x194>
		}

		/* Eleventh case : if the CONTROL ECU door is opening , a message will display on the screen based on that state for a
		 * 15 seconds */
		else if(choice == DOOR_IS_OPENING){
    20d2:	80 91 e8 01 	lds	r24, 0x01E8
    20d6:	87 30       	cpi	r24, 0x07	; 7
    20d8:	a9 f4       	brne	.+42     	; 0x2104 <main+0x7b8>
			/* put zero in the g_timerCount to start from zero (for safety) */
			g_timerCount=0;
    20da:	10 92 e9 01 	sts	0x01E9, r1
			/* Initialize the TIMER1 by the structure that control the door time (opening and closing) */
			TIMER_init(&configtype2);
    20de:	ce 01       	movw	r24, r28
    20e0:	82 5b       	subi	r24, 0xB2	; 178
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <TIMER_init>
			/* Clearing the screen*/
			LCD_clearScreen();
    20e8:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"DOOR IS OPENING");
    20ec:	2c e8       	ldi	r18, 0x8C	; 140
    20ee:	31 e0       	ldi	r19, 0x01	; 1
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	a9 01       	movw	r20, r18
    20f6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			/* looping until it reach 15 seconds (Opening time = 15 seconds)*/
			while(g_timerCount < 30);
    20fa:	80 91 e9 01 	lds	r24, 0x01E9
    20fe:	8e 31       	cpi	r24, 0x1E	; 30
    2100:	e0 f3       	brcs	.-8      	; 0x20fa <main+0x7ae>
    2102:	ee cc       	rjmp	.-1572   	; 0x1ae0 <main+0x194>
		}

		/* 	Twelfth case : if the CONTROL ECU door is opened , a message will display on the screen based on that state for a
		 *  3 seconds */
		else if(choice == DOOR_IS_OPENED){
    2104:	80 91 e8 01 	lds	r24, 0x01E8
    2108:	88 30       	cpi	r24, 0x08	; 8
    210a:	71 f4       	brne	.+28     	; 0x2128 <main+0x7dc>
			/* Clearing the screen for a new message */
			LCD_clearScreen();
    210c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"DOOR IS OPENED");
    2110:	2c e9       	ldi	r18, 0x9C	; 156
    2112:	31 e0       	ldi	r19, 0x01	; 1
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	a9 01       	movw	r20, r18
    211a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			/* looping until it reach 18 seconds (Holding time = 3 seconds)
			 * Why 18 seconds ??
			 * --> 15 seconds for the Opening time and 3 second for the holding time
			 * */
			while(g_timerCount < 39);
    211e:	80 91 e9 01 	lds	r24, 0x01E9
    2122:	87 32       	cpi	r24, 0x27	; 39
    2124:	e0 f3       	brcs	.-8      	; 0x211e <main+0x7d2>
    2126:	dc cc       	rjmp	.-1608   	; 0x1ae0 <main+0x194>
		}

		/*  Thirteenth case : if the CONTROL ECU door is closing , a message will display on the screen based on that state for a
		 *  15 seconds */
		else if(choice == DOOR_IS_CLOSING){
    2128:	80 91 e8 01 	lds	r24, 0x01E8
    212c:	89 30       	cpi	r24, 0x09	; 9
    212e:	71 f4       	brne	.+28     	; 0x214c <main+0x800>
			/* Clearing the screen for a new message */
			LCD_clearScreen();
    2130:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"DOOR IS CLOSING");
    2134:	2b ea       	ldi	r18, 0xAB	; 171
    2136:	31 e0       	ldi	r19, 0x01	; 1
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	a9 01       	movw	r20, r18
    213e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			/* looping until it reach 33 seconds (Closing time = 15 seconds)
			 * Why 33 seconds ??
			 * --> 15 seconds for the Opening time, 3 second for the holding time and 15 seconds for the closing
			 *  time
			 * */
			while(g_timerCount < 66);
    2142:	80 91 e9 01 	lds	r24, 0x01E9
    2146:	82 34       	cpi	r24, 0x42	; 66
    2148:	e0 f3       	brcs	.-8      	; 0x2142 <main+0x7f6>
    214a:	ca cc       	rjmp	.-1644   	; 0x1ae0 <main+0x194>
		}

		/*  Fourteenth case : if the CONTROL ECU door is closed , a message will display on the screen based on that state for a
		 *  2 seconds */
		else if(choice == DOOR_IS_CLOSED){
    214c:	80 91 e8 01 	lds	r24, 0x01E8
    2150:	81 31       	cpi	r24, 0x11	; 17
    2152:	09 f0       	breq	.+2      	; 0x2156 <main+0x80a>
    2154:	c5 cc       	rjmp	.-1654   	; 0x1ae0 <main+0x194>
			/* Clearing the screen for a new message */
			LCD_clearScreen();
    2156:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,(uint8 *)"DOOR IS CLOSED");
    215a:	2b eb       	ldi	r18, 0xBB	; 187
    215c:	31 e0       	ldi	r19, 0x01	; 1
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_displayStringRowColumn>
			/*waiting 2-second to make the message display on the screen*/
			while(g_timerCount < 70);
    2168:	80 91 e9 01 	lds	r24, 0x01E9
    216c:	86 34       	cpi	r24, 0x46	; 70
    216e:	e0 f3       	brcs	.-8      	; 0x2168 <main+0x81c>
			/* De-init the TIMER1 */
			TIMER_DeInit(TIMER1);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	0e 94 06 18 	call	0x300c	; 0x300c <TIMER_DeInit>
			/* put zero into the g_timerCount for the next time */
			g_timerCount=0;
    2176:	10 92 e9 01 	sts	0x01E9, r1
    217a:	b2 cc       	rjmp	.-1692   	; 0x1ae0 <main+0x194>

0000217c <KEYPAD_getPressedKey>:
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8);
#elif(NUM_OF_COLS ==3)
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8);
#endif

uint8 KEYPAD_getPressedKey(void){
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	00 d0       	rcall	.+0      	; 0x2182 <KEYPAD_getPressedKey+0x6>
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col,keypad_port_value=0; // local variables for the keypad
    2188:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		/* we need to output logic(high or low) to a specific col and loop for the rows
		 * */
		for(col=0;col<NUM_OF_COLS;col++){
    218a:	1a 82       	std	Y+2, r1	; 0x02
    218c:	43 c0       	rjmp	.+134    	; 0x2214 <KEYPAD_getPressedKey+0x98>
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col,PIN_OUTPUT);
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	98 2f       	mov	r25, r24
    219a:	9c 5f       	subi	r25, 0xFC	; 252
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	69 2f       	mov	r22, r25
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			keypad_port_value=~(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 01       	movw	r18, r24
    21ae:	2c 5f       	subi	r18, 0xFC	; 252
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <KEYPAD_getPressedKey+0x40>
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	2a 95       	dec	r18
    21be:	e2 f7       	brpl	.-8      	; 0x21b8 <KEYPAD_getPressedKey+0x3c>
    21c0:	80 95       	com	r24
    21c2:	89 83       	std	Y+1, r24	; 0x01
#else
			keypad_port_value=(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	69 81       	ldd	r22, Y+1	; 0x01
    21c8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePort>
			for(row=0;row<NUM_OF_ROWS;row++){
    21cc:	1b 82       	std	Y+3, r1	; 0x03
    21ce:	1c c0       	rjmp	.+56     	; 0x2208 <KEYPAD_getPressedKey+0x8c>
				if(GPIO_readPin(KEYPAD_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row) == KEYPAD_BUTTON_PRESSED){
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	6b 81       	ldd	r22, Y+3	; 0x03
    21d4:	0e 94 01 08 	call	0x1002	; 0x1002 <GPIO_readPin>
    21d8:	88 23       	and	r24, r24
    21da:	99 f4       	brne	.+38     	; 0x2202 <KEYPAD_getPressedKey+0x86>
#if(NUM_OF_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*NUM_OF_COLS)+col+1);
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	98 2f       	mov	r25, r24
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	89 0f       	add	r24, r25
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	0e 94 0f 11 	call	0x221e	; 0x221e <KEYPAD_4x4_adjustKeyNumber>

			}

		}
	}
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret
			keypad_port_value=~(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
#else
			keypad_port_value=(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
			for(row=0;row<NUM_OF_ROWS;row++){
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	84 30       	cpi	r24, 0x04	; 4
    220c:	08 f3       	brcs	.-62     	; 0x21d0 <KEYPAD_getPressedKey+0x54>
uint8 KEYPAD_getPressedKey(void){
	uint8 row,col,keypad_port_value=0; // local variables for the keypad
	while(1){
		/* we need to output logic(high or low) to a specific col and loop for the rows
		 * */
		for(col=0;col<NUM_OF_COLS;col++){
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	8a 83       	std	Y+2, r24	; 0x02
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	84 30       	cpi	r24, 0x04	; 4
    2218:	08 f4       	brcc	.+2      	; 0x221c <KEYPAD_getPressedKey+0xa0>
    221a:	b9 cf       	rjmp	.-142    	; 0x218e <KEYPAD_getPressedKey+0x12>
    221c:	b6 cf       	rjmp	.-148    	; 0x218a <KEYPAD_getPressedKey+0xe>

0000221e <KEYPAD_4x4_adjustKeyNumber>:

#if(NUM_OF_COLS == 4)
/*this function is called by the modules itself so the application layer doesn't have the right to call it
 * so, we must make the function static..
 * */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number){
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	00 d0       	rcall	.+0      	; 0x2224 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2224:	00 d0       	rcall	.+0      	; 0x2226 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button=0;
    222c:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number){
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	3c 83       	std	Y+4, r19	; 0x04
    2236:	2b 83       	std	Y+3, r18	; 0x03
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	88 30       	cpi	r24, 0x08	; 8
    223e:	91 05       	cpc	r25, r1
    2240:	09 f4       	brne	.+2      	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2242:	70 c0       	rjmp	.+224    	; 0x2324 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	29 30       	cpi	r18, 0x09	; 9
    224a:	31 05       	cpc	r19, r1
    224c:	5c f5       	brge	.+86     	; 0x22a4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	84 30       	cpi	r24, 0x04	; 4
    2254:	91 05       	cpc	r25, r1
    2256:	09 f4       	brne	.+2      	; 0x225a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2258:	59 c0       	rjmp	.+178    	; 0x230c <KEYPAD_4x4_adjustKeyNumber+0xee>
    225a:	2b 81       	ldd	r18, Y+3	; 0x03
    225c:	3c 81       	ldd	r19, Y+4	; 0x04
    225e:	25 30       	cpi	r18, 0x05	; 5
    2260:	31 05       	cpc	r19, r1
    2262:	9c f4       	brge	.+38     	; 0x228a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	82 30       	cpi	r24, 0x02	; 2
    226a:	91 05       	cpc	r25, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <KEYPAD_4x4_adjustKeyNumber+0x52>
    226e:	48 c0       	rjmp	.+144    	; 0x2300 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2270:	2b 81       	ldd	r18, Y+3	; 0x03
    2272:	3c 81       	ldd	r19, Y+4	; 0x04
    2274:	23 30       	cpi	r18, 0x03	; 3
    2276:	31 05       	cpc	r19, r1
    2278:	0c f0       	brlt	.+2      	; 0x227c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    227a:	45 c0       	rjmp	.+138    	; 0x2306 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	91 05       	cpc	r25, r1
    2284:	09 f4       	brne	.+2      	; 0x2288 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2286:	39 c0       	rjmp	.+114    	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2288:	67 c0       	rjmp	.+206    	; 0x2358 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    228a:	2b 81       	ldd	r18, Y+3	; 0x03
    228c:	3c 81       	ldd	r19, Y+4	; 0x04
    228e:	26 30       	cpi	r18, 0x06	; 6
    2290:	31 05       	cpc	r19, r1
    2292:	09 f4       	brne	.+2      	; 0x2296 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2294:	41 c0       	rjmp	.+130    	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	87 30       	cpi	r24, 0x07	; 7
    229c:	91 05       	cpc	r25, r1
    229e:	0c f0       	brlt	.+2      	; 0x22a2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    22a0:	3e c0       	rjmp	.+124    	; 0x231e <KEYPAD_4x4_adjustKeyNumber+0x100>
    22a2:	37 c0       	rjmp	.+110    	; 0x2312 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    22a4:	2b 81       	ldd	r18, Y+3	; 0x03
    22a6:	3c 81       	ldd	r19, Y+4	; 0x04
    22a8:	2c 30       	cpi	r18, 0x0C	; 12
    22aa:	31 05       	cpc	r19, r1
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    22ae:	46 c0       	rjmp	.+140    	; 0x233c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	8d 30       	cpi	r24, 0x0D	; 13
    22b6:	91 05       	cpc	r25, r1
    22b8:	5c f4       	brge	.+22     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    22ba:	2b 81       	ldd	r18, Y+3	; 0x03
    22bc:	3c 81       	ldd	r19, Y+4	; 0x04
    22be:	2a 30       	cpi	r18, 0x0A	; 10
    22c0:	31 05       	cpc	r19, r1
    22c2:	b1 f1       	breq	.+108    	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x112>
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	8b 30       	cpi	r24, 0x0B	; 11
    22ca:	91 05       	cpc	r25, r1
    22cc:	a4 f5       	brge	.+104    	; 0x2336 <KEYPAD_4x4_adjustKeyNumber+0x118>
    22ce:	2d c0       	rjmp	.+90     	; 0x232a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    22d0:	2b 81       	ldd	r18, Y+3	; 0x03
    22d2:	3c 81       	ldd	r19, Y+4	; 0x04
    22d4:	2e 30       	cpi	r18, 0x0E	; 14
    22d6:	31 05       	cpc	r19, r1
    22d8:	b9 f1       	breq	.+110    	; 0x2348 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	8e 30       	cpi	r24, 0x0E	; 14
    22e0:	91 05       	cpc	r25, r1
    22e2:	7c f1       	brlt	.+94     	; 0x2342 <KEYPAD_4x4_adjustKeyNumber+0x124>
    22e4:	2b 81       	ldd	r18, Y+3	; 0x03
    22e6:	3c 81       	ldd	r19, Y+4	; 0x04
    22e8:	2f 30       	cpi	r18, 0x0F	; 15
    22ea:	31 05       	cpc	r19, r1
    22ec:	79 f1       	breq	.+94     	; 0x234c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	80 31       	cpi	r24, 0x10	; 16
    22f4:	91 05       	cpc	r25, r1
    22f6:	69 f1       	breq	.+90     	; 0x2352 <KEYPAD_4x4_adjustKeyNumber+0x134>
    22f8:	2f c0       	rjmp	.+94     	; 0x2358 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case 1:
		keypad_button=7;
    22fa:	87 e0       	ldi	r24, 0x07	; 7
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	2e c0       	rjmp	.+92     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button=8;
    2300:	88 e0       	ldi	r24, 0x08	; 8
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	2b c0       	rjmp	.+86     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button=9;
    2306:	89 e0       	ldi	r24, 0x09	; 9
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	28 c0       	rjmp	.+80     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button='/';
    230c:	8f e2       	ldi	r24, 0x2F	; 47
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	25 c0       	rjmp	.+74     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button=4;
    2312:	84 e0       	ldi	r24, 0x04	; 4
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	22 c0       	rjmp	.+68     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button=5;
    2318:	85 e0       	ldi	r24, 0x05	; 5
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	1f c0       	rjmp	.+62     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button=6;
    231e:	86 e0       	ldi	r24, 0x06	; 6
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	1c c0       	rjmp	.+56     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button='*';
    2324:	8a e2       	ldi	r24, 0x2A	; 42
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	19 c0       	rjmp	.+50     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button=1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	16 c0       	rjmp	.+44     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button=2;
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	13 c0       	rjmp	.+38     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button=3;
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	10 c0       	rjmp	.+32     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button='-';
    233c:	8d e2       	ldi	r24, 0x2D	; 45
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	0d c0       	rjmp	.+26     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button=13;
    2342:	8d e0       	ldi	r24, 0x0D	; 13
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	0a c0       	rjmp	.+20     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button=0;
    2348:	19 82       	std	Y+1, r1	; 0x01
    234a:	08 c0       	rjmp	.+16     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button='=';
    234c:	8d e3       	ldi	r24, 0x3D	; 61
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	05 c0       	rjmp	.+10     	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button='+';
    2352:	8b e2       	ldi	r24, 0x2B	; 43
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	02 c0       	rjmp	.+4      	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    235c:	89 81       	ldd	r24, Y+1	; 0x01
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <LCD_sendCommand>:
#include<util/delay.h>
#include<stdlib.h>

/*
 * This function used when we want to send a coomand*/
void LCD_sendCommand(uint8 command){
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	e9 97       	sbiw	r28, 0x39	; 57
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	89 af       	std	Y+57, r24	; 0x39
#if(LCD_DATA_BITS_MODE == 4)
	uint8 lcd_port_value=0;
#endif
	/* clear register select pin*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2382:	83 e0       	ldi	r24, 0x03	; 3
    2384:	64 e0       	ldi	r22, 0x04	; 4
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_writePin>
	/* clear read write pin because we want to send a coomand so we need to write*/
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    238c:	83 e0       	ldi	r24, 0x03	; 3
    238e:	65 e0       	ldi	r22, 0x05	; 5
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_writePin>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	a0 e8       	ldi	r26, 0x80	; 128
    239c:	bf e3       	ldi	r27, 0x3F	; 63
    239e:	8d ab       	std	Y+53, r24	; 0x35
    23a0:	9e ab       	std	Y+54, r25	; 0x36
    23a2:	af ab       	std	Y+55, r26	; 0x37
    23a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a6:	6d a9       	ldd	r22, Y+53	; 0x35
    23a8:	7e a9       	ldd	r23, Y+54	; 0x36
    23aa:	8f a9       	ldd	r24, Y+55	; 0x37
    23ac:	98 ad       	ldd	r25, Y+56	; 0x38
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a ef       	ldi	r20, 0xFA	; 250
    23b4:	54 e4       	ldi	r21, 0x44	; 68
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	89 ab       	std	Y+49, r24	; 0x31
    23c0:	9a ab       	std	Y+50, r25	; 0x32
    23c2:	ab ab       	std	Y+51, r26	; 0x33
    23c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23c6:	69 a9       	ldd	r22, Y+49	; 0x31
    23c8:	7a a9       	ldd	r23, Y+50	; 0x32
    23ca:	8b a9       	ldd	r24, Y+51	; 0x33
    23cc:	9c a9       	ldd	r25, Y+52	; 0x34
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	5f e3       	ldi	r21, 0x3F	; 63
    23d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23da:	88 23       	and	r24, r24
    23dc:	2c f4       	brge	.+10     	; 0x23e8 <LCD_sendCommand+0x7c>
		__ticks = 1;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	98 ab       	std	Y+48, r25	; 0x30
    23e4:	8f a7       	std	Y+47, r24	; 0x2f
    23e6:	3f c0       	rjmp	.+126    	; 0x2466 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    23e8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ea:	7a a9       	ldd	r23, Y+50	; 0x32
    23ec:	8b a9       	ldd	r24, Y+51	; 0x33
    23ee:	9c a9       	ldd	r25, Y+52	; 0x34
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	3f ef       	ldi	r19, 0xFF	; 255
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	57 e4       	ldi	r21, 0x47	; 71
    23f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fc:	18 16       	cp	r1, r24
    23fe:	4c f5       	brge	.+82     	; 0x2452 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2400:	6d a9       	ldd	r22, Y+53	; 0x35
    2402:	7e a9       	ldd	r23, Y+54	; 0x36
    2404:	8f a9       	ldd	r24, Y+55	; 0x37
    2406:	98 ad       	ldd	r25, Y+56	; 0x38
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e2       	ldi	r20, 0x20	; 32
    240e:	51 e4       	ldi	r21, 0x41	; 65
    2410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	98 ab       	std	Y+48, r25	; 0x30
    2426:	8f a7       	std	Y+47, r24	; 0x2f
    2428:	0f c0       	rjmp	.+30     	; 0x2448 <LCD_sendCommand+0xdc>
    242a:	88 ec       	ldi	r24, 0xC8	; 200
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9e a7       	std	Y+46, r25	; 0x2e
    2430:	8d a7       	std	Y+45, r24	; 0x2d
    2432:	8d a5       	ldd	r24, Y+45	; 0x2d
    2434:	9e a5       	ldd	r25, Y+46	; 0x2e
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_sendCommand+0xca>
    243a:	9e a7       	std	Y+46, r25	; 0x2e
    243c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2440:	98 a9       	ldd	r25, Y+48	; 0x30
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	98 ab       	std	Y+48, r25	; 0x30
    2446:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2448:	8f a5       	ldd	r24, Y+47	; 0x2f
    244a:	98 a9       	ldd	r25, Y+48	; 0x30
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	69 f7       	brne	.-38     	; 0x242a <LCD_sendCommand+0xbe>
    2450:	14 c0       	rjmp	.+40     	; 0x247a <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2452:	69 a9       	ldd	r22, Y+49	; 0x31
    2454:	7a a9       	ldd	r23, Y+50	; 0x32
    2456:	8b a9       	ldd	r24, Y+51	; 0x33
    2458:	9c a9       	ldd	r25, Y+52	; 0x34
    245a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	98 ab       	std	Y+48, r25	; 0x30
    2464:	8f a7       	std	Y+47, r24	; 0x2f
    2466:	8f a5       	ldd	r24, Y+47	; 0x2f
    2468:	98 a9       	ldd	r25, Y+48	; 0x30
    246a:	9c a7       	std	Y+44, r25	; 0x2c
    246c:	8b a7       	std	Y+43, r24	; 0x2b
    246e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2470:	9c a5       	ldd	r25, Y+44	; 0x2c
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <LCD_sendCommand+0x106>
    2476:	9c a7       	std	Y+44, r25	; 0x2c
    2478:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay 1 microsecond because tas = 50 nanoseconds*/
	_delay_ms(1);
	/*set the enable pin */
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_HIGH);
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	66 e0       	ldi	r22, 0x06	; 6
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_writePin>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a0 e8       	ldi	r26, 0x80	; 128
    248a:	bf e3       	ldi	r27, 0x3F	; 63
    248c:	8f a3       	std	Y+39, r24	; 0x27
    248e:	98 a7       	std	Y+40, r25	; 0x28
    2490:	a9 a7       	std	Y+41, r26	; 0x29
    2492:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	6f a1       	ldd	r22, Y+39	; 0x27
    2496:	78 a5       	ldd	r23, Y+40	; 0x28
    2498:	89 a5       	ldd	r24, Y+41	; 0x29
    249a:	9a a5       	ldd	r25, Y+42	; 0x2a
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a ef       	ldi	r20, 0xFA	; 250
    24a2:	54 e4       	ldi	r21, 0x44	; 68
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8b a3       	std	Y+35, r24	; 0x23
    24ae:	9c a3       	std	Y+36, r25	; 0x24
    24b0:	ad a3       	std	Y+37, r26	; 0x25
    24b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24b4:	6b a1       	ldd	r22, Y+35	; 0x23
    24b6:	7c a1       	ldd	r23, Y+36	; 0x24
    24b8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ba:	9e a1       	ldd	r25, Y+38	; 0x26
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <LCD_sendCommand+0x16a>
		__ticks = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9a a3       	std	Y+34, r25	; 0x22
    24d2:	89 a3       	std	Y+33, r24	; 0x21
    24d4:	3f c0       	rjmp	.+126    	; 0x2554 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    24d6:	6b a1       	ldd	r22, Y+35	; 0x23
    24d8:	7c a1       	ldd	r23, Y+36	; 0x24
    24da:	8d a1       	ldd	r24, Y+37	; 0x25
    24dc:	9e a1       	ldd	r25, Y+38	; 0x26
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	4c f5       	brge	.+82     	; 0x2540 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	6f a1       	ldd	r22, Y+39	; 0x27
    24f0:	78 a5       	ldd	r23, Y+40	; 0x28
    24f2:	89 a5       	ldd	r24, Y+41	; 0x29
    24f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9a a3       	std	Y+34, r25	; 0x22
    2514:	89 a3       	std	Y+33, r24	; 0x21
    2516:	0f c0       	rjmp	.+30     	; 0x2536 <LCD_sendCommand+0x1ca>
    2518:	88 ec       	ldi	r24, 0xC8	; 200
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	98 a3       	std	Y+32, r25	; 0x20
    251e:	8f 8f       	std	Y+31, r24	; 0x1f
    2520:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2522:	98 a1       	ldd	r25, Y+32	; 0x20
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_sendCommand+0x1b8>
    2528:	98 a3       	std	Y+32, r25	; 0x20
    252a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	89 a1       	ldd	r24, Y+33	; 0x21
    252e:	9a a1       	ldd	r25, Y+34	; 0x22
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	9a a3       	std	Y+34, r25	; 0x22
    2534:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	89 a1       	ldd	r24, Y+33	; 0x21
    2538:	9a a1       	ldd	r25, Y+34	; 0x22
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	69 f7       	brne	.-38     	; 0x2518 <LCD_sendCommand+0x1ac>
    253e:	14 c0       	rjmp	.+40     	; 0x2568 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	6b a1       	ldd	r22, Y+35	; 0x23
    2542:	7c a1       	ldd	r23, Y+36	; 0x24
    2544:	8d a1       	ldd	r24, Y+37	; 0x25
    2546:	9e a1       	ldd	r25, Y+38	; 0x26
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9a a3       	std	Y+34, r25	; 0x22
    2552:	89 a3       	std	Y+33, r24	; 0x21
    2554:	89 a1       	ldd	r24, Y+33	; 0x21
    2556:	9a a1       	ldd	r25, Y+34	; 0x22
    2558:	9e 8f       	std	Y+30, r25	; 0x1e
    255a:	8d 8f       	std	Y+29, r24	; 0x1d
    255c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <LCD_sendCommand+0x1f4>
    2564:	9e 8f       	std	Y+30, r25	; 0x1e
    2566:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /*very important instructuon*/
	/*delay 1 microsecond beacuse tdh = 1 nanosecond*/
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE == 8)
	/*send the command to port that is connected to the data bus*/
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	69 ad       	ldd	r22, Y+57	; 0x39
    256c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePort>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	a0 e8       	ldi	r26, 0x80	; 128
    2576:	bf e3       	ldi	r27, 0x3F	; 63
    2578:	89 8f       	std	Y+25, r24	; 0x19
    257a:	9a 8f       	std	Y+26, r25	; 0x1a
    257c:	ab 8f       	std	Y+27, r26	; 0x1b
    257e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2580:	69 8d       	ldd	r22, Y+25	; 0x19
    2582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2584:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2586:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	4a ef       	ldi	r20, 0xFA	; 250
    258e:	54 e4       	ldi	r21, 0x44	; 68
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	8d 8b       	std	Y+21, r24	; 0x15
    259a:	9e 8b       	std	Y+22, r25	; 0x16
    259c:	af 8b       	std	Y+23, r26	; 0x17
    259e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25a0:	6d 89       	ldd	r22, Y+21	; 0x15
    25a2:	7e 89       	ldd	r23, Y+22	; 0x16
    25a4:	8f 89       	ldd	r24, Y+23	; 0x17
    25a6:	98 8d       	ldd	r25, Y+24	; 0x18
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e8       	ldi	r20, 0x80	; 128
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b4:	88 23       	and	r24, r24
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <LCD_sendCommand+0x256>
		__ticks = 1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9c 8b       	std	Y+20, r25	; 0x14
    25be:	8b 8b       	std	Y+19, r24	; 0x13
    25c0:	3f c0       	rjmp	.+126    	; 0x2640 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    25c2:	6d 89       	ldd	r22, Y+21	; 0x15
    25c4:	7e 89       	ldd	r23, Y+22	; 0x16
    25c6:	8f 89       	ldd	r24, Y+23	; 0x17
    25c8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	3f ef       	ldi	r19, 0xFF	; 255
    25ce:	4f e7       	ldi	r20, 0x7F	; 127
    25d0:	57 e4       	ldi	r21, 0x47	; 71
    25d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d6:	18 16       	cp	r1, r24
    25d8:	4c f5       	brge	.+82     	; 0x262c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25da:	69 8d       	ldd	r22, Y+25	; 0x19
    25dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e2       	ldi	r20, 0x20	; 32
    25e8:	51 e4       	ldi	r21, 0x41	; 65
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9c 8b       	std	Y+20, r25	; 0x14
    2600:	8b 8b       	std	Y+19, r24	; 0x13
    2602:	0f c0       	rjmp	.+30     	; 0x2622 <LCD_sendCommand+0x2b6>
    2604:	88 ec       	ldi	r24, 0xC8	; 200
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9a 8b       	std	Y+18, r25	; 0x12
    260a:	89 8b       	std	Y+17, r24	; 0x11
    260c:	89 89       	ldd	r24, Y+17	; 0x11
    260e:	9a 89       	ldd	r25, Y+18	; 0x12
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <LCD_sendCommand+0x2a4>
    2614:	9a 8b       	std	Y+18, r25	; 0x12
    2616:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2618:	8b 89       	ldd	r24, Y+19	; 0x13
    261a:	9c 89       	ldd	r25, Y+20	; 0x14
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	9c 8b       	std	Y+20, r25	; 0x14
    2620:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2622:	8b 89       	ldd	r24, Y+19	; 0x13
    2624:	9c 89       	ldd	r25, Y+20	; 0x14
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	69 f7       	brne	.-38     	; 0x2604 <LCD_sendCommand+0x298>
    262a:	14 c0       	rjmp	.+40     	; 0x2654 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262c:	6d 89       	ldd	r22, Y+21	; 0x15
    262e:	7e 89       	ldd	r23, Y+22	; 0x16
    2630:	8f 89       	ldd	r24, Y+23	; 0x17
    2632:	98 8d       	ldd	r25, Y+24	; 0x18
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	9c 8b       	std	Y+20, r25	; 0x14
    263e:	8b 8b       	std	Y+19, r24	; 0x13
    2640:	8b 89       	ldd	r24, Y+19	; 0x13
    2642:	9c 89       	ldd	r25, Y+20	; 0x14
    2644:	98 8b       	std	Y+16, r25	; 0x10
    2646:	8f 87       	std	Y+15, r24	; 0x0f
    2648:	8f 85       	ldd	r24, Y+15	; 0x0f
    264a:	98 89       	ldd	r25, Y+16	; 0x10
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <LCD_sendCommand+0x2e0>
    2650:	98 8b       	std	Y+16, r25	; 0x10
    2652:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay 1 microsecond because tdse=100 nanoseconds*/
	_delay_ms(1);
	/*to read the command the enable pin must be zero again*/
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /*very important instructuon*/
    2654:	83 e0       	ldi	r24, 0x03	; 3
    2656:	66 e0       	ldi	r22, 0x06	; 6
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_writePin>
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e8       	ldi	r26, 0x80	; 128
    2664:	bf e3       	ldi	r27, 0x3F	; 63
    2666:	8b 87       	std	Y+11, r24	; 0x0b
    2668:	9c 87       	std	Y+12, r25	; 0x0c
    266a:	ad 87       	std	Y+13, r26	; 0x0d
    266c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2670:	7c 85       	ldd	r23, Y+12	; 0x0c
    2672:	8d 85       	ldd	r24, Y+13	; 0x0d
    2674:	9e 85       	ldd	r25, Y+14	; 0x0e
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4a ef       	ldi	r20, 0xFA	; 250
    267c:	54 e4       	ldi	r21, 0x44	; 68
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	8f 83       	std	Y+7, r24	; 0x07
    2688:	98 87       	std	Y+8, r25	; 0x08
    268a:	a9 87       	std	Y+9, r26	; 0x09
    268c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e8       	ldi	r20, 0x80	; 128
    269c:	5f e3       	ldi	r21, 0x3F	; 63
    269e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a2:	88 23       	and	r24, r24
    26a4:	2c f4       	brge	.+10     	; 0x26b0 <LCD_sendCommand+0x344>
		__ticks = 1;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	3f c0       	rjmp	.+126    	; 0x272e <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	4c f5       	brge	.+82     	; 0x271a <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    26cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e2       	ldi	r20, 0x20	; 32
    26d6:	51 e4       	ldi	r21, 0x41	; 65
    26d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	0f c0       	rjmp	.+30     	; 0x2710 <LCD_sendCommand+0x3a4>
    26f2:	88 ec       	ldi	r24, 0xC8	; 200
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_sendCommand+0x392>
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	69 f7       	brne	.-38     	; 0x26f2 <LCD_sendCommand+0x386>
    2718:	14 c0       	rjmp	.+40     	; 0x2742 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	6f 81       	ldd	r22, Y+7	; 0x07
    271c:	78 85       	ldd	r23, Y+8	; 0x08
    271e:	89 85       	ldd	r24, Y+9	; 0x09
    2720:	9a 85       	ldd	r25, Y+10	; 0x0a
    2722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	8d 81       	ldd	r24, Y+5	; 0x05
    2730:	9e 81       	ldd	r25, Y+6	; 0x06
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	9a 81       	ldd	r25, Y+2	; 0x02
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <LCD_sendCommand+0x3ce>
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
	/*delay 1 microsecond beacuse tdh = 1 nanosecond*/
	_delay_ms(1);
#endif
}
    2742:	e9 96       	adiw	r28, 0x39	; 57
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <LCD_init>:

/*
 * this function to play the lcd
 * */

void LCD_init(void){
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	/*set rs pin to be output pin*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	64 e0       	ldi	r22, 0x04	; 4
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/*set RW pin to be output pin*/
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	65 e0       	ldi	r22, 0x05	; 5
    276a:	41 e0       	ldi	r20, 0x01	; 1
    276c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/*set ENABLE pin to be output pin*/
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,PIN_OUTPUT);
    2770:	83 e0       	ldi	r24, 0x03	; 3
    2772:	66 e0       	ldi	r22, 0x06	; 6
    2774:	41 e0       	ldi	r20, 0x01	; 1
    2776:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/*set lcd data bus port to be output port*/
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    277a:	82 e0       	ldi	r24, 0x02	; 2
    277c:	6f ef       	ldi	r22, 0xFF	; 255
    277e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_setupPortDirection>
	/*we will call the send command function and send 0x38 to play the lcd at the first time
	 * why 0x38 ???
	 *   we have (2-line,8-data bits) mode*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2782:	88 e3       	ldi	r24, 0x38	; 56
    2784:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_sendCommand>

	/*
	 * to turn off the cursor
	 * if we wand to turn on the cursor
	 * ----->> we will send a command ---> 0xE */
	LCD_sendCommand(LCD_CURSOR_OFF);
    2788:	8c e0       	ldi	r24, 0x0C	; 12
    278a:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_sendCommand>
	/*to clear the screen*/
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_sendCommand>
}
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_displayCharacter>:


/*
 * whis function is used when we want to display character */
void LCD_displayCharacter(uint8 character){
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	e9 97       	sbiw	r28, 0x39	; 57
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	89 af       	std	Y+57, r24	; 0x39
	uint8 lcd_port_value=0;
#endif
	/* set register select pin
	 * WHY LOGIC_HIGH ??
	 *  FROM THE data sheet, to send a data, the rs pin must be 1 */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    27b0:	83 e0       	ldi	r24, 0x03	; 3
    27b2:	64 e0       	ldi	r22, 0x04	; 4
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_writePin>
	/* clear read write pin because we want to send a coomand so we need to write*/
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    27ba:	83 e0       	ldi	r24, 0x03	; 3
    27bc:	65 e0       	ldi	r22, 0x05	; 5
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_writePin>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e8       	ldi	r26, 0x80	; 128
    27ca:	bf e3       	ldi	r27, 0x3F	; 63
    27cc:	8d ab       	std	Y+53, r24	; 0x35
    27ce:	9e ab       	std	Y+54, r25	; 0x36
    27d0:	af ab       	std	Y+55, r26	; 0x37
    27d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	6d a9       	ldd	r22, Y+53	; 0x35
    27d6:	7e a9       	ldd	r23, Y+54	; 0x36
    27d8:	8f a9       	ldd	r24, Y+55	; 0x37
    27da:	98 ad       	ldd	r25, Y+56	; 0x38
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4a ef       	ldi	r20, 0xFA	; 250
    27e2:	54 e4       	ldi	r21, 0x44	; 68
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	89 ab       	std	Y+49, r24	; 0x31
    27ee:	9a ab       	std	Y+50, r25	; 0x32
    27f0:	ab ab       	std	Y+51, r26	; 0x33
    27f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27f4:	69 a9       	ldd	r22, Y+49	; 0x31
    27f6:	7a a9       	ldd	r23, Y+50	; 0x32
    27f8:	8b a9       	ldd	r24, Y+51	; 0x33
    27fa:	9c a9       	ldd	r25, Y+52	; 0x34
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	98 ab       	std	Y+48, r25	; 0x30
    2812:	8f a7       	std	Y+47, r24	; 0x2f
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2816:	69 a9       	ldd	r22, Y+49	; 0x31
    2818:	7a a9       	ldd	r23, Y+50	; 0x32
    281a:	8b a9       	ldd	r24, Y+51	; 0x33
    281c:	9c a9       	ldd	r25, Y+52	; 0x34
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	6d a9       	ldd	r22, Y+53	; 0x35
    2830:	7e a9       	ldd	r23, Y+54	; 0x36
    2832:	8f a9       	ldd	r24, Y+55	; 0x37
    2834:	98 ad       	ldd	r25, Y+56	; 0x38
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	98 ab       	std	Y+48, r25	; 0x30
    2854:	8f a7       	std	Y+47, r24	; 0x2f
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <LCD_displayCharacter+0xdc>
    2858:	88 ec       	ldi	r24, 0xC8	; 200
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9e a7       	std	Y+46, r25	; 0x2e
    285e:	8d a7       	std	Y+45, r24	; 0x2d
    2860:	8d a5       	ldd	r24, Y+45	; 0x2d
    2862:	9e a5       	ldd	r25, Y+46	; 0x2e
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_displayCharacter+0xca>
    2868:	9e a7       	std	Y+46, r25	; 0x2e
    286a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8f a5       	ldd	r24, Y+47	; 0x2f
    286e:	98 a9       	ldd	r25, Y+48	; 0x30
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	98 ab       	std	Y+48, r25	; 0x30
    2874:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8f a5       	ldd	r24, Y+47	; 0x2f
    2878:	98 a9       	ldd	r25, Y+48	; 0x30
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <LCD_displayCharacter+0xbe>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	69 a9       	ldd	r22, Y+49	; 0x31
    2882:	7a a9       	ldd	r23, Y+50	; 0x32
    2884:	8b a9       	ldd	r24, Y+51	; 0x33
    2886:	9c a9       	ldd	r25, Y+52	; 0x34
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	8f a7       	std	Y+47, r24	; 0x2f
    2894:	8f a5       	ldd	r24, Y+47	; 0x2f
    2896:	98 a9       	ldd	r25, Y+48	; 0x30
    2898:	9c a7       	std	Y+44, r25	; 0x2c
    289a:	8b a7       	std	Y+43, r24	; 0x2b
    289c:	8b a5       	ldd	r24, Y+43	; 0x2b
    289e:	9c a5       	ldd	r25, Y+44	; 0x2c
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_displayCharacter+0x106>
    28a4:	9c a7       	std	Y+44, r25	; 0x2c
    28a6:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay 1 microsecond because tas = 50 nanoseconds*/
	_delay_ms(1);
	/*set the enable pin */
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_HIGH);
    28a8:	83 e0       	ldi	r24, 0x03	; 3
    28aa:	66 e0       	ldi	r22, 0x06	; 6
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_writePin>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e8       	ldi	r26, 0x80	; 128
    28b8:	bf e3       	ldi	r27, 0x3F	; 63
    28ba:	8f a3       	std	Y+39, r24	; 0x27
    28bc:	98 a7       	std	Y+40, r25	; 0x28
    28be:	a9 a7       	std	Y+41, r26	; 0x29
    28c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	6f a1       	ldd	r22, Y+39	; 0x27
    28c4:	78 a5       	ldd	r23, Y+40	; 0x28
    28c6:	89 a5       	ldd	r24, Y+41	; 0x29
    28c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a ef       	ldi	r20, 0xFA	; 250
    28d0:	54 e4       	ldi	r21, 0x44	; 68
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8b a3       	std	Y+35, r24	; 0x23
    28dc:	9c a3       	std	Y+36, r25	; 0x24
    28de:	ad a3       	std	Y+37, r26	; 0x25
    28e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28e2:	6b a1       	ldd	r22, Y+35	; 0x23
    28e4:	7c a1       	ldd	r23, Y+36	; 0x24
    28e6:	8d a1       	ldd	r24, Y+37	; 0x25
    28e8:	9e a1       	ldd	r25, Y+38	; 0x26
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9a a3       	std	Y+34, r25	; 0x22
    2900:	89 a3       	std	Y+33, r24	; 0x21
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2904:	6b a1       	ldd	r22, Y+35	; 0x23
    2906:	7c a1       	ldd	r23, Y+36	; 0x24
    2908:	8d a1       	ldd	r24, Y+37	; 0x25
    290a:	9e a1       	ldd	r25, Y+38	; 0x26
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	6f a1       	ldd	r22, Y+39	; 0x27
    291e:	78 a5       	ldd	r23, Y+40	; 0x28
    2920:	89 a5       	ldd	r24, Y+41	; 0x29
    2922:	9a a5       	ldd	r25, Y+42	; 0x2a
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9a a3       	std	Y+34, r25	; 0x22
    2942:	89 a3       	std	Y+33, r24	; 0x21
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <LCD_displayCharacter+0x1ca>
    2946:	88 ec       	ldi	r24, 0xC8	; 200
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	98 a3       	std	Y+32, r25	; 0x20
    294c:	8f 8f       	std	Y+31, r24	; 0x1f
    294e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2950:	98 a1       	ldd	r25, Y+32	; 0x20
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_displayCharacter+0x1b8>
    2956:	98 a3       	std	Y+32, r25	; 0x20
    2958:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	89 a1       	ldd	r24, Y+33	; 0x21
    295c:	9a a1       	ldd	r25, Y+34	; 0x22
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9a a3       	std	Y+34, r25	; 0x22
    2962:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	89 a1       	ldd	r24, Y+33	; 0x21
    2966:	9a a1       	ldd	r25, Y+34	; 0x22
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <LCD_displayCharacter+0x1ac>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	6b a1       	ldd	r22, Y+35	; 0x23
    2970:	7c a1       	ldd	r23, Y+36	; 0x24
    2972:	8d a1       	ldd	r24, Y+37	; 0x25
    2974:	9e a1       	ldd	r25, Y+38	; 0x26
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9a a3       	std	Y+34, r25	; 0x22
    2980:	89 a3       	std	Y+33, r24	; 0x21
    2982:	89 a1       	ldd	r24, Y+33	; 0x21
    2984:	9a a1       	ldd	r25, Y+34	; 0x22
    2986:	9e 8f       	std	Y+30, r25	; 0x1e
    2988:	8d 8f       	std	Y+29, r24	; 0x1d
    298a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    298c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <LCD_displayCharacter+0x1f4>
    2992:	9e 8f       	std	Y+30, r25	; 0x1e
    2994:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /*very important instructuon*/
	/*delay 1 microsecond beacuse tdh = 1 nanosecond*/
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE == 8)
	/*send the command to port that is connected to the data bus*/
	GPIO_writePort(LCD_DATA_PORT_ID,character);
    2996:	82 e0       	ldi	r24, 0x02	; 2
    2998:	69 ad       	ldd	r22, Y+57	; 0x39
    299a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GPIO_writePort>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a0 e8       	ldi	r26, 0x80	; 128
    29a4:	bf e3       	ldi	r27, 0x3F	; 63
    29a6:	89 8f       	std	Y+25, r24	; 0x19
    29a8:	9a 8f       	std	Y+26, r25	; 0x1a
    29aa:	ab 8f       	std	Y+27, r26	; 0x1b
    29ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	69 8d       	ldd	r22, Y+25	; 0x19
    29b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4a ef       	ldi	r20, 0xFA	; 250
    29bc:	54 e4       	ldi	r21, 0x44	; 68
    29be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8d 8b       	std	Y+21, r24	; 0x15
    29c8:	9e 8b       	std	Y+22, r25	; 0x16
    29ca:	af 8b       	std	Y+23, r26	; 0x17
    29cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ce:	6d 89       	ldd	r22, Y+21	; 0x15
    29d0:	7e 89       	ldd	r23, Y+22	; 0x16
    29d2:	8f 89       	ldd	r24, Y+23	; 0x17
    29d4:	98 8d       	ldd	r25, Y+24	; 0x18
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	2c f4       	brge	.+10     	; 0x29f0 <LCD_displayCharacter+0x256>
		__ticks = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9c 8b       	std	Y+20, r25	; 0x14
    29ec:	8b 8b       	std	Y+19, r24	; 0x13
    29ee:	3f c0       	rjmp	.+126    	; 0x2a6e <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    29f0:	6d 89       	ldd	r22, Y+21	; 0x15
    29f2:	7e 89       	ldd	r23, Y+22	; 0x16
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	3f ef       	ldi	r19, 0xFF	; 255
    29fc:	4f e7       	ldi	r20, 0x7F	; 127
    29fe:	57 e4       	ldi	r21, 0x47	; 71
    2a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a04:	18 16       	cp	r1, r24
    2a06:	4c f5       	brge	.+82     	; 0x2a5a <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9c 8b       	std	Y+20, r25	; 0x14
    2a2e:	8b 8b       	std	Y+19, r24	; 0x13
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <LCD_displayCharacter+0x2b6>
    2a32:	88 ec       	ldi	r24, 0xC8	; 200
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	9a 8b       	std	Y+18, r25	; 0x12
    2a38:	89 8b       	std	Y+17, r24	; 0x11
    2a3a:	89 89       	ldd	r24, Y+17	; 0x11
    2a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_displayCharacter+0x2a4>
    2a42:	9a 8b       	std	Y+18, r25	; 0x12
    2a44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	9c 8b       	std	Y+20, r25	; 0x14
    2a4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	8b 89       	ldd	r24, Y+19	; 0x13
    2a52:	9c 89       	ldd	r25, Y+20	; 0x14
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <LCD_displayCharacter+0x298>
    2a58:	14 c0       	rjmp	.+40     	; 0x2a82 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a60:	98 8d       	ldd	r25, Y+24	; 0x18
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9c 8b       	std	Y+20, r25	; 0x14
    2a6c:	8b 8b       	std	Y+19, r24	; 0x13
    2a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a70:	9c 89       	ldd	r25, Y+20	; 0x14
    2a72:	98 8b       	std	Y+16, r25	; 0x10
    2a74:	8f 87       	std	Y+15, r24	; 0x0f
    2a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a78:	98 89       	ldd	r25, Y+16	; 0x10
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_displayCharacter+0x2e0>
    2a7e:	98 8b       	std	Y+16, r25	; 0x10
    2a80:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay 1 microsecond because tdse=100 nanoseconds*/
	_delay_ms(1);
	/*to read the command the enable pin must be zero again*/
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /*very important instructuon*/
    2a82:	83 e0       	ldi	r24, 0x03	; 3
    2a84:	66 e0       	ldi	r22, 0x06	; 6
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 d2 06 	call	0xda4	; 0xda4 <GPIO_writePin>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	8b 87       	std	Y+11, r24	; 0x0b
    2a96:	9c 87       	std	Y+12, r25	; 0x0c
    2a98:	ad 87       	std	Y+13, r26	; 0x0d
    2a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
    2ab6:	98 87       	std	Y+8, r25	; 0x08
    2ab8:	a9 87       	std	Y+9, r26	; 0x09
    2aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <LCD_displayCharacter+0x344>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <LCD_displayCharacter+0x3a4>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_displayCharacter+0x392>
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <LCD_displayCharacter+0x386>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_displayCharacter+0x3ce>
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
	/*delay 1 microsecond beacuse tdh = 1 nanosecond*/
	_delay_ms(1);
#endif
}
    2b70:	e9 96       	adiw	r28, 0x39	; 57
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <LCD_displayString>:
/*
 * this function is used to display string
 * whis function uses the LCD_displayCharacter() function to display all the characters in the string
 * C course Recall :
 * -----> to loop through a string we need pointer to character and increment the address to access the following character*/
void LCD_displayString(const uint8 *string){
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <LCD_displayString+0x6>
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	9a 83       	std	Y+2, r25	; 0x02
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	0a c0       	rjmp	.+20     	; 0x2ba6 <LCD_displayString+0x24>
	while( (*string) != '\0' ){
		LCD_displayCharacter(*string);
    2b92:	e9 81       	ldd	r30, Y+1	; 0x01
    2b94:	fa 81       	ldd	r31, Y+2	; 0x02
    2b96:	80 81       	ld	r24, Z
    2b98:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_displayCharacter>
		string++;
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	01 96       	adiw	r24, 0x01	; 1
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
 * this function is used to display string
 * whis function uses the LCD_displayCharacter() function to display all the characters in the string
 * C course Recall :
 * -----> to loop through a string we need pointer to character and increment the address to access the following character*/
void LCD_displayString(const uint8 *string){
	while( (*string) != '\0' ){
    2ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    2baa:	80 81       	ld	r24, Z
    2bac:	88 23       	and	r24, r24
    2bae:	89 f7       	brne	.-30     	; 0x2b92 <LCD_displayString+0x10>
		LCD_displayCharacter(*string);
		string++;
	}
}
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <LCD_clearScreen>:


/*
 * this function used to clear the LCD*/

void LCD_clearScreen(void){
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_sendCommand>

}
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <LCD_moveCursor>:

/*
 * to move the cursor to any location*/
void LCD_moveCursor(uint8 row,uint8 col){
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <LCD_moveCursor+0x6>
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <LCD_moveCursor+0x8>
    2bd6:	0f 92       	push	r0
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	8a 83       	std	Y+2, r24	; 0x02
    2bde:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row){
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	3d 83       	std	Y+5, r19	; 0x05
    2be8:	2c 83       	std	Y+4, r18	; 0x04
    2bea:	8c 81       	ldd	r24, Y+4	; 0x04
    2bec:	9d 81       	ldd	r25, Y+5	; 0x05
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	91 05       	cpc	r25, r1
    2bf2:	c1 f0       	breq	.+48     	; 0x2c24 <LCD_moveCursor+0x56>
    2bf4:	2c 81       	ldd	r18, Y+4	; 0x04
    2bf6:	3d 81       	ldd	r19, Y+5	; 0x05
    2bf8:	22 30       	cpi	r18, 0x02	; 2
    2bfa:	31 05       	cpc	r19, r1
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <LCD_moveCursor+0x3a>
    2bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2c00:	9d 81       	ldd	r25, Y+5	; 0x05
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	61 f0       	breq	.+24     	; 0x2c1e <LCD_moveCursor+0x50>
    2c06:	19 c0       	rjmp	.+50     	; 0x2c3a <LCD_moveCursor+0x6c>
    2c08:	2c 81       	ldd	r18, Y+4	; 0x04
    2c0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c0c:	22 30       	cpi	r18, 0x02	; 2
    2c0e:	31 05       	cpc	r19, r1
    2c10:	69 f0       	breq	.+26     	; 0x2c2c <LCD_moveCursor+0x5e>
    2c12:	8c 81       	ldd	r24, Y+4	; 0x04
    2c14:	9d 81       	ldd	r25, Y+5	; 0x05
    2c16:	83 30       	cpi	r24, 0x03	; 3
    2c18:	91 05       	cpc	r25, r1
    2c1a:	61 f0       	breq	.+24     	; 0x2c34 <LCD_moveCursor+0x66>
    2c1c:	0e c0       	rjmp	.+28     	; 0x2c3a <LCD_moveCursor+0x6c>
	/*
	 * first row address start with 0x00*/
	case 0:
		lcd_memory_address=col+FIRST_ROW_ADDRESS;
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	89 83       	std	Y+1, r24	; 0x01
    2c22:	0b c0       	rjmp	.+22     	; 0x2c3a <LCD_moveCursor+0x6c>
		break;
		/*
		 * second row address start with 0x40*/
	case 1:
		lcd_memory_address=col+SECOND_ROW_ADDRESS;
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	80 5c       	subi	r24, 0xC0	; 192
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	07 c0       	rjmp	.+14     	; 0x2c3a <LCD_moveCursor+0x6c>
		break;
		/*
		 * third row address start with 0x10*/
	case 2:
		lcd_memory_address=col+THIRD_ROW_ADDRESS;
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	80 5f       	subi	r24, 0xF0	; 240
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	03 c0       	rjmp	.+6      	; 0x2c3a <LCD_moveCursor+0x6c>
		break;
		/*
		 * fourth row address start with 0x50*/
	case 3:
		lcd_memory_address=col+FOURTH_ROW_ADDRESS;
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	80 5b       	subi	r24, 0xB0	; 176
    2c38:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	80 68       	ori	r24, 0x80	; 128
    2c3e:	0e 94 b6 11 	call	0x236c	; 0x236c <LCD_sendCommand>
}
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <LCD_displayStringRowColumn>:

/*
 * this function display string at any row and col u want*/

void LCD_displayStringRowColumn(uint8 row,uint8 col,uint8 *string){
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <LCD_displayStringRowColumn+0x6>
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <LCD_displayStringRowColumn+0x8>
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	6a 83       	std	Y+2, r22	; 0x02
    2c62:	5c 83       	std	Y+4, r21	; 0x04
    2c64:	4b 83       	std	Y+3, r20	; 0x03
	/*to set the cursor we call the movecursor function*/
	LCD_moveCursor(row,col);
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	6a 81       	ldd	r22, Y+2	; 0x02
    2c6a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <LCD_moveCursor>
	/*to display the string we call the displaystring function
	 * note :
	 * -----> we send the address not the * ( take care of this )
	 * why is that ??
	 * ----> the display string receive what we sent in pointer to character so must send an address*/
	LCD_displayString(string);
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <LCD_displayString>

}
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <LCD_intgerToString>:


/*
 * to display decimal number which we don't know its value like a value from a sensor*/
void LCD_intgerToString(int data){
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	62 97       	sbiw	r28, 0x12	; 18
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	9a 8b       	std	Y+18, r25	; 0x12
    2c9a:	89 8b       	std	Y+17, r24	; 0x11
	 * --> so buff[1]='2'
	 * --> so buff[2]='3'
	 * --> so buff[3]='4'
	 * --> so buff[4]='\0'
	 * */
	itoa(data,buff,10);
    2c9c:	89 89       	ldd	r24, Y+17	; 0x11
    2c9e:	9a 89       	ldd	r25, Y+18	; 0x12
    2ca0:	9e 01       	movw	r18, r28
    2ca2:	2f 5f       	subi	r18, 0xFF	; 255
    2ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca6:	b9 01       	movw	r22, r18
    2ca8:	4a e0       	ldi	r20, 0x0A	; 10
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	0e 94 62 19 	call	0x32c4	; 0x32c4 <itoa>
	/*display the string after the conversion ended*/
	LCD_displayString((uint8 *)buff);
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	01 96       	adiw	r24, 0x01	; 1
    2cb4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <LCD_displayString>
}
    2cb8:	62 96       	adiw	r28, 0x12	; 18
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <__vector_9>:

static volatile void (*g_timer0CallBackPtr)(void)=NULL_PTR;
static volatile void (*g_timer1CallBackPtr)(void)=NULL_PTR;


ISR(TIMER0_OVF_vect){
    2cca:	1f 92       	push	r1
    2ccc:	0f 92       	push	r0
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	0f 92       	push	r0
    2cd2:	11 24       	eor	r1, r1
    2cd4:	2f 93       	push	r18
    2cd6:	3f 93       	push	r19
    2cd8:	4f 93       	push	r20
    2cda:	5f 93       	push	r21
    2cdc:	6f 93       	push	r22
    2cde:	7f 93       	push	r23
    2ce0:	8f 93       	push	r24
    2ce2:	9f 93       	push	r25
    2ce4:	af 93       	push	r26
    2ce6:	bf 93       	push	r27
    2ce8:	ef 93       	push	r30
    2cea:	ff 93       	push	r31
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    2cf4:	80 91 ea 01 	lds	r24, 0x01EA
    2cf8:	90 91 eb 01 	lds	r25, 0x01EB
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	29 f0       	breq	.+10     	; 0x2d0a <__vector_9+0x40>
		(*g_timer0CallBackPtr)();
    2d00:	e0 91 ea 01 	lds	r30, 0x01EA
    2d04:	f0 91 eb 01 	lds	r31, 0x01EB
    2d08:	09 95       	icall
	}
}
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	ff 91       	pop	r31
    2d10:	ef 91       	pop	r30
    2d12:	bf 91       	pop	r27
    2d14:	af 91       	pop	r26
    2d16:	9f 91       	pop	r25
    2d18:	8f 91       	pop	r24
    2d1a:	7f 91       	pop	r23
    2d1c:	6f 91       	pop	r22
    2d1e:	5f 91       	pop	r21
    2d20:	4f 91       	pop	r20
    2d22:	3f 91       	pop	r19
    2d24:	2f 91       	pop	r18
    2d26:	0f 90       	pop	r0
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	0f 90       	pop	r0
    2d2c:	1f 90       	pop	r1
    2d2e:	18 95       	reti

00002d30 <__vector_19>:

ISR(TIMER0_COMP_vect){
    2d30:	1f 92       	push	r1
    2d32:	0f 92       	push	r0
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	0f 92       	push	r0
    2d38:	11 24       	eor	r1, r1
    2d3a:	2f 93       	push	r18
    2d3c:	3f 93       	push	r19
    2d3e:	4f 93       	push	r20
    2d40:	5f 93       	push	r21
    2d42:	6f 93       	push	r22
    2d44:	7f 93       	push	r23
    2d46:	8f 93       	push	r24
    2d48:	9f 93       	push	r25
    2d4a:	af 93       	push	r26
    2d4c:	bf 93       	push	r27
    2d4e:	ef 93       	push	r30
    2d50:	ff 93       	push	r31
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    2d5a:	80 91 ea 01 	lds	r24, 0x01EA
    2d5e:	90 91 eb 01 	lds	r25, 0x01EB
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	29 f0       	breq	.+10     	; 0x2d70 <__vector_19+0x40>
		(*g_timer0CallBackPtr)();
    2d66:	e0 91 ea 01 	lds	r30, 0x01EA
    2d6a:	f0 91 eb 01 	lds	r31, 0x01EB
    2d6e:	09 95       	icall
	}
}
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	ff 91       	pop	r31
    2d76:	ef 91       	pop	r30
    2d78:	bf 91       	pop	r27
    2d7a:	af 91       	pop	r26
    2d7c:	9f 91       	pop	r25
    2d7e:	8f 91       	pop	r24
    2d80:	7f 91       	pop	r23
    2d82:	6f 91       	pop	r22
    2d84:	5f 91       	pop	r21
    2d86:	4f 91       	pop	r20
    2d88:	3f 91       	pop	r19
    2d8a:	2f 91       	pop	r18
    2d8c:	0f 90       	pop	r0
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	0f 90       	pop	r0
    2d92:	1f 90       	pop	r1
    2d94:	18 95       	reti

00002d96 <__vector_8>:

ISR(TIMER1_OVF_vect){
    2d96:	1f 92       	push	r1
    2d98:	0f 92       	push	r0
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	0f 92       	push	r0
    2d9e:	11 24       	eor	r1, r1
    2da0:	2f 93       	push	r18
    2da2:	3f 93       	push	r19
    2da4:	4f 93       	push	r20
    2da6:	5f 93       	push	r21
    2da8:	6f 93       	push	r22
    2daa:	7f 93       	push	r23
    2dac:	8f 93       	push	r24
    2dae:	9f 93       	push	r25
    2db0:	af 93       	push	r26
    2db2:	bf 93       	push	r27
    2db4:	ef 93       	push	r30
    2db6:	ff 93       	push	r31
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    2dc0:	80 91 ec 01 	lds	r24, 0x01EC
    2dc4:	90 91 ed 01 	lds	r25, 0x01ED
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	29 f0       	breq	.+10     	; 0x2dd6 <__vector_8+0x40>
		(*g_timer1CallBackPtr)();
    2dcc:	e0 91 ec 01 	lds	r30, 0x01EC
    2dd0:	f0 91 ed 01 	lds	r31, 0x01ED
    2dd4:	09 95       	icall
	}
}
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	ff 91       	pop	r31
    2ddc:	ef 91       	pop	r30
    2dde:	bf 91       	pop	r27
    2de0:	af 91       	pop	r26
    2de2:	9f 91       	pop	r25
    2de4:	8f 91       	pop	r24
    2de6:	7f 91       	pop	r23
    2de8:	6f 91       	pop	r22
    2dea:	5f 91       	pop	r21
    2dec:	4f 91       	pop	r20
    2dee:	3f 91       	pop	r19
    2df0:	2f 91       	pop	r18
    2df2:	0f 90       	pop	r0
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	0f 90       	pop	r0
    2df8:	1f 90       	pop	r1
    2dfa:	18 95       	reti

00002dfc <__vector_6>:

ISR(TIMER1_COMPA_vect){
    2dfc:	1f 92       	push	r1
    2dfe:	0f 92       	push	r0
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	0f 92       	push	r0
    2e04:	11 24       	eor	r1, r1
    2e06:	2f 93       	push	r18
    2e08:	3f 93       	push	r19
    2e0a:	4f 93       	push	r20
    2e0c:	5f 93       	push	r21
    2e0e:	6f 93       	push	r22
    2e10:	7f 93       	push	r23
    2e12:	8f 93       	push	r24
    2e14:	9f 93       	push	r25
    2e16:	af 93       	push	r26
    2e18:	bf 93       	push	r27
    2e1a:	ef 93       	push	r30
    2e1c:	ff 93       	push	r31
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    2e26:	80 91 ec 01 	lds	r24, 0x01EC
    2e2a:	90 91 ed 01 	lds	r25, 0x01ED
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	29 f0       	breq	.+10     	; 0x2e3c <__vector_6+0x40>
		(*g_timer1CallBackPtr)();
    2e32:	e0 91 ec 01 	lds	r30, 0x01EC
    2e36:	f0 91 ed 01 	lds	r31, 0x01ED
    2e3a:	09 95       	icall
	}
}
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	ff 91       	pop	r31
    2e42:	ef 91       	pop	r30
    2e44:	bf 91       	pop	r27
    2e46:	af 91       	pop	r26
    2e48:	9f 91       	pop	r25
    2e4a:	8f 91       	pop	r24
    2e4c:	7f 91       	pop	r23
    2e4e:	6f 91       	pop	r22
    2e50:	5f 91       	pop	r21
    2e52:	4f 91       	pop	r20
    2e54:	3f 91       	pop	r19
    2e56:	2f 91       	pop	r18
    2e58:	0f 90       	pop	r0
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	0f 90       	pop	r0
    2e5e:	1f 90       	pop	r1
    2e60:	18 95       	reti

00002e62 <TIMER_init>:


void TIMER_init(const TIMER_configType *Config_Ptr){
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <TIMER_init+0x6>
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	9a 83       	std	Y+2, r25	; 0x02
    2e6e:	89 83       	std	Y+1, r24	; 0x01
	/*In case of timer0*/
	if(Config_Ptr->timer_id == TIMER0){
    2e70:	e9 81       	ldd	r30, Y+1	; 0x01
    2e72:	fa 81       	ldd	r31, Y+2	; 0x02
    2e74:	80 81       	ld	r24, Z
    2e76:	88 23       	and	r24, r24
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <TIMER_init+0x1a>
    2e7a:	4b c0       	rjmp	.+150    	; 0x2f12 <TIMER_init+0xb0>
		TCCR0 = (1<<FOC0);
    2e7c:	e3 e5       	ldi	r30, 0x53	; 83
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 e8       	ldi	r24, 0x80	; 128
    2e82:	80 83       	st	Z, r24
		/*if normal mode : WGM00=0 , WGM01=0
		 *if compare mode : WGM00=0 , WGM01=1
		 * */
		TCCR0 = (TCCR0 & 0xB7) | (Config_Ptr->mode<<2);
    2e84:	a3 e5       	ldi	r26, 0x53	; 83
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e3 e5       	ldi	r30, 0x53	; 83
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	28 2f       	mov	r18, r24
    2e90:	27 7b       	andi	r18, 0xB7	; 183
    2e92:	e9 81       	ldd	r30, Y+1	; 0x01
    2e94:	fa 81       	ldd	r31, Y+2	; 0x02
    2e96:	81 81       	ldd	r24, Z+1	; 0x01
    2e98:	88 2f       	mov	r24, r24
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	88 0f       	add	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	82 2b       	or	r24, r18
    2ea6:	8c 93       	st	X, r24
		/* The next line is to adjust the prescaler
		 * */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    2ea8:	a3 e5       	ldi	r26, 0x53	; 83
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e3 e5       	ldi	r30, 0x53	; 83
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	98 2f       	mov	r25, r24
    2eb4:	98 7f       	andi	r25, 0xF8	; 248
    2eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	89 2b       	or	r24, r25
    2ebe:	8c 93       	st	X, r24
		/*The below line is for initial value of the timer register */
		TCNT0 = (uint8)(Config_Ptr->timerStartValue);
    2ec0:	a2 e5       	ldi	r26, 0x52	; 82
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec8:	83 81       	ldd	r24, Z+3	; 0x03
    2eca:	94 81       	ldd	r25, Z+4	; 0x04
    2ecc:	8c 93       	st	X, r24
		/*Enabling the interrupt of overflow and compare mode in order to execute the ISR code*/
		if(Config_Ptr->mode == NORMAL_MODE){
    2ece:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed2:	81 81       	ldd	r24, Z+1	; 0x01
    2ed4:	88 23       	and	r24, r24
    2ed6:	41 f4       	brne	.+16     	; 0x2ee8 <TIMER_init+0x86>
			TIMSK |=(1<<TOIE0);
    2ed8:	a9 e5       	ldi	r26, 0x59	; 89
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	e9 e5       	ldi	r30, 0x59	; 89
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	81 60       	ori	r24, 0x01	; 1
    2ee4:	8c 93       	st	X, r24
    2ee6:	69 c0       	rjmp	.+210    	; 0x2fba <TIMER_init+0x158>
		}
		else if(Config_Ptr->mode == COMPARE_MODE){
    2ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eea:	fa 81       	ldd	r31, Y+2	; 0x02
    2eec:	81 81       	ldd	r24, Z+1	; 0x01
    2eee:	82 30       	cpi	r24, 0x02	; 2
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <TIMER_init+0x92>
    2ef2:	63 c0       	rjmp	.+198    	; 0x2fba <TIMER_init+0x158>
			OCR0  = (uint8)(Config_Ptr->compareValue);
    2ef4:	ac e5       	ldi	r26, 0x5C	; 92
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    2efa:	fa 81       	ldd	r31, Y+2	; 0x02
    2efc:	85 81       	ldd	r24, Z+5	; 0x05
    2efe:	96 81       	ldd	r25, Z+6	; 0x06
    2f00:	8c 93       	st	X, r24
			TIMSK |=(1<<OCIE0);
    2f02:	a9 e5       	ldi	r26, 0x59	; 89
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e9 e5       	ldi	r30, 0x59	; 89
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	82 60       	ori	r24, 0x02	; 2
    2f0e:	8c 93       	st	X, r24
    2f10:	54 c0       	rjmp	.+168    	; 0x2fba <TIMER_init+0x158>
		}
	}
	/*In case of timer1*/
	else if(Config_Ptr->timer_id == TIMER1){
    2f12:	e9 81       	ldd	r30, Y+1	; 0x01
    2f14:	fa 81       	ldd	r31, Y+2	; 0x02
    2f16:	80 81       	ld	r24, Z
    2f18:	81 30       	cpi	r24, 0x01	; 1
    2f1a:	09 f0       	breq	.+2      	; 0x2f1e <TIMER_init+0xbc>
    2f1c:	4e c0       	rjmp	.+156    	; 0x2fba <TIMER_init+0x158>
		/*The below line is for initial value of the timer register */
		TCNT1  = Config_Ptr->timerStartValue;
    2f1e:	ac e4       	ldi	r26, 0x4C	; 76
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e9 81       	ldd	r30, Y+1	; 0x01
    2f24:	fa 81       	ldd	r31, Y+2	; 0x02
    2f26:	83 81       	ldd	r24, Z+3	; 0x03
    2f28:	94 81       	ldd	r25, Z+4	; 0x04
    2f2a:	11 96       	adiw	r26, 0x01	; 1
    2f2c:	9c 93       	st	X, r25
    2f2e:	8e 93       	st	-X, r24

		TCCR1A = (1<<FOC1A);
    2f30:	ef e4       	ldi	r30, 0x4F	; 79
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	88 e0       	ldi	r24, 0x08	; 8
    2f36:	80 83       	st	Z, r24
		TCCR1B=0;
    2f38:	ee e4       	ldi	r30, 0x4E	; 78
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	10 82       	st	Z, r1

		TCCR1B = (TCCR1B & 0xE7) | (Config_Ptr->mode<<1);
    2f3e:	ae e4       	ldi	r26, 0x4E	; 78
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	ee e4       	ldi	r30, 0x4E	; 78
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	28 2f       	mov	r18, r24
    2f4a:	27 7e       	andi	r18, 0xE7	; 231
    2f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f50:	81 81       	ldd	r24, Z+1	; 0x01
    2f52:	88 2f       	mov	r24, r24
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	82 2b       	or	r24, r18
    2f5c:	8c 93       	st	X, r24
		/* The next line is to adjust the prescaler
		 * */
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2f5e:	ae e4       	ldi	r26, 0x4E	; 78
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	ee e4       	ldi	r30, 0x4E	; 78
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	98 2f       	mov	r25, r24
    2f6a:	98 7f       	andi	r25, 0xF8	; 248
    2f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	89 2b       	or	r24, r25
    2f74:	8c 93       	st	X, r24
		/*Enabling the interrupt of overflow and compare mode in order to execute the ISR code*/
		if(Config_Ptr->mode == NORMAL_MODE){
    2f76:	e9 81       	ldd	r30, Y+1	; 0x01
    2f78:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7a:	81 81       	ldd	r24, Z+1	; 0x01
    2f7c:	88 23       	and	r24, r24
    2f7e:	41 f4       	brne	.+16     	; 0x2f90 <TIMER_init+0x12e>
			TIMSK |=(1<<TOIE1);
    2f80:	a9 e5       	ldi	r26, 0x59	; 89
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e9 e5       	ldi	r30, 0x59	; 89
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	84 60       	ori	r24, 0x04	; 4
    2f8c:	8c 93       	st	X, r24
    2f8e:	15 c0       	rjmp	.+42     	; 0x2fba <TIMER_init+0x158>
		}
		else if(Config_Ptr->mode == COMPARE_MODE_TIMER1){
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	81 81       	ldd	r24, Z+1	; 0x01
    2f96:	84 30       	cpi	r24, 0x04	; 4
    2f98:	81 f4       	brne	.+32     	; 0x2fba <TIMER_init+0x158>
			/* To adjust the compare value */
			OCR1A  = Config_Ptr->compareValue;
    2f9a:	aa e4       	ldi	r26, 0x4A	; 74
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa2:	85 81       	ldd	r24, Z+5	; 0x05
    2fa4:	96 81       	ldd	r25, Z+6	; 0x06
    2fa6:	11 96       	adiw	r26, 0x01	; 1
    2fa8:	9c 93       	st	X, r25
    2faa:	8e 93       	st	-X, r24
			TIMSK |=(1<<OCIE1A);
    2fac:	a9 e5       	ldi	r26, 0x59	; 89
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e9 e5       	ldi	r30, 0x59	; 89
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	80 61       	ori	r24, 0x10	; 16
    2fb8:	8c 93       	st	X, r24
		}
	}
}
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <TIMER0_setCallBack>:


void TIMER0_setCallBack(void (*a_ptr)(void)){
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <TIMER0_setCallBack+0x6>
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	9a 83       	std	Y+2, r25	; 0x02
    2fd0:	89 83       	std	Y+1, r24	; 0x01
	g_timer0CallBackPtr=a_ptr;
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd6:	90 93 eb 01 	sts	0x01EB, r25
    2fda:	80 93 ea 01 	sts	0x01EA, r24
}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <TIMER1_setCallBack>:

void TIMER1_setCallBack(void (*a_ptr)(void)){
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <TIMER1_setCallBack+0x6>
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	89 83       	std	Y+1, r24	; 0x01
	g_timer1CallBackPtr=a_ptr;
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffa:	90 93 ed 01 	sts	0x01ED, r25
    2ffe:	80 93 ec 01 	sts	0x01EC, r24
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <TIMER_DeInit>:

void TIMER_DeInit(TIMER_ID timer_id){
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	0f 92       	push	r0
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	89 83       	std	Y+1, r24	; 0x01
	/*In case of timer0*/
	if(timer_id == TIMER0){
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	88 23       	and	r24, r24
    301c:	89 f4       	brne	.+34     	; 0x3040 <TIMER_DeInit+0x34>
	    TCCR0=0;
    301e:	e3 e5       	ldi	r30, 0x53	; 83
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	10 82       	st	Z, r1
	    TCNT0=0;
    3024:	e2 e5       	ldi	r30, 0x52	; 82
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	10 82       	st	Z, r1
	    OCR0=0;
    302a:	ec e5       	ldi	r30, 0x5C	; 92
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	10 82       	st	Z, r1
	    /*disable the interrupt module of timer0*/
	    TIMSK &=~(1<<TOIE0) &~(1<<OCIE0);
    3030:	a9 e5       	ldi	r26, 0x59	; 89
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	e9 e5       	ldi	r30, 0x59	; 89
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	8c 7f       	andi	r24, 0xFC	; 252
    303c:	8c 93       	st	X, r24
    303e:	18 c0       	rjmp	.+48     	; 0x3070 <TIMER_DeInit+0x64>
	}
	/*In case of timer1*/
	else if(timer_id == TIMER1){
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	81 30       	cpi	r24, 0x01	; 1
    3044:	a9 f4       	brne	.+42     	; 0x3070 <TIMER_DeInit+0x64>
	    TCCR1A=0;
    3046:	ef e4       	ldi	r30, 0x4F	; 79
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	10 82       	st	Z, r1
	    TCCR1B=0;
    304c:	ee e4       	ldi	r30, 0x4E	; 78
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	10 82       	st	Z, r1
	    TCNT1=0;
    3052:	ec e4       	ldi	r30, 0x4C	; 76
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	11 82       	std	Z+1, r1	; 0x01
    3058:	10 82       	st	Z, r1
	    OCR1A=0;
    305a:	ea e4       	ldi	r30, 0x4A	; 74
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	11 82       	std	Z+1, r1	; 0x01
    3060:	10 82       	st	Z, r1
	    /*disable the interrupt module of timer1*/
	    TIMSK &=~(1<<TOIE1) &~(1<<OCIE1A);
    3062:	a9 e5       	ldi	r26, 0x59	; 89
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e9 e5       	ldi	r30, 0x59	; 89
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	8b 7e       	andi	r24, 0xEB	; 235
    306e:	8c 93       	st	X, r24
	}
}
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <UART_init>:

#include"uart.h"
#include"avr/io.h"
#include"common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr){
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <UART_init+0x6>
    307e:	00 d0       	rcall	.+0      	; 0x3080 <UART_init+0x8>
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	9c 83       	std	Y+4, r25	; 0x04
    3086:	8b 83       	std	Y+3, r24	; 0x03
	/*Variable for calculating the UBRR value*/
	uint16 ubrrValue;

	UCSRA = (1<<U2X);
    3088:	eb e2       	ldi	r30, 0x2B	; 43
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	80 83       	st	Z, r24
	/*
	 * To enbale the transmitter and receiver*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3090:	ea e2       	ldi	r30, 0x2A	; 42
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	88 e1       	ldi	r24, 0x18	; 24
    3096:	80 83       	st	Z, r24
	/* URSEL must be 1 to write in the UCSRC register
	 * */
	UCSRC = (1<<URSEL) | ( (Config_Ptr->parity) <<4) | ( (Config_Ptr->stopBit) <<3) | ((Config_Ptr->dataBits) <<1);
    3098:	a0 e4       	ldi	r26, 0x40	; 64
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	eb 81       	ldd	r30, Y+3	; 0x03
    309e:	fc 81       	ldd	r31, Y+4	; 0x04
    30a0:	80 81       	ld	r24, Z
    30a2:	88 2f       	mov	r24, r24
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	82 95       	swap	r24
    30a8:	92 95       	swap	r25
    30aa:	90 7f       	andi	r25, 0xF0	; 240
    30ac:	98 27       	eor	r25, r24
    30ae:	80 7f       	andi	r24, 0xF0	; 240
    30b0:	98 27       	eor	r25, r24
    30b2:	28 2f       	mov	r18, r24
    30b4:	20 68       	ori	r18, 0x80	; 128
    30b6:	eb 81       	ldd	r30, Y+3	; 0x03
    30b8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ba:	81 81       	ldd	r24, Z+1	; 0x01
    30bc:	88 2f       	mov	r24, r24
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	28 2b       	or	r18, r24
    30ce:	eb 81       	ldd	r30, Y+3	; 0x03
    30d0:	fc 81       	ldd	r31, Y+4	; 0x04
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	88 2f       	mov	r24, r24
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	82 2b       	or	r24, r18
    30de:	8c 93       	st	X, r24
	/*To calculate the ubrr value based on the baud rate given in the structure*/
	ubrrValue =(uint16)((F_CPU/( ( Config_Ptr->baudRate ) *8 ))-1);
    30e0:	eb 81       	ldd	r30, Y+3	; 0x03
    30e2:	fc 81       	ldd	r31, Y+4	; 0x04
    30e4:	83 81       	ldd	r24, Z+3	; 0x03
    30e6:	94 81       	ldd	r25, Z+4	; 0x04
    30e8:	a5 81       	ldd	r26, Z+5	; 0x05
    30ea:	b6 81       	ldd	r27, Z+6	; 0x06
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	aa 1f       	adc	r26, r26
    30f2:	bb 1f       	adc	r27, r27
    30f4:	88 0f       	add	r24, r24
    30f6:	99 1f       	adc	r25, r25
    30f8:	aa 1f       	adc	r26, r26
    30fa:	bb 1f       	adc	r27, r27
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	aa 1f       	adc	r26, r26
    3102:	bb 1f       	adc	r27, r27
    3104:	9c 01       	movw	r18, r24
    3106:	ad 01       	movw	r20, r26
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	92 e1       	ldi	r25, 0x12	; 18
    310c:	aa e7       	ldi	r26, 0x7A	; 122
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	0e 94 09 19 	call	0x3212	; 0x3212 <__udivmodsi4>
    3118:	da 01       	movw	r26, r20
    311a:	c9 01       	movw	r24, r18
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
	/*put the first eight bits in the UBRRL*/
	UBRRL=ubrrValue;
    3122:	e9 e2       	ldi	r30, 0x29	; 41
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	80 83       	st	Z, r24
	/*to put the next 4 bits of the ubbrValue we need to shift right by 8*/
	UBRRH=ubrrValue>>8;
    312a:	e0 e4       	ldi	r30, 0x40	; 64
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	9a 81       	ldd	r25, Y+2	; 0x02
    3132:	89 2f       	mov	r24, r25
    3134:	99 27       	eor	r25, r25
    3136:	80 83       	st	Z, r24
}
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	08 95       	ret

00003146 <UART_sendByte>:


void UART_sendByte(uint8 data){
    3146:	df 93       	push	r29
    3148:	cf 93       	push	r28
    314a:	0f 92       	push	r0
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	89 83       	std	Y+1, r24	; 0x01
	/*if the UDRE flag is 0 that's mean that the sending process is not finished yet
	  */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    3152:	eb e2       	ldi	r30, 0x2B	; 43
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	88 2f       	mov	r24, r24
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	80 72       	andi	r24, 0x20	; 32
    315e:	90 70       	andi	r25, 0x00	; 0
    3160:	00 97       	sbiw	r24, 0x00	; 0
    3162:	b9 f3       	breq	.-18     	; 0x3152 <UART_sendByte+0xc>
	/*if the while loop is false that's mean UDR is empty so we will put the data
	 * in the UDR register*/
	UDR=data;
    3164:	ec e2       	ldi	r30, 0x2C	; 44
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	80 83       	st	Z, r24
}
    316c:	0f 90       	pop	r0
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <UART_receiveByte>:


uint8 UART_receiveByte(){
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
	/*The RXC flag will be 1 when the receiving process is completed */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    317c:	eb e2       	ldi	r30, 0x2B	; 43
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	88 23       	and	r24, r24
    3184:	dc f7       	brge	.-10     	; 0x317c <UART_receiveByte+0x8>
	/*returning the UDR value if the flag is 1 and clear the flag in this
	 * instruction too*/
	return UDR;
    3186:	ec e2       	ldi	r30, 0x2C	; 44
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
}
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <UART_sendString>:

void UART_sendString(uint8 *string){
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	00 d0       	rcall	.+0      	; 0x3198 <UART_sendString+0x6>
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	9a 83       	std	Y+2, r25	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	0a c0       	rjmp	.+20     	; 0x31b6 <UART_sendString+0x24>
	/*while till u find the null character*/
	while(*string != '\0'){
		/*sending the first byte*/
		UART_sendByte(*string);
    31a2:	e9 81       	ldd	r30, Y+1	; 0x01
    31a4:	fa 81       	ldd	r31, Y+2	; 0x02
    31a6:	80 81       	ld	r24, Z
    31a8:	0e 94 a3 18 	call	0x3146	; 0x3146 <UART_sendByte>
		/*increment the pointer to the next byte location*/
		string++;
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	01 96       	adiw	r24, 0x01	; 1
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(uint8 *string){
	/*while till u find the null character*/
	while(*string != '\0'){
    31b6:	e9 81       	ldd	r30, Y+1	; 0x01
    31b8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ba:	80 81       	ld	r24, Z
    31bc:	88 23       	and	r24, r24
    31be:	89 f7       	brne	.-30     	; 0x31a2 <UART_sendString+0x10>
		/*sending the first byte*/
		UART_sendByte(*string);
		/*increment the pointer to the next byte location*/
		string++;
	}
}
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <UART_receiveString>:

void UART_receiveString(uint8 *string){
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <UART_receiveString+0x6>
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	89 83       	std	Y+1, r24	; 0x01
	/*receiving the first byte and then check if byte is equal to the special character */
	*string = UART_receiveByte();
    31d8:	0e 94 ba 18 	call	0x3174	; 0x3174 <UART_receiveByte>
    31dc:	e9 81       	ldd	r30, Y+1	; 0x01
    31de:	fa 81       	ldd	r31, Y+2	; 0x02
    31e0:	80 83       	st	Z, r24
    31e2:	0a c0       	rjmp	.+20     	; 0x31f8 <UART_receiveString+0x2e>
	while(*string != '#'){
		/*increment the pointer to the next byte location to put the next byte in the next location*/
		string++;
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	9a 81       	ldd	r25, Y+2	; 0x02
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	9a 83       	std	Y+2, r25	; 0x02
    31ec:	89 83       	std	Y+1, r24	; 0x01
		/*receive the next byte and put it in the next location of the string */
		*string = UART_receiveByte();
    31ee:	0e 94 ba 18 	call	0x3174	; 0x3174 <UART_receiveByte>
    31f2:	e9 81       	ldd	r30, Y+1	; 0x01
    31f4:	fa 81       	ldd	r31, Y+2	; 0x02
    31f6:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *string){
	/*receiving the first byte and then check if byte is equal to the special character */
	*string = UART_receiveByte();
	while(*string != '#'){
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	80 81       	ld	r24, Z
    31fe:	83 32       	cpi	r24, 0x23	; 35
    3200:	89 f7       	brne	.-30     	; 0x31e4 <UART_receiveString+0x1a>
		/*increment the pointer to the next byte location to put the next byte in the next location*/
		string++;
		/*receive the next byte and put it in the next location of the string */
		*string = UART_receiveByte();
	}
	*string='\0';
    3202:	e9 81       	ldd	r30, Y+1	; 0x01
    3204:	fa 81       	ldd	r31, Y+2	; 0x02
    3206:	10 82       	st	Z, r1
}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <__udivmodsi4>:
    3212:	a1 e2       	ldi	r26, 0x21	; 33
    3214:	1a 2e       	mov	r1, r26
    3216:	aa 1b       	sub	r26, r26
    3218:	bb 1b       	sub	r27, r27
    321a:	fd 01       	movw	r30, r26
    321c:	0d c0       	rjmp	.+26     	; 0x3238 <__udivmodsi4_ep>

0000321e <__udivmodsi4_loop>:
    321e:	aa 1f       	adc	r26, r26
    3220:	bb 1f       	adc	r27, r27
    3222:	ee 1f       	adc	r30, r30
    3224:	ff 1f       	adc	r31, r31
    3226:	a2 17       	cp	r26, r18
    3228:	b3 07       	cpc	r27, r19
    322a:	e4 07       	cpc	r30, r20
    322c:	f5 07       	cpc	r31, r21
    322e:	20 f0       	brcs	.+8      	; 0x3238 <__udivmodsi4_ep>
    3230:	a2 1b       	sub	r26, r18
    3232:	b3 0b       	sbc	r27, r19
    3234:	e4 0b       	sbc	r30, r20
    3236:	f5 0b       	sbc	r31, r21

00003238 <__udivmodsi4_ep>:
    3238:	66 1f       	adc	r22, r22
    323a:	77 1f       	adc	r23, r23
    323c:	88 1f       	adc	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	1a 94       	dec	r1
    3242:	69 f7       	brne	.-38     	; 0x321e <__udivmodsi4_loop>
    3244:	60 95       	com	r22
    3246:	70 95       	com	r23
    3248:	80 95       	com	r24
    324a:	90 95       	com	r25
    324c:	9b 01       	movw	r18, r22
    324e:	ac 01       	movw	r20, r24
    3250:	bd 01       	movw	r22, r26
    3252:	cf 01       	movw	r24, r30
    3254:	08 95       	ret

00003256 <__prologue_saves__>:
    3256:	2f 92       	push	r2
    3258:	3f 92       	push	r3
    325a:	4f 92       	push	r4
    325c:	5f 92       	push	r5
    325e:	6f 92       	push	r6
    3260:	7f 92       	push	r7
    3262:	8f 92       	push	r8
    3264:	9f 92       	push	r9
    3266:	af 92       	push	r10
    3268:	bf 92       	push	r11
    326a:	cf 92       	push	r12
    326c:	df 92       	push	r13
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	ca 1b       	sub	r28, r26
    3280:	db 0b       	sbc	r29, r27
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	09 94       	ijmp

0000328e <__epilogue_restores__>:
    328e:	2a 88       	ldd	r2, Y+18	; 0x12
    3290:	39 88       	ldd	r3, Y+17	; 0x11
    3292:	48 88       	ldd	r4, Y+16	; 0x10
    3294:	5f 84       	ldd	r5, Y+15	; 0x0f
    3296:	6e 84       	ldd	r6, Y+14	; 0x0e
    3298:	7d 84       	ldd	r7, Y+13	; 0x0d
    329a:	8c 84       	ldd	r8, Y+12	; 0x0c
    329c:	9b 84       	ldd	r9, Y+11	; 0x0b
    329e:	aa 84       	ldd	r10, Y+10	; 0x0a
    32a0:	b9 84       	ldd	r11, Y+9	; 0x09
    32a2:	c8 84       	ldd	r12, Y+8	; 0x08
    32a4:	df 80       	ldd	r13, Y+7	; 0x07
    32a6:	ee 80       	ldd	r14, Y+6	; 0x06
    32a8:	fd 80       	ldd	r15, Y+5	; 0x05
    32aa:	0c 81       	ldd	r16, Y+4	; 0x04
    32ac:	1b 81       	ldd	r17, Y+3	; 0x03
    32ae:	aa 81       	ldd	r26, Y+2	; 0x02
    32b0:	b9 81       	ldd	r27, Y+1	; 0x01
    32b2:	ce 0f       	add	r28, r30
    32b4:	d1 1d       	adc	r29, r1
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	ed 01       	movw	r28, r26
    32c2:	08 95       	ret

000032c4 <itoa>:
    32c4:	fb 01       	movw	r30, r22
    32c6:	9f 01       	movw	r18, r30
    32c8:	e8 94       	clt
    32ca:	42 30       	cpi	r20, 0x02	; 2
    32cc:	c4 f0       	brlt	.+48     	; 0x32fe <itoa+0x3a>
    32ce:	45 32       	cpi	r20, 0x25	; 37
    32d0:	b4 f4       	brge	.+44     	; 0x32fe <itoa+0x3a>
    32d2:	4a 30       	cpi	r20, 0x0A	; 10
    32d4:	29 f4       	brne	.+10     	; 0x32e0 <itoa+0x1c>
    32d6:	97 fb       	bst	r25, 7
    32d8:	1e f4       	brtc	.+6      	; 0x32e0 <itoa+0x1c>
    32da:	90 95       	com	r25
    32dc:	81 95       	neg	r24
    32de:	9f 4f       	sbci	r25, 0xFF	; 255
    32e0:	64 2f       	mov	r22, r20
    32e2:	77 27       	eor	r23, r23
    32e4:	0e 94 93 19 	call	0x3326	; 0x3326 <__udivmodhi4>
    32e8:	80 5d       	subi	r24, 0xD0	; 208
    32ea:	8a 33       	cpi	r24, 0x3A	; 58
    32ec:	0c f0       	brlt	.+2      	; 0x32f0 <itoa+0x2c>
    32ee:	89 5d       	subi	r24, 0xD9	; 217
    32f0:	81 93       	st	Z+, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	a1 f7       	brne	.-24     	; 0x32e0 <itoa+0x1c>
    32f8:	16 f4       	brtc	.+4      	; 0x32fe <itoa+0x3a>
    32fa:	5d e2       	ldi	r21, 0x2D	; 45
    32fc:	51 93       	st	Z+, r21
    32fe:	10 82       	st	Z, r1
    3300:	c9 01       	movw	r24, r18
    3302:	0c 94 83 19 	jmp	0x3306	; 0x3306 <strrev>

00003306 <strrev>:
    3306:	dc 01       	movw	r26, r24
    3308:	fc 01       	movw	r30, r24
    330a:	67 2f       	mov	r22, r23
    330c:	71 91       	ld	r23, Z+
    330e:	77 23       	and	r23, r23
    3310:	e1 f7       	brne	.-8      	; 0x330a <strrev+0x4>
    3312:	32 97       	sbiw	r30, 0x02	; 2
    3314:	04 c0       	rjmp	.+8      	; 0x331e <strrev+0x18>
    3316:	7c 91       	ld	r23, X
    3318:	6d 93       	st	X+, r22
    331a:	70 83       	st	Z, r23
    331c:	62 91       	ld	r22, -Z
    331e:	ae 17       	cp	r26, r30
    3320:	bf 07       	cpc	r27, r31
    3322:	c8 f3       	brcs	.-14     	; 0x3316 <strrev+0x10>
    3324:	08 95       	ret

00003326 <__udivmodhi4>:
    3326:	aa 1b       	sub	r26, r26
    3328:	bb 1b       	sub	r27, r27
    332a:	51 e1       	ldi	r21, 0x11	; 17
    332c:	07 c0       	rjmp	.+14     	; 0x333c <__udivmodhi4_ep>

0000332e <__udivmodhi4_loop>:
    332e:	aa 1f       	adc	r26, r26
    3330:	bb 1f       	adc	r27, r27
    3332:	a6 17       	cp	r26, r22
    3334:	b7 07       	cpc	r27, r23
    3336:	10 f0       	brcs	.+4      	; 0x333c <__udivmodhi4_ep>
    3338:	a6 1b       	sub	r26, r22
    333a:	b7 0b       	sbc	r27, r23

0000333c <__udivmodhi4_ep>:
    333c:	88 1f       	adc	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	5a 95       	dec	r21
    3342:	a9 f7       	brne	.-22     	; 0x332e <__udivmodhi4_loop>
    3344:	80 95       	com	r24
    3346:	90 95       	com	r25
    3348:	bc 01       	movw	r22, r24
    334a:	cd 01       	movw	r24, r26
    334c:	08 95       	ret

0000334e <_exit>:
    334e:	f8 94       	cli

00003350 <__stop_program>:
    3350:	ff cf       	rjmp	.-2      	; 0x3350 <__stop_program>
